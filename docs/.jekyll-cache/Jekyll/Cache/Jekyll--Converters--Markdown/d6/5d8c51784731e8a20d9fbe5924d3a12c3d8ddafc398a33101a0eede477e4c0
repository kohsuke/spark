I"”è<p>Mining frequent items, itemsets, subsequences, or other substructures is usually among the
first steps to analyze a large-scale dataset, which has been an active research topic in
data mining for years.
We refer users to Wikipedia&#8217;s <a href="http://en.wikipedia.org/wiki/Association_rule_learning">association rule learning</a>
for more information.
<code>spark.mllib</code> provides a parallel implementation of FP-growth,
a popular algorithm to mining frequent itemsets.</p>

<h2 id="fp-growth">FP-growth</h2>

<p>The FP-growth algorithm is described in the paper
<a href="https://doi.org/10.1145/335191.335372">Han et al., Mining frequent patterns without candidate generation</a>,
where &#8220;FP&#8221; stands for frequent pattern.
Given a dataset of transactions, the first step of FP-growth is to calculate item frequencies and identify frequent items.
Different from <a href="http://en.wikipedia.org/wiki/Apriori_algorithm">Apriori-like</a> algorithms designed for the same purpose,
the second step of FP-growth uses a suffix tree (FP-tree) structure to encode transactions without generating candidate sets
explicitly, which are usually expensive to generate.
After the second step, the frequent itemsets can be extracted from the FP-tree.
In <code>spark.mllib</code>, we implemented a parallel version of FP-growth called PFP,
as described in <a href="https://doi.org/10.1145/1454008.1454027">Li et al., PFP: Parallel FP-growth for query recommendation</a>.
PFP distributes the work of growing FP-trees based on the suffixes of transactions,
and hence more scalable than a single-machine implementation.
We refer users to the papers for more details.</p>

<p><code>spark.mllib</code>&#8217;s FP-growth implementation takes the following (hyper-)parameters:</p>

<ul>
  <li><code>minSupport</code>: the minimum support for an itemset to be identified as frequent.
For example, if an item appears 3 out of 5 transactions, it has a support of 3/5=0.6.</li>
  <li><code>numPartitions</code>: the number of partitions used to distribute the work.</li>
</ul>

<p><strong>Examples</strong></p>

<div class="codetabs">
<div data-lang="scala">

    <p><a href="api/scala/index.html#org.apache.spark.mllib.fpm.FPGrowth"><code>FPGrowth</code></a> implements the
FP-growth algorithm.
It takes an <code>RDD</code> of transactions, where each transaction is an <code>Array</code> of items of a generic type.
Calling <code>FPGrowth.run</code> with transactions returns an
<a href="api/scala/index.html#org.apache.spark.mllib.fpm.FPGrowthModel"><code>FPGrowthModel</code></a>
that stores the frequent itemsets with their frequencies.  The following
example illustrates how to mine frequent itemsets and association rules
(see <a href="mllib-frequent-pattern-mining.html#association-rules">Association
Rules</a> for
details) from <code>transactions</code>.</p>

    <p>Refer to the <a href="api/scala/index.html#org.apache.spark.mllib.fpm.FPGrowth"><code>FPGrowth</code> Scala docs</a> for details on the API.</p>

    <div class="highlight"><pre><span></span><span class="k">import</span> <span class="nn">org.apache.spark.mllib.fpm.FPGrowth</span>
<span class="k">import</span> <span class="nn">org.apache.spark.rdd.RDD</span>

<span class="k">val</span> <span class="n">data</span> <span class="k">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">textFile</span><span class="o">(</span><span class="s">&quot;data/mllib/sample_fpgrowth.txt&quot;</span><span class="o">)</span>

<span class="k">val</span> <span class="n">transactions</span><span class="k">:</span> <span class="kt">RDD</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">]]</span> <span class="k">=</span> <span class="n">data</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">s</span> <span class="k">=&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">trim</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="sc">&#39; &#39;</span><span class="o">))</span>

<span class="k">val</span> <span class="n">fpg</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">FPGrowth</span><span class="o">()</span>
  <span class="o">.</span><span class="n">setMinSupport</span><span class="o">(</span><span class="mf">0.2</span><span class="o">)</span>
  <span class="o">.</span><span class="n">setNumPartitions</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
<span class="k">val</span> <span class="n">model</span> <span class="k">=</span> <span class="n">fpg</span><span class="o">.</span><span class="n">run</span><span class="o">(</span><span class="n">transactions</span><span class="o">)</span>

<span class="n">model</span><span class="o">.</span><span class="n">freqItemsets</span><span class="o">.</span><span class="n">collect</span><span class="o">().</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">itemset</span> <span class="k">=&gt;</span>
  <span class="n">println</span><span class="o">(</span><span class="s">s&quot;</span><span class="si">${</span><span class="n">itemset</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;[&quot;</span><span class="o">,</span> <span class="s">&quot;,&quot;</span><span class="o">,</span> <span class="s">&quot;]&quot;</span><span class="o">)</span><span class="si">}</span><span class="s">,</span><span class="si">${</span><span class="n">itemset</span><span class="o">.</span><span class="n">freq</span><span class="si">}</span><span class="s">&quot;</span><span class="o">)</span>
<span class="o">}</span>

<span class="k">val</span> <span class="n">minConfidence</span> <span class="k">=</span> <span class="mf">0.8</span>
<span class="n">model</span><span class="o">.</span><span class="n">generateAssociationRules</span><span class="o">(</span><span class="n">minConfidence</span><span class="o">).</span><span class="n">collect</span><span class="o">().</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">rule</span> <span class="k">=&gt;</span>
  <span class="n">println</span><span class="o">(</span><span class="s">s&quot;</span><span class="si">${</span><span class="n">rule</span><span class="o">.</span><span class="n">antecedent</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;[&quot;</span><span class="o">,</span> <span class="s">&quot;,&quot;</span><span class="o">,</span> <span class="s">&quot;]&quot;</span><span class="o">)</span><span class="si">}</span><span class="s">=&gt; &quot;</span> <span class="o">+</span>
    <span class="s">s&quot;</span><span class="si">${</span><span class="n">rule</span><span class="o">.</span><span class="n">consequent</span> <span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;[&quot;</span><span class="o">,</span> <span class="s">&quot;,&quot;</span><span class="o">,</span> <span class="s">&quot;]&quot;</span><span class="o">)</span><span class="si">}</span><span class="s">,</span><span class="si">${</span><span class="n">rule</span><span class="o">.</span><span class="n">confidence</span><span class="si">}</span><span class="s">&quot;</span><span class="o">)</span>
<span class="o">}</span>
</pre></div>
    <div><small>Find full example code at "examples/src/main/scala/org/apache/spark/examples/mllib/SimpleFPGrowth.scala" in the Spark repo.</small></div>

  </div>

<div data-lang="java">

    <p><a href="api/java/org/apache/spark/mllib/fpm/FPGrowth.html"><code>FPGrowth</code></a> implements the
FP-growth algorithm.
It takes a <code>JavaRDD</code> of transactions, where each transaction is an <code>Iterable</code> of items of a generic type.
Calling <code>FPGrowth.run</code> with transactions returns an
<a href="api/java/org/apache/spark/mllib/fpm/FPGrowthModel.html"><code>FPGrowthModel</code></a>
that stores the frequent itemsets with their frequencies.  The following
example illustrates how to mine frequent itemsets and association rules
(see <a href="mllib-frequent-pattern-mining.html#association-rules">Association
Rules</a> for
details) from <code>transactions</code>.</p>

    <p>Refer to the <a href="api/java/org/apache/spark/mllib/fpm/FPGrowth.html"><code>FPGrowth</code> Java docs</a> for details on the API.</p>

    <div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.apache.spark.api.java.JavaRDD</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.api.java.JavaSparkContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.mllib.fpm.AssociationRules</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.mllib.fpm.FPGrowth</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.mllib.fpm.FPGrowthModel</span><span class="o">;</span>

<span class="n">JavaRDD</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">textFile</span><span class="o">(</span><span class="s">&quot;data/mllib/sample_fpgrowth.txt&quot;</span><span class="o">);</span>

<span class="n">JavaRDD</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">transactions</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">line</span> <span class="o">-&gt;</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">)));</span>

<span class="n">FPGrowth</span> <span class="n">fpg</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FPGrowth</span><span class="o">()</span>
  <span class="o">.</span><span class="na">setMinSupport</span><span class="o">(</span><span class="mf">0.2</span><span class="o">)</span>
  <span class="o">.</span><span class="na">setNumPartitions</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="n">FPGrowthModel</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="n">fpg</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">transactions</span><span class="o">);</span>

<span class="k">for</span> <span class="o">(</span><span class="n">FPGrowth</span><span class="o">.</span><span class="na">FreqItemset</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">itemset</span><span class="o">:</span> <span class="n">model</span><span class="o">.</span><span class="na">freqItemsets</span><span class="o">().</span><span class="na">toJavaRDD</span><span class="o">().</span><span class="na">collect</span><span class="o">())</span> <span class="o">{</span>
  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="n">itemset</span><span class="o">.</span><span class="na">javaItems</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;], &quot;</span> <span class="o">+</span> <span class="n">itemset</span><span class="o">.</span><span class="na">freq</span><span class="o">());</span>
<span class="o">}</span>

<span class="kt">double</span> <span class="n">minConfidence</span> <span class="o">=</span> <span class="mf">0.8</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="n">AssociationRules</span><span class="o">.</span><span class="na">Rule</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">rule</span>
  <span class="o">:</span> <span class="n">model</span><span class="o">.</span><span class="na">generateAssociationRules</span><span class="o">(</span><span class="n">minConfidence</span><span class="o">).</span><span class="na">toJavaRDD</span><span class="o">().</span><span class="na">collect</span><span class="o">())</span> <span class="o">{</span>
  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
    <span class="n">rule</span><span class="o">.</span><span class="na">javaAntecedent</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; =&gt; &quot;</span> <span class="o">+</span> <span class="n">rule</span><span class="o">.</span><span class="na">javaConsequent</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="n">rule</span><span class="o">.</span><span class="na">confidence</span><span class="o">());</span>
<span class="o">}</span>
</pre></div>
    <div><small>Find full example code at "examples/src/main/java/org/apache/spark/examples/mllib/JavaSimpleFPGrowth.java" in the Spark repo.</small></div>

  </div>

<div data-lang="python">

    <p><a href="api/python/pyspark.mllib.html#pyspark.mllib.fpm.FPGrowth"><code>FPGrowth</code></a> implements the
FP-growth algorithm.
It takes an <code>RDD</code> of transactions, where each transaction is an <code>List</code> of items of a generic type.
Calling <code>FPGrowth.train</code> with transactions returns an
<a href="api/python/pyspark.mllib.html#pyspark.mllib.fpm.FPGrowthModel"><code>FPGrowthModel</code></a>
that stores the frequent itemsets with their frequencies.</p>

    <p>Refer to the <a href="api/python/pyspark.mllib.html#pyspark.mllib.fpm.FPGrowth"><code>FPGrowth</code> Python docs</a> for more details on the API.</p>

    <div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">pyspark.mllib.fpm</span> <span class="kn">import</span> <span class="n">FPGrowth</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">textFile</span><span class="p">(</span><span class="s2">&quot;data/mllib/sample_fpgrowth.txt&quot;</span><span class="p">)</span>
<span class="n">transactions</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">line</span><span class="p">:</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">))</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">FPGrowth</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">transactions</span><span class="p">,</span> <span class="n">minSupport</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">numPartitions</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">freqItemsets</span><span class="p">()</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="k">for</span> <span class="n">fi</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">fi</span><span class="p">)</span>
</pre></div>
    <div><small>Find full example code at "examples/src/main/python/mllib/fpgrowth_example.py" in the Spark repo.</small></div>

  </div>

</div>

<h2 id="association-rules">Association Rules</h2>

<div class="codetabs">
<div data-lang="scala">
    <p><a href="api/scala/index.html#org.apache.spark.mllib.fpm.AssociationRules">AssociationRules</a>
implements a parallel rule generation algorithm for constructing rules
that have a single item as the consequent.</p>

    <p>Refer to the <a href="api/java/org/apache/spark/mllib/fpm/AssociationRules.html"><code>AssociationRules</code> Scala docs</a> for details on the API.</p>

    <div class="highlight"><pre><span></span><span class="k">import</span> <span class="nn">org.apache.spark.mllib.fpm.AssociationRules</span>
<span class="k">import</span> <span class="nn">org.apache.spark.mllib.fpm.FPGrowth.FreqItemset</span>

<span class="k">val</span> <span class="n">freqItemsets</span> <span class="k">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">parallelize</span><span class="o">(</span><span class="nc">Seq</span><span class="o">(</span>
  <span class="k">new</span> <span class="nc">FreqItemset</span><span class="o">(</span><span class="nc">Array</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">),</span> <span class="mi">15L</span><span class="o">),</span>
  <span class="k">new</span> <span class="nc">FreqItemset</span><span class="o">(</span><span class="nc">Array</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">),</span> <span class="mi">35L</span><span class="o">),</span>
  <span class="k">new</span> <span class="nc">FreqItemset</span><span class="o">(</span><span class="nc">Array</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">),</span> <span class="mi">12L</span><span class="o">)</span>
<span class="o">))</span>

<span class="k">val</span> <span class="n">ar</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">AssociationRules</span><span class="o">()</span>
  <span class="o">.</span><span class="n">setMinConfidence</span><span class="o">(</span><span class="mf">0.8</span><span class="o">)</span>
<span class="k">val</span> <span class="n">results</span> <span class="k">=</span> <span class="n">ar</span><span class="o">.</span><span class="n">run</span><span class="o">(</span><span class="n">freqItemsets</span><span class="o">)</span>

<span class="n">results</span><span class="o">.</span><span class="n">collect</span><span class="o">().</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">rule</span> <span class="k">=&gt;</span>
<span class="n">println</span><span class="o">(</span><span class="s">s&quot;[</span><span class="si">${</span><span class="n">rule</span><span class="o">.</span><span class="n">antecedent</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">)</span><span class="si">}</span><span class="s">=&gt;</span><span class="si">${</span><span class="n">rule</span><span class="o">.</span><span class="n">consequent</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">)</span><span class="si">}</span><span class="s"> ]&quot;</span> <span class="o">+</span>
    <span class="s">s&quot; </span><span class="si">${</span><span class="n">rule</span><span class="o">.</span><span class="n">confidence</span><span class="si">}</span><span class="s">&quot;</span><span class="o">)</span>
<span class="o">}</span>
</pre></div>
    <div><small>Find full example code at "examples/src/main/scala/org/apache/spark/examples/mllib/AssociationRulesExample.scala" in the Spark repo.</small></div>

  </div>

<div data-lang="java">
    <p><a href="api/java/org/apache/spark/mllib/fpm/AssociationRules.html">AssociationRules</a>
implements a parallel rule generation algorithm for constructing rules
that have a single item as the consequent.</p>

    <p>Refer to the <a href="api/java/org/apache/spark/mllib/fpm/AssociationRules.html"><code>AssociationRules</code> Java docs</a> for details on the API.</p>

    <div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.apache.spark.api.java.JavaRDD</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.api.java.JavaSparkContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.mllib.fpm.AssociationRules</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.mllib.fpm.FPGrowth</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.mllib.fpm.FPGrowth.FreqItemset</span><span class="o">;</span>

<span class="n">JavaRDD</span><span class="o">&lt;</span><span class="n">FPGrowth</span><span class="o">.</span><span class="na">FreqItemset</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">freqItemsets</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">parallelize</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
  <span class="k">new</span> <span class="n">FreqItemset</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;a&quot;</span><span class="o">},</span> <span class="mi">15L</span><span class="o">),</span>
  <span class="k">new</span> <span class="n">FreqItemset</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;b&quot;</span><span class="o">},</span> <span class="mi">35L</span><span class="o">),</span>
  <span class="k">new</span> <span class="n">FreqItemset</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">},</span> <span class="mi">12L</span><span class="o">)</span>
<span class="o">));</span>

<span class="n">AssociationRules</span> <span class="n">arules</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AssociationRules</span><span class="o">()</span>
  <span class="o">.</span><span class="na">setMinConfidence</span><span class="o">(</span><span class="mf">0.8</span><span class="o">);</span>
<span class="n">JavaRDD</span><span class="o">&lt;</span><span class="n">AssociationRules</span><span class="o">.</span><span class="na">Rule</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">arules</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">freqItemsets</span><span class="o">);</span>

<span class="k">for</span> <span class="o">(</span><span class="n">AssociationRules</span><span class="o">.</span><span class="na">Rule</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">rule</span> <span class="o">:</span> <span class="n">results</span><span class="o">.</span><span class="na">collect</span><span class="o">())</span> <span class="o">{</span>
  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
    <span class="n">rule</span><span class="o">.</span><span class="na">javaAntecedent</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; =&gt; &quot;</span> <span class="o">+</span> <span class="n">rule</span><span class="o">.</span><span class="na">javaConsequent</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="n">rule</span><span class="o">.</span><span class="na">confidence</span><span class="o">());</span>
<span class="o">}</span>
</pre></div>
    <div><small>Find full example code at "examples/src/main/java/org/apache/spark/examples/mllib/JavaAssociationRulesExample.java" in the Spark repo.</small></div>

  </div>
</div>

<h2 id="prefixspan">PrefixSpan</h2>

<p>PrefixSpan is a sequential pattern mining algorithm described in
<a href="https://doi.org/10.1109%2FTKDE.2004.77">Pei et al., Mining Sequential Patterns by Pattern-Growth: The
PrefixSpan Approach</a>. We refer
the reader to the referenced paper for formalizing the sequential
pattern mining problem.</p>

<p><code>spark.mllib</code>&#8217;s PrefixSpan implementation takes the following parameters:</p>

<ul>
  <li><code>minSupport</code>: the minimum support required to be considered a frequent
sequential pattern.</li>
  <li><code>maxPatternLength</code>: the maximum length of a frequent sequential
pattern. Any frequent pattern exceeding this length will not be
included in the results.</li>
  <li><code>maxLocalProjDBSize</code>: the maximum number of items allowed in a
prefix-projected database before local iterative processing of the
projected database begins. This parameter should be tuned with respect
to the size of your executors.</li>
</ul>

<p><strong>Examples</strong></p>

<p>The following example illustrates PrefixSpan running on the sequences
(using same notation as Pei et al):</p>

<pre><code>  &lt;(12)3&gt;
  &lt;1(32)(12)&gt;
  &lt;(12)5&gt;
  &lt;6&gt;
</code></pre>

<div class="codetabs">
<div data-lang="scala">

    <p><a href="api/scala/index.html#org.apache.spark.mllib.fpm.PrefixSpan"><code>PrefixSpan</code></a> implements the
PrefixSpan algorithm.
Calling <code>PrefixSpan.run</code> returns a
<a href="api/scala/index.html#org.apache.spark.mllib.fpm.PrefixSpanModel"><code>PrefixSpanModel</code></a>
that stores the frequent sequences with their frequencies.</p>

    <p>Refer to the <a href="api/scala/index.html#org.apache.spark.mllib.fpm.PrefixSpan"><code>PrefixSpan</code> Scala docs</a> and <a href="api/scala/index.html#org.apache.spark.mllib.fpm.PrefixSpanModel"><code>PrefixSpanModel</code> Scala docs</a> for details on the API.</p>

    <div class="highlight"><pre><span></span><span class="k">import</span> <span class="nn">org.apache.spark.mllib.fpm.PrefixSpan</span>

<span class="k">val</span> <span class="n">sequences</span> <span class="k">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">parallelize</span><span class="o">(</span><span class="nc">Seq</span><span class="o">(</span>
  <span class="nc">Array</span><span class="o">(</span><span class="nc">Array</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="nc">Array</span><span class="o">(</span><span class="mi">3</span><span class="o">)),</span>
  <span class="nc">Array</span><span class="o">(</span><span class="nc">Array</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="nc">Array</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="nc">Array</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">)),</span>
  <span class="nc">Array</span><span class="o">(</span><span class="nc">Array</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="nc">Array</span><span class="o">(</span><span class="mi">5</span><span class="o">)),</span>
  <span class="nc">Array</span><span class="o">(</span><span class="nc">Array</span><span class="o">(</span><span class="mi">6</span><span class="o">))</span>
<span class="o">),</span> <span class="mi">2</span><span class="o">).</span><span class="n">cache</span><span class="o">()</span>
<span class="k">val</span> <span class="n">prefixSpan</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">PrefixSpan</span><span class="o">()</span>
  <span class="o">.</span><span class="n">setMinSupport</span><span class="o">(</span><span class="mf">0.5</span><span class="o">)</span>
  <span class="o">.</span><span class="n">setMaxPatternLength</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
<span class="k">val</span> <span class="n">model</span> <span class="k">=</span> <span class="n">prefixSpan</span><span class="o">.</span><span class="n">run</span><span class="o">(</span><span class="n">sequences</span><span class="o">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">freqSequences</span><span class="o">.</span><span class="n">collect</span><span class="o">().</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">freqSequence</span> <span class="k">=&gt;</span>
  <span class="n">println</span><span class="o">(</span>
    <span class="s">s&quot;</span><span class="si">${</span><span class="n">freqSequence</span><span class="o">.</span><span class="n">sequence</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;[&quot;</span><span class="o">,</span> <span class="s">&quot;, &quot;</span><span class="o">,</span> <span class="s">&quot;]&quot;</span><span class="o">)).</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;[&quot;</span><span class="o">,</span> <span class="s">&quot;, &quot;</span><span class="o">,</span> <span class="s">&quot;]&quot;</span><span class="o">)</span><span class="si">}</span><span class="s">,&quot;</span> <span class="o">+</span>
      <span class="s">s&quot; </span><span class="si">${</span><span class="n">freqSequence</span><span class="o">.</span><span class="n">freq</span><span class="si">}</span><span class="s">&quot;</span><span class="o">)</span>
<span class="o">}</span>
</pre></div>
    <div><small>Find full example code at "examples/src/main/scala/org/apache/spark/examples/mllib/PrefixSpanExample.scala" in the Spark repo.</small></div>

  </div>

<div data-lang="java">

    <p><a href="api/java/org/apache/spark/mllib/fpm/PrefixSpan.html"><code>PrefixSpan</code></a> implements the
PrefixSpan algorithm.
Calling <code>PrefixSpan.run</code> returns a
<a href="api/java/org/apache/spark/mllib/fpm/PrefixSpanModel.html"><code>PrefixSpanModel</code></a>
that stores the frequent sequences with their frequencies.</p>

    <p>Refer to the <a href="api/java/org/apache/spark/mllib/fpm/PrefixSpan.html"><code>PrefixSpan</code> Java docs</a> and <a href="api/java/org/apache/spark/mllib/fpm/PrefixSpanModel.html"><code>PrefixSpanModel</code> Java docs</a> for details on the API.</p>

    <div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.apache.spark.mllib.fpm.PrefixSpan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.mllib.fpm.PrefixSpanModel</span><span class="o">;</span>

<span class="n">JavaRDD</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;&gt;</span> <span class="n">sequences</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">parallelize</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
  <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">3</span><span class="o">)),</span>
  <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">)),</span>
  <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">5</span><span class="o">)),</span>
  <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">6</span><span class="o">))</span>
<span class="o">),</span> <span class="mi">2</span><span class="o">);</span>
<span class="n">PrefixSpan</span> <span class="n">prefixSpan</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrefixSpan</span><span class="o">()</span>
  <span class="o">.</span><span class="na">setMinSupport</span><span class="o">(</span><span class="mf">0.5</span><span class="o">)</span>
  <span class="o">.</span><span class="na">setMaxPatternLength</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
<span class="n">PrefixSpanModel</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="n">prefixSpan</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">sequences</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="n">PrefixSpan</span><span class="o">.</span><span class="na">FreqSequence</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">freqSeq</span><span class="o">:</span> <span class="n">model</span><span class="o">.</span><span class="na">freqSequences</span><span class="o">().</span><span class="na">toJavaRDD</span><span class="o">().</span><span class="na">collect</span><span class="o">())</span> <span class="o">{</span>
  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">freqSeq</span><span class="o">.</span><span class="na">javaSequence</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="n">freqSeq</span><span class="o">.</span><span class="na">freq</span><span class="o">());</span>
<span class="o">}</span>
</pre></div>
    <div><small>Find full example code at "examples/src/main/java/org/apache/spark/examples/mllib/JavaPrefixSpanExample.java" in the Spark repo.</small></div>

  </div>
</div>

:ET