I"Ò<p>A common question received by Spark developers is how to configure hardware for it. While the right
hardware will depend on the situation, we make the following recommendations.</p>

<h1 id="storage-systems">Storage Systems</h1>

<p>Because most Spark jobs will likely have to read input data from an external storage system (e.g.
the Hadoop File System, or HBase), it is important to place it <strong>as close to this system as
possible</strong>. We recommend the following:</p>

<ul>
  <li>
    <p>If at all possible, run Spark on the same nodes as HDFS. The simplest way is to set up a Spark
<a href="spark-standalone.html">standalone mode cluster</a> on the same nodes, and configure Spark and
Hadoop&#8217;s memory and CPU usage to avoid interference (for Hadoop, the relevant options are
<code>mapred.child.java.opts</code> for the per-task memory and <code>mapreduce.tasktracker.map.tasks.maximum</code>
and <code>mapreduce.tasktracker.reduce.tasks.maximum</code> for number of tasks). Alternatively, you can run
Hadoop and Spark on a common cluster manager like <a href="running-on-mesos.html">Mesos</a> or
<a href="running-on-yarn.html">Hadoop YARN</a>.</p>
  </li>
  <li>
    <p>If this is not possible, run Spark on different nodes in the same local-area network as HDFS.</p>
  </li>
  <li>
    <p>For low-latency data stores like HBase, it may be preferable to run computing jobs on different
nodes than the storage system to avoid interference.</p>
  </li>
</ul>

<h1 id="local-disks">Local Disks</h1>

<p>While Spark can perform a lot of its computation in memory, it still uses local disks to store
data that doesn&#8217;t fit in RAM, as well as to preserve intermediate output between stages. We
recommend having <strong>4-8 disks</strong> per node, configured <em>without</em> RAID (just as separate mount points).
In Linux, mount the disks with the <code>noatime</code> option
to reduce unnecessary writes. In Spark, <a href="configuration.html">configure</a> the <code>spark.local.dir</code>
variable to be a comma-separated list of the local disks. If you are running HDFS, it&#8217;s fine to
use the same disks as HDFS.</p>

<h1 id="memory">Memory</h1>

<p>In general, Spark can run well with anywhere from <strong>8 GiB to hundreds of gigabytes</strong> of memory per
machine. In all cases, we recommend allocating only at most 75% of the memory for Spark; leave the
rest for the operating system and buffer cache.</p>

<p>How much memory you will need will depend on your application. To determine how much your
application uses for a certain dataset size, load part of your dataset in a Spark RDD and use the
Storage tab of Spark&#8217;s monitoring UI (<code>http://&lt;driver-node&gt;:4040</code>) to see its size in memory.
Note that memory usage is greatly affected by storage level and serialization format &#8211; see
the <a href="tuning.html">tuning guide</a> for tips on how to reduce it.</p>

<p>Finally, note that the Java VM does not always behave well with more than 200 GiB of RAM. If you
purchase machines with more RAM than this, you can run <em>multiple worker JVMs per node</em>. In
Spark&#8217;s <a href="spark-standalone.html">standalone mode</a>, you can set the number of workers per node
with the <code>SPARK_WORKER_INSTANCES</code> variable in <code>conf/spark-env.sh</code>, and the number of cores
per worker with <code>SPARK_WORKER_CORES</code>.</p>

<h1 id="network">Network</h1>

<p>In our experience, when the data is in memory, a lot of Spark applications are network-bound.
Using a <strong>10 Gigabit</strong> or higher network is the best way to make these applications faster.
This is especially true for &#8220;distributed reduce&#8221; applications such as group-bys, reduce-bys, and
SQL joins. In any given application, you can see how much data Spark shuffles across the network
from the application&#8217;s monitoring UI (<code>http://&lt;driver-node&gt;:4040</code>).</p>

<h1 id="cpu-cores">CPU Cores</h1>

<p>Spark scales well to tens of CPU cores per machine because it performs minimal sharing between
threads. You should likely provision at least <strong>8-16 cores</strong> per machine. Depending on the CPU
cost of your workload, you may also need more: once data is in memory, most applications are
either CPU- or network-bound.</p>
:ET