I"É<p><code>\[
\newcommand{\R}{\mathbb{R}}
\newcommand{\E}{\mathbb{E}}
\newcommand{\x}{\mathbf{x}}
\newcommand{\y}{\mathbf{y}}
\newcommand{\wv}{\mathbf{w}}
\newcommand{\av}{\mathbf{\alpha}}
\newcommand{\bv}{\mathbf{b}}
\newcommand{\N}{\mathbb{N}}
\newcommand{\id}{\mathbf{I}}
\newcommand{\ind}{\mathbf{1}}
\newcommand{\0}{\mathbf{0}}
\newcommand{\unit}{\mathbf{e}}
\newcommand{\one}{\mathbf{1}}
\newcommand{\zero}{\mathbf{0}}
\]</code></p>

<p><strong>Table of Contents</strong></p>

<ul id="markdown-toc">
  <li><a href="#correlation" id="markdown-toc-correlation">Correlation</a></li>
  <li><a href="#hypothesis-testing" id="markdown-toc-hypothesis-testing">Hypothesis testing</a></li>
  <li><a href="#summarizer" id="markdown-toc-summarizer">Summarizer</a></li>
</ul>

<h2 id="correlation">Correlation</h2>

<p>Calculating the correlation between two series of data is a common operation in Statistics. In <code>spark.ml</code>
we provide the flexibility to calculate pairwise correlations among many series. The supported
correlation methods are currently Pearson&#8217;s and Spearman&#8217;s correlation.</p>

<div class="codetabs">
<div data-lang="scala">
    <p><a href="api/scala/index.html#org.apache.spark.ml.stat.Correlation$"><code>Correlation</code></a>
computes the correlation matrix for the input Dataset of Vectors using the specified method.
The output will be a DataFrame that contains the correlation matrix of the column of vectors.</p>

    <div class="highlight"><pre><span></span><span class="k">import</span> <span class="nn">org.apache.spark.ml.linalg.</span><span class="o">{</span><span class="nc">Matrix</span><span class="o">,</span> <span class="nc">Vectors</span><span class="o">}</span>
<span class="k">import</span> <span class="nn">org.apache.spark.ml.stat.Correlation</span>
<span class="k">import</span> <span class="nn">org.apache.spark.sql.Row</span>

<span class="k">val</span> <span class="n">data</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
  <span class="nc">Vectors</span><span class="o">.</span><span class="n">sparse</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="nc">Seq</span><span class="o">((</span><span class="mi">0</span><span class="o">,</span> <span class="mf">1.0</span><span class="o">),</span> <span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="o">-</span><span class="mf">2.0</span><span class="o">))),</span>
  <span class="nc">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="o">(</span><span class="mf">4.0</span><span class="o">,</span> <span class="mf">5.0</span><span class="o">,</span> <span class="mf">0.0</span><span class="o">,</span> <span class="mf">3.0</span><span class="o">),</span>
  <span class="nc">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="o">(</span><span class="mf">6.0</span><span class="o">,</span> <span class="mf">7.0</span><span class="o">,</span> <span class="mf">0.0</span><span class="o">,</span> <span class="mf">8.0</span><span class="o">),</span>
  <span class="nc">Vectors</span><span class="o">.</span><span class="n">sparse</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="nc">Seq</span><span class="o">((</span><span class="mi">0</span><span class="o">,</span> <span class="mf">9.0</span><span class="o">),</span> <span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mf">1.0</span><span class="o">)))</span>
<span class="o">)</span>

<span class="k">val</span> <span class="n">df</span> <span class="k">=</span> <span class="n">data</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">Tuple1</span><span class="o">.</span><span class="n">apply</span><span class="o">).</span><span class="n">toDF</span><span class="o">(</span><span class="s">&quot;features&quot;</span><span class="o">)</span>
<span class="k">val</span> <span class="nc">Row</span><span class="o">(</span><span class="n">coeff1</span><span class="k">:</span> <span class="kt">Matrix</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Correlation</span><span class="o">.</span><span class="n">corr</span><span class="o">(</span><span class="n">df</span><span class="o">,</span> <span class="s">&quot;features&quot;</span><span class="o">).</span><span class="n">head</span>
<span class="n">println</span><span class="o">(</span><span class="s">s&quot;Pearson correlation matrix:\n </span><span class="si">$coeff1</span><span class="s">&quot;</span><span class="o">)</span>

<span class="k">val</span> <span class="nc">Row</span><span class="o">(</span><span class="n">coeff2</span><span class="k">:</span> <span class="kt">Matrix</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Correlation</span><span class="o">.</span><span class="n">corr</span><span class="o">(</span><span class="n">df</span><span class="o">,</span> <span class="s">&quot;features&quot;</span><span class="o">,</span> <span class="s">&quot;spearman&quot;</span><span class="o">).</span><span class="n">head</span>
<span class="n">println</span><span class="o">(</span><span class="s">s&quot;Spearman correlation matrix:\n </span><span class="si">$coeff2</span><span class="s">&quot;</span><span class="o">)</span>
</pre></div>
    <div><small>Find full example code at "examples/src/main/scala/org/apache/spark/examples/ml/CorrelationExample.scala" in the Spark repo.</small></div>
  </div>

<div data-lang="java">
    <p><a href="api/java/org/apache/spark/ml/stat/Correlation.html"><code>Correlation</code></a>
computes the correlation matrix for the input Dataset of Vectors using the specified method.
The output will be a DataFrame that contains the correlation matrix of the column of vectors.</p>

    <div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.apache.spark.ml.linalg.Vectors</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.ml.linalg.VectorUDT</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.ml.stat.Correlation</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.sql.Dataset</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.sql.Row</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.sql.RowFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.sql.types.*</span><span class="o">;</span>

<span class="n">List</span><span class="o">&lt;</span><span class="n">Row</span><span class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
  <span class="n">RowFactory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">Vectors</span><span class="o">.</span><span class="na">sparse</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">3</span><span class="o">},</span> <span class="k">new</span> <span class="kt">double</span><span class="o">[]{</span><span class="mf">1.0</span><span class="o">,</span> <span class="o">-</span><span class="mf">2.0</span><span class="o">})),</span>
  <span class="n">RowFactory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">Vectors</span><span class="o">.</span><span class="na">dense</span><span class="o">(</span><span class="mf">4.0</span><span class="o">,</span> <span class="mf">5.0</span><span class="o">,</span> <span class="mf">0.0</span><span class="o">,</span> <span class="mf">3.0</span><span class="o">)),</span>
  <span class="n">RowFactory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">Vectors</span><span class="o">.</span><span class="na">dense</span><span class="o">(</span><span class="mf">6.0</span><span class="o">,</span> <span class="mf">7.0</span><span class="o">,</span> <span class="mf">0.0</span><span class="o">,</span> <span class="mf">8.0</span><span class="o">)),</span>
  <span class="n">RowFactory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">Vectors</span><span class="o">.</span><span class="na">sparse</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">3</span><span class="o">},</span> <span class="k">new</span> <span class="kt">double</span><span class="o">[]{</span><span class="mf">9.0</span><span class="o">,</span> <span class="mf">1.0</span><span class="o">}))</span>
<span class="o">);</span>

<span class="n">StructType</span> <span class="n">schema</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StructType</span><span class="o">(</span><span class="k">new</span> <span class="n">StructField</span><span class="o">[]{</span>
  <span class="k">new</span> <span class="n">StructField</span><span class="o">(</span><span class="s">&quot;features&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">VectorUDT</span><span class="o">(),</span> <span class="kc">false</span><span class="o">,</span> <span class="n">Metadata</span><span class="o">.</span><span class="na">empty</span><span class="o">()),</span>
<span class="o">});</span>

<span class="n">Dataset</span><span class="o">&lt;</span><span class="n">Row</span><span class="o">&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="n">spark</span><span class="o">.</span><span class="na">createDataFrame</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">schema</span><span class="o">);</span>
<span class="n">Row</span> <span class="n">r1</span> <span class="o">=</span> <span class="n">Correlation</span><span class="o">.</span><span class="na">corr</span><span class="o">(</span><span class="n">df</span><span class="o">,</span> <span class="s">&quot;features&quot;</span><span class="o">).</span><span class="na">head</span><span class="o">();</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Pearson correlation matrix:\n&quot;</span> <span class="o">+</span> <span class="n">r1</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>

<span class="n">Row</span> <span class="n">r2</span> <span class="o">=</span> <span class="n">Correlation</span><span class="o">.</span><span class="na">corr</span><span class="o">(</span><span class="n">df</span><span class="o">,</span> <span class="s">&quot;features&quot;</span><span class="o">,</span> <span class="s">&quot;spearman&quot;</span><span class="o">).</span><span class="na">head</span><span class="o">();</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Spearman correlation matrix:\n&quot;</span> <span class="o">+</span> <span class="n">r2</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
</pre></div>
    <div><small>Find full example code at "examples/src/main/java/org/apache/spark/examples/ml/JavaCorrelationExample.java" in the Spark repo.</small></div>
  </div>

<div data-lang="python">
    <p><a href="api/python/pyspark.ml.html#pyspark.ml.stat.Correlation$"><code>Correlation</code></a>
computes the correlation matrix for the input Dataset of Vectors using the specified method.
The output will be a DataFrame that contains the correlation matrix of the column of vectors.</p>

    <div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">pyspark.ml.linalg</span> <span class="kn">import</span> <span class="n">Vectors</span>
<span class="kn">from</span> <span class="nn">pyspark.ml.stat</span> <span class="kn">import</span> <span class="n">Correlation</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[(</span><span class="n">Vectors</span><span class="o">.</span><span class="n">sparse</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.0</span><span class="p">)]),),</span>
        <span class="p">(</span><span class="n">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="p">([</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">]),),</span>
        <span class="p">(</span><span class="n">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="p">([</span><span class="mf">6.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">8.0</span><span class="p">]),),</span>
        <span class="p">(</span><span class="n">Vectors</span><span class="o">.</span><span class="n">sparse</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">9.0</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)]),)]</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">createDataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;features&quot;</span><span class="p">])</span>

<span class="n">r1</span> <span class="o">=</span> <span class="n">Correlation</span><span class="o">.</span><span class="n">corr</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="s2">&quot;features&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&quot;Pearson correlation matrix:</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">r1</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>

<span class="n">r2</span> <span class="o">=</span> <span class="n">Correlation</span><span class="o">.</span><span class="n">corr</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="s2">&quot;features&quot;</span><span class="p">,</span> <span class="s2">&quot;spearman&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&quot;Spearman correlation matrix:</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">r2</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</pre></div>
    <div><small>Find full example code at "examples/src/main/python/ml/correlation_example.py" in the Spark repo.</small></div>
  </div>

</div>

<h2 id="hypothesis-testing">Hypothesis testing</h2>

<p>Hypothesis testing is a powerful tool in statistics to determine whether a result is statistically
significant, whether this result occurred by chance or not. <code>spark.ml</code> currently supports Pearson&#8217;s
Chi-squared ( $\chi^2$) tests for independence.</p>

<p><code>ChiSquareTest</code> conducts Pearson&#8217;s independence test for every feature against the label.
For each feature, the (feature, label) pairs are converted into a contingency matrix for which
the Chi-squared statistic is computed. All label and feature values must be categorical.</p>

<div class="codetabs">
<div data-lang="scala">
    <p>Refer to the <a href="api/scala/index.html#org.apache.spark.ml.stat.ChiSquareTest$"><code>ChiSquareTest</code> Scala docs</a> for details on the API.</p>

    <div class="highlight"><pre><span></span><span class="k">import</span> <span class="nn">org.apache.spark.ml.linalg.</span><span class="o">{</span><span class="nc">Vector</span><span class="o">,</span> <span class="nc">Vectors</span><span class="o">}</span>
<span class="k">import</span> <span class="nn">org.apache.spark.ml.stat.ChiSquareTest</span>

<span class="k">val</span> <span class="n">data</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
  <span class="o">(</span><span class="mf">0.0</span><span class="o">,</span> <span class="nc">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="o">(</span><span class="mf">0.5</span><span class="o">,</span> <span class="mf">10.0</span><span class="o">)),</span>
  <span class="o">(</span><span class="mf">0.0</span><span class="o">,</span> <span class="nc">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="o">(</span><span class="mf">1.5</span><span class="o">,</span> <span class="mf">20.0</span><span class="o">)),</span>
  <span class="o">(</span><span class="mf">1.0</span><span class="o">,</span> <span class="nc">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="o">(</span><span class="mf">1.5</span><span class="o">,</span> <span class="mf">30.0</span><span class="o">)),</span>
  <span class="o">(</span><span class="mf">0.0</span><span class="o">,</span> <span class="nc">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="o">(</span><span class="mf">3.5</span><span class="o">,</span> <span class="mf">30.0</span><span class="o">)),</span>
  <span class="o">(</span><span class="mf">0.0</span><span class="o">,</span> <span class="nc">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="o">(</span><span class="mf">3.5</span><span class="o">,</span> <span class="mf">40.0</span><span class="o">)),</span>
  <span class="o">(</span><span class="mf">1.0</span><span class="o">,</span> <span class="nc">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="o">(</span><span class="mf">3.5</span><span class="o">,</span> <span class="mf">40.0</span><span class="o">))</span>
<span class="o">)</span>

<span class="k">val</span> <span class="n">df</span> <span class="k">=</span> <span class="n">data</span><span class="o">.</span><span class="n">toDF</span><span class="o">(</span><span class="s">&quot;label&quot;</span><span class="o">,</span> <span class="s">&quot;features&quot;</span><span class="o">)</span>
<span class="k">val</span> <span class="n">chi</span> <span class="k">=</span> <span class="nc">ChiSquareTest</span><span class="o">.</span><span class="n">test</span><span class="o">(</span><span class="n">df</span><span class="o">,</span> <span class="s">&quot;features&quot;</span><span class="o">,</span> <span class="s">&quot;label&quot;</span><span class="o">).</span><span class="n">head</span>
<span class="n">println</span><span class="o">(</span><span class="s">s&quot;pValues = </span><span class="si">${</span><span class="n">chi</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">Vector</span><span class="o">](</span><span class="mi">0</span><span class="o">)</span><span class="si">}</span><span class="s">&quot;</span><span class="o">)</span>
<span class="n">println</span><span class="o">(</span><span class="s">s&quot;degreesOfFreedom </span><span class="si">${</span><span class="n">chi</span><span class="o">.</span><span class="n">getSeq</span><span class="o">[</span><span class="kt">Int</span><span class="o">](</span><span class="mi">1</span><span class="o">).</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;[&quot;</span><span class="o">,</span> <span class="s">&quot;,&quot;</span><span class="o">,</span> <span class="s">&quot;]&quot;</span><span class="o">)</span><span class="si">}</span><span class="s">&quot;</span><span class="o">)</span>
<span class="n">println</span><span class="o">(</span><span class="s">s&quot;statistics </span><span class="si">${</span><span class="n">chi</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">Vector</span><span class="o">](</span><span class="mi">2</span><span class="o">)</span><span class="si">}</span><span class="s">&quot;</span><span class="o">)</span>
</pre></div>
    <div><small>Find full example code at "examples/src/main/scala/org/apache/spark/examples/ml/ChiSquareTestExample.scala" in the Spark repo.</small></div>
  </div>

<div data-lang="java">
    <p>Refer to the <a href="api/java/org/apache/spark/ml/stat/ChiSquareTest.html"><code>ChiSquareTest</code> Java docs</a> for details on the API.</p>

    <div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.apache.spark.ml.linalg.Vectors</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.ml.linalg.VectorUDT</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.ml.stat.ChiSquareTest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.sql.Dataset</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.sql.Row</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.sql.RowFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.sql.types.*</span><span class="o">;</span>

<span class="n">List</span><span class="o">&lt;</span><span class="n">Row</span><span class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
  <span class="n">RowFactory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="mf">0.0</span><span class="o">,</span> <span class="n">Vectors</span><span class="o">.</span><span class="na">dense</span><span class="o">(</span><span class="mf">0.5</span><span class="o">,</span> <span class="mf">10.0</span><span class="o">)),</span>
  <span class="n">RowFactory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="mf">0.0</span><span class="o">,</span> <span class="n">Vectors</span><span class="o">.</span><span class="na">dense</span><span class="o">(</span><span class="mf">1.5</span><span class="o">,</span> <span class="mf">20.0</span><span class="o">)),</span>
  <span class="n">RowFactory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="mf">1.0</span><span class="o">,</span> <span class="n">Vectors</span><span class="o">.</span><span class="na">dense</span><span class="o">(</span><span class="mf">1.5</span><span class="o">,</span> <span class="mf">30.0</span><span class="o">)),</span>
  <span class="n">RowFactory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="mf">0.0</span><span class="o">,</span> <span class="n">Vectors</span><span class="o">.</span><span class="na">dense</span><span class="o">(</span><span class="mf">3.5</span><span class="o">,</span> <span class="mf">30.0</span><span class="o">)),</span>
  <span class="n">RowFactory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="mf">0.0</span><span class="o">,</span> <span class="n">Vectors</span><span class="o">.</span><span class="na">dense</span><span class="o">(</span><span class="mf">3.5</span><span class="o">,</span> <span class="mf">40.0</span><span class="o">)),</span>
  <span class="n">RowFactory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="mf">1.0</span><span class="o">,</span> <span class="n">Vectors</span><span class="o">.</span><span class="na">dense</span><span class="o">(</span><span class="mf">3.5</span><span class="o">,</span> <span class="mf">40.0</span><span class="o">))</span>
<span class="o">);</span>

<span class="n">StructType</span> <span class="n">schema</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StructType</span><span class="o">(</span><span class="k">new</span> <span class="n">StructField</span><span class="o">[]{</span>
  <span class="k">new</span> <span class="n">StructField</span><span class="o">(</span><span class="s">&quot;label&quot;</span><span class="o">,</span> <span class="n">DataTypes</span><span class="o">.</span><span class="na">DoubleType</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">Metadata</span><span class="o">.</span><span class="na">empty</span><span class="o">()),</span>
  <span class="k">new</span> <span class="n">StructField</span><span class="o">(</span><span class="s">&quot;features&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">VectorUDT</span><span class="o">(),</span> <span class="kc">false</span><span class="o">,</span> <span class="n">Metadata</span><span class="o">.</span><span class="na">empty</span><span class="o">()),</span>
<span class="o">});</span>

<span class="n">Dataset</span><span class="o">&lt;</span><span class="n">Row</span><span class="o">&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="n">spark</span><span class="o">.</span><span class="na">createDataFrame</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">schema</span><span class="o">);</span>
<span class="n">Row</span> <span class="n">r</span> <span class="o">=</span> <span class="n">ChiSquareTest</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">df</span><span class="o">,</span> <span class="s">&quot;features&quot;</span><span class="o">,</span> <span class="s">&quot;label&quot;</span><span class="o">).</span><span class="na">head</span><span class="o">();</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;pValues: &quot;</span> <span class="o">+</span> <span class="n">r</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;degreesOfFreedom: &quot;</span> <span class="o">+</span> <span class="n">r</span><span class="o">.</span><span class="na">getList</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;statistics: &quot;</span> <span class="o">+</span> <span class="n">r</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
</pre></div>
    <div><small>Find full example code at "examples/src/main/java/org/apache/spark/examples/ml/JavaChiSquareTestExample.java" in the Spark repo.</small></div>
  </div>

<div data-lang="python">
    <p>Refer to the <a href="api/python/index.html#pyspark.ml.stat.ChiSquareTest$"><code>ChiSquareTest</code> Python docs</a> for details on the API.</p>

    <div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">pyspark.ml.linalg</span> <span class="kn">import</span> <span class="n">Vectors</span>
<span class="kn">from</span> <span class="nn">pyspark.ml.stat</span> <span class="kn">import</span> <span class="n">ChiSquareTest</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">)),</span>
        <span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="p">(</span><span class="mf">1.5</span><span class="p">,</span> <span class="mf">20.0</span><span class="p">)),</span>
        <span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="p">(</span><span class="mf">1.5</span><span class="p">,</span> <span class="mf">30.0</span><span class="p">)),</span>
        <span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="p">(</span><span class="mf">3.5</span><span class="p">,</span> <span class="mf">30.0</span><span class="p">)),</span>
        <span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="p">(</span><span class="mf">3.5</span><span class="p">,</span> <span class="mf">40.0</span><span class="p">)),</span>
        <span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="p">(</span><span class="mf">3.5</span><span class="p">,</span> <span class="mf">40.0</span><span class="p">))]</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">createDataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;label&quot;</span><span class="p">,</span> <span class="s2">&quot;features&quot;</span><span class="p">])</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">ChiSquareTest</span><span class="o">.</span><span class="n">test</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="s2">&quot;features&quot;</span><span class="p">,</span> <span class="s2">&quot;label&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&quot;pValues: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">pValues</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&quot;degreesOfFreedom: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">degreesOfFreedom</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&quot;statistics: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">statistics</span><span class="p">))</span>
</pre></div>
    <div><small>Find full example code at "examples/src/main/python/ml/chi_square_test_example.py" in the Spark repo.</small></div>
  </div>

</div>

<h2 id="summarizer">Summarizer</h2>

<p>We provide vector column summary statistics for <code>Dataframe</code> through <code>Summarizer</code>.
Available metrics are the column-wise max, min, mean, variance, and number of nonzeros, as well as the total count.</p>

<div class="codetabs">
<div data-lang="scala">
    <p>The following example demonstrates using <a href="api/scala/index.html#org.apache.spark.ml.stat.Summarizer$"><code>Summarizer</code></a>
to compute the mean and variance for a vector column of the input dataframe, with and without a weight column.</p>

    <div class="highlight"><pre><span></span><span class="k">import</span> <span class="nn">org.apache.spark.ml.linalg.</span><span class="o">{</span><span class="nc">Vector</span><span class="o">,</span> <span class="nc">Vectors</span><span class="o">}</span>
<span class="k">import</span> <span class="nn">org.apache.spark.ml.stat.Summarizer</span>

<span class="k">val</span> <span class="n">data</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
  <span class="o">(</span><span class="nc">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="o">(</span><span class="mf">2.0</span><span class="o">,</span> <span class="mf">3.0</span><span class="o">,</span> <span class="mf">5.0</span><span class="o">),</span> <span class="mf">1.0</span><span class="o">),</span>
  <span class="o">(</span><span class="nc">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="o">(</span><span class="mf">4.0</span><span class="o">,</span> <span class="mf">6.0</span><span class="o">,</span> <span class="mf">7.0</span><span class="o">),</span> <span class="mf">2.0</span><span class="o">)</span>
<span class="o">)</span>

<span class="k">val</span> <span class="n">df</span> <span class="k">=</span> <span class="n">data</span><span class="o">.</span><span class="n">toDF</span><span class="o">(</span><span class="s">&quot;features&quot;</span><span class="o">,</span> <span class="s">&quot;weight&quot;</span><span class="o">)</span>

<span class="k">val</span> <span class="o">(</span><span class="n">meanVal</span><span class="o">,</span> <span class="n">varianceVal</span><span class="o">)</span> <span class="k">=</span> <span class="n">df</span><span class="o">.</span><span class="n">select</span><span class="o">(</span><span class="n">metrics</span><span class="o">(</span><span class="s">&quot;mean&quot;</span><span class="o">,</span> <span class="s">&quot;variance&quot;</span><span class="o">)</span>
  <span class="o">.</span><span class="n">summary</span><span class="o">(</span><span class="n">$</span><span class="s">&quot;features&quot;</span><span class="o">,</span> <span class="n">$</span><span class="s">&quot;weight&quot;</span><span class="o">).</span><span class="n">as</span><span class="o">(</span><span class="s">&quot;summary&quot;</span><span class="o">))</span>
  <span class="o">.</span><span class="n">select</span><span class="o">(</span><span class="s">&quot;summary.mean&quot;</span><span class="o">,</span> <span class="s">&quot;summary.variance&quot;</span><span class="o">)</span>
  <span class="o">.</span><span class="n">as</span><span class="o">[(</span><span class="kt">Vector</span>, <span class="kt">Vector</span><span class="o">)].</span><span class="n">first</span><span class="o">()</span>

<span class="n">println</span><span class="o">(</span><span class="s">s&quot;with weight: mean = </span><span class="si">${</span><span class="n">meanVal</span><span class="si">}</span><span class="s">, variance = </span><span class="si">${</span><span class="n">varianceVal</span><span class="si">}</span><span class="s">&quot;</span><span class="o">)</span>

<span class="k">val</span> <span class="o">(</span><span class="n">meanVal2</span><span class="o">,</span> <span class="n">varianceVal2</span><span class="o">)</span> <span class="k">=</span> <span class="n">df</span><span class="o">.</span><span class="n">select</span><span class="o">(</span><span class="n">mean</span><span class="o">(</span><span class="n">$</span><span class="s">&quot;features&quot;</span><span class="o">),</span> <span class="n">variance</span><span class="o">(</span><span class="n">$</span><span class="s">&quot;features&quot;</span><span class="o">))</span>
  <span class="o">.</span><span class="n">as</span><span class="o">[(</span><span class="kt">Vector</span>, <span class="kt">Vector</span><span class="o">)].</span><span class="n">first</span><span class="o">()</span>

<span class="n">println</span><span class="o">(</span><span class="s">s&quot;without weight: mean = </span><span class="si">${</span><span class="n">meanVal2</span><span class="si">}</span><span class="s">, sum = </span><span class="si">${</span><span class="n">varianceVal2</span><span class="si">}</span><span class="s">&quot;</span><span class="o">)</span>
</pre></div>
    <div><small>Find full example code at "examples/src/main/scala/org/apache/spark/examples/ml/SummarizerExample.scala" in the Spark repo.</small></div>
  </div>

<div data-lang="java">
    <p>The following example demonstrates using <a href="api/java/org/apache/spark/ml/stat/Summarizer.html"><code>Summarizer</code></a>
to compute the mean and variance for a vector column of the input dataframe, with and without a weight column.</p>

    <div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.apache.spark.ml.linalg.Vector</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.ml.linalg.Vectors</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.ml.linalg.VectorUDT</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.ml.stat.Summarizer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.sql.types.DataTypes</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.sql.types.Metadata</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.sql.types.StructField</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.spark.sql.types.StructType</span><span class="o">;</span>

<span class="n">List</span><span class="o">&lt;</span><span class="n">Row</span><span class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
  <span class="n">RowFactory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">Vectors</span><span class="o">.</span><span class="na">dense</span><span class="o">(</span><span class="mf">2.0</span><span class="o">,</span> <span class="mf">3.0</span><span class="o">,</span> <span class="mf">5.0</span><span class="o">),</span> <span class="mf">1.0</span><span class="o">),</span>
  <span class="n">RowFactory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">Vectors</span><span class="o">.</span><span class="na">dense</span><span class="o">(</span><span class="mf">4.0</span><span class="o">,</span> <span class="mf">6.0</span><span class="o">,</span> <span class="mf">7.0</span><span class="o">),</span> <span class="mf">2.0</span><span class="o">)</span>
<span class="o">);</span>

<span class="n">StructType</span> <span class="n">schema</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StructType</span><span class="o">(</span><span class="k">new</span> <span class="n">StructField</span><span class="o">[]{</span>
  <span class="k">new</span> <span class="n">StructField</span><span class="o">(</span><span class="s">&quot;features&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">VectorUDT</span><span class="o">(),</span> <span class="kc">false</span><span class="o">,</span> <span class="n">Metadata</span><span class="o">.</span><span class="na">empty</span><span class="o">()),</span>
  <span class="k">new</span> <span class="n">StructField</span><span class="o">(</span><span class="s">&quot;weight&quot;</span><span class="o">,</span> <span class="n">DataTypes</span><span class="o">.</span><span class="na">DoubleType</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">Metadata</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span>
<span class="o">});</span>

<span class="n">Dataset</span><span class="o">&lt;</span><span class="n">Row</span><span class="o">&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="n">spark</span><span class="o">.</span><span class="na">createDataFrame</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">schema</span><span class="o">);</span>

<span class="n">Row</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">Summarizer</span><span class="o">.</span><span class="na">metrics</span><span class="o">(</span><span class="s">&quot;mean&quot;</span><span class="o">,</span> <span class="s">&quot;variance&quot;</span><span class="o">)</span>
  <span class="o">.</span><span class="na">summary</span><span class="o">(</span><span class="k">new</span> <span class="n">Column</span><span class="o">(</span><span class="s">&quot;features&quot;</span><span class="o">),</span> <span class="k">new</span> <span class="n">Column</span><span class="o">(</span><span class="s">&quot;weight&quot;</span><span class="o">)).</span><span class="na">as</span><span class="o">(</span><span class="s">&quot;summary&quot;</span><span class="o">))</span>
  <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="s">&quot;summary.mean&quot;</span><span class="o">,</span> <span class="s">&quot;summary.variance&quot;</span><span class="o">).</span><span class="na">first</span><span class="o">();</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;with weight: mean = &quot;</span> <span class="o">+</span> <span class="n">result1</span><span class="o">.&lt;</span><span class="n">Vector</span><span class="o">&gt;</span><span class="n">getAs</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span>
  <span class="s">&quot;, variance = &quot;</span> <span class="o">+</span> <span class="n">result1</span><span class="o">.&lt;</span><span class="n">Vector</span><span class="o">&gt;</span><span class="n">getAs</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>

<span class="n">Row</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="na">select</span><span class="o">(</span>
  <span class="n">Summarizer</span><span class="o">.</span><span class="na">mean</span><span class="o">(</span><span class="k">new</span> <span class="n">Column</span><span class="o">(</span><span class="s">&quot;features&quot;</span><span class="o">)),</span>
  <span class="n">Summarizer</span><span class="o">.</span><span class="na">variance</span><span class="o">(</span><span class="k">new</span> <span class="n">Column</span><span class="o">(</span><span class="s">&quot;features&quot;</span><span class="o">))</span>
<span class="o">).</span><span class="na">first</span><span class="o">();</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;without weight: mean = &quot;</span> <span class="o">+</span> <span class="n">result2</span><span class="o">.&lt;</span><span class="n">Vector</span><span class="o">&gt;</span><span class="n">getAs</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span>
  <span class="s">&quot;, variance = &quot;</span> <span class="o">+</span> <span class="n">result2</span><span class="o">.&lt;</span><span class="n">Vector</span><span class="o">&gt;</span><span class="n">getAs</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
</pre></div>
    <div><small>Find full example code at "examples/src/main/java/org/apache/spark/examples/ml/JavaSummarizerExample.java" in the Spark repo.</small></div>
  </div>

<div data-lang="python">
    <p>Refer to the <a href="api/python/index.html#pyspark.ml.stat.Summarizer$"><code>Summarizer</code> Python docs</a> for details on the API.</p>

    <div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">pyspark.ml.stat</span> <span class="kn">import</span> <span class="n">Summarizer</span>
<span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">Row</span>
<span class="kn">from</span> <span class="nn">pyspark.ml.linalg</span> <span class="kn">import</span> <span class="n">Vectors</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">parallelize</span><span class="p">([</span><span class="n">Row</span><span class="p">(</span><span class="n">weight</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">features</span><span class="o">=</span><span class="n">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)),</span>
                     <span class="n">Row</span><span class="p">(</span><span class="n">weight</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">features</span><span class="o">=</span><span class="n">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">))])</span><span class="o">.</span><span class="n">toDF</span><span class="p">()</span>

<span class="c1"># create summarizer for multiple metrics &quot;mean&quot; and &quot;count&quot;</span>
<span class="n">summarizer</span> <span class="o">=</span> <span class="n">Summarizer</span><span class="o">.</span><span class="n">metrics</span><span class="p">(</span><span class="s2">&quot;mean&quot;</span><span class="p">,</span> <span class="s2">&quot;count&quot;</span><span class="p">)</span>

<span class="c1"># compute statistics for multiple metrics with weight</span>
<span class="n">df</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="n">summarizer</span><span class="o">.</span><span class="n">summary</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">features</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">weight</span><span class="p">))</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">truncate</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># compute statistics for multiple metrics without weight</span>
<span class="n">df</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="n">summarizer</span><span class="o">.</span><span class="n">summary</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">features</span><span class="p">))</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">truncate</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># compute statistics for single metric &quot;mean&quot; with weight</span>
<span class="n">df</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="n">Summarizer</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">features</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">weight</span><span class="p">))</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">truncate</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># compute statistics for single metric &quot;mean&quot; without weight</span>
<span class="n">df</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="n">Summarizer</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">features</span><span class="p">))</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">truncate</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</pre></div>
    <div><small>Find full example code at "examples/src/main/python/ml/summarizer_example.py" in the Spark repo.</small></div>
  </div>

</div>
:ET