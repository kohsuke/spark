I"WV<ul id="markdown-toc">
  <li><a href="#building-apache-spark" id="markdown-toc-building-apache-spark">Building Apache Spark</a>    <ul>
      <li><a href="#apache-maven" id="markdown-toc-apache-maven">Apache Maven</a>        <ul>
          <li><a href="#setting-up-mavens-memory-usage" id="markdown-toc-setting-up-mavens-memory-usage">Setting up Maven’s Memory Usage</a></li>
          <li><a href="#buildmvn" id="markdown-toc-buildmvn">build/mvn</a></li>
        </ul>
      </li>
      <li><a href="#building-a-runnable-distribution" id="markdown-toc-building-a-runnable-distribution">Building a Runnable Distribution</a></li>
      <li><a href="#specifying-the-hadoop-version-and-enabling-yarn" id="markdown-toc-specifying-the-hadoop-version-and-enabling-yarn">Specifying the Hadoop Version and Enabling YARN</a></li>
      <li><a href="#building-with-hive-and-jdbc-support" id="markdown-toc-building-with-hive-and-jdbc-support">Building With Hive and JDBC Support</a></li>
      <li><a href="#packaging-without-hadoop-dependencies-for-yarn" id="markdown-toc-packaging-without-hadoop-dependencies-for-yarn">Packaging without Hadoop Dependencies for YARN</a></li>
      <li><a href="#building-with-mesos-support" id="markdown-toc-building-with-mesos-support">Building with Mesos support</a></li>
      <li><a href="#building-with-kubernetes-support" id="markdown-toc-building-with-kubernetes-support">Building with Kubernetes support</a></li>
      <li><a href="#building-submodules-individually" id="markdown-toc-building-submodules-individually">Building submodules individually</a></li>
      <li><a href="#continuous-compilation" id="markdown-toc-continuous-compilation">Continuous Compilation</a></li>
      <li><a href="#building-with-sbt" id="markdown-toc-building-with-sbt">Building with SBT</a>        <ul>
          <li><a href="#setting-up-sbts-memory-usage" id="markdown-toc-setting-up-sbts-memory-usage">Setting up SBT’s Memory Usage</a></li>
        </ul>
      </li>
      <li><a href="#speeding-up-compilation" id="markdown-toc-speeding-up-compilation">Speeding up Compilation</a></li>
      <li><a href="#encrypted-filesystems" id="markdown-toc-encrypted-filesystems">Encrypted Filesystems</a></li>
      <li><a href="#intellij-idea-or-eclipse" id="markdown-toc-intellij-idea-or-eclipse">IntelliJ IDEA or Eclipse</a></li>
    </ul>
  </li>
  <li><a href="#running-tests" id="markdown-toc-running-tests">Running Tests</a>    <ul>
      <li><a href="#testing-with-sbt" id="markdown-toc-testing-with-sbt">Testing with SBT</a></li>
      <li><a href="#running-individual-tests" id="markdown-toc-running-individual-tests">Running Individual Tests</a></li>
      <li><a href="#pyspark-pip-installable" id="markdown-toc-pyspark-pip-installable">PySpark pip installable</a></li>
      <li><a href="#pyspark-tests-with-maven-or-sbt" id="markdown-toc-pyspark-tests-with-maven-or-sbt">PySpark Tests with Maven or SBT</a></li>
      <li><a href="#running-r-tests" id="markdown-toc-running-r-tests">Running R Tests</a></li>
      <li><a href="#running-docker-based-integration-test-suites" id="markdown-toc-running-docker-based-integration-test-suites">Running Docker-based Integration Test Suites</a></li>
      <li><a href="#change-scala-version" id="markdown-toc-change-scala-version">Change Scala Version</a></li>
      <li><a href="#running-jenkins-tests-with-github-enterprise" id="markdown-toc-running-jenkins-tests-with-github-enterprise">Running Jenkins tests with Github Enterprise</a>        <ul>
          <li><a href="#related-environment-variables" id="markdown-toc-related-environment-variables">Related environment variables</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="building-apache-spark">Building Apache Spark</h1>

<h2 id="apache-maven">Apache Maven</h2>

<p>The Maven-based build is the build of reference for Apache Spark.
Building Spark using Maven requires Maven 3.6.1 and Java 8.
Spark requires Scala 2.12; support for Scala 2.11 was removed in Spark 3.0.0.</p>

<h3 id="setting-up-mavens-memory-usage">Setting up Maven’s Memory Usage</h3>

<p>You’ll need to configure Maven to use more memory than usual by setting <code class="highlighter-rouge">MAVEN_OPTS</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export MAVEN_OPTS="-Xmx2g -XX:ReservedCodeCacheSize=512m"
</code></pre></div></div>

<p>(The <code class="highlighter-rouge">ReservedCodeCacheSize</code> setting is optional but recommended.)
If you don’t add these parameters to <code class="highlighter-rouge">MAVEN_OPTS</code>, you may see errors and warnings like the following:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[INFO] Compiling 203 Scala sources and 9 Java sources to /Users/me/Development/spark/core/target/scala-/classes...
[ERROR] Java heap space -&gt; [Help 1]
</code></pre></div></div>

<p>You can fix these problems by setting the <code class="highlighter-rouge">MAVEN_OPTS</code> variable as discussed before.</p>

<p><strong>Note:</strong></p>

<ul>
  <li>If using <code class="highlighter-rouge">build/mvn</code> with no <code class="highlighter-rouge">MAVEN_OPTS</code> set, the script will automatically add the above options to the <code class="highlighter-rouge">MAVEN_OPTS</code> environment variable.</li>
  <li>The <code class="highlighter-rouge">test</code> phase of the Spark build will automatically add these options to <code class="highlighter-rouge">MAVEN_OPTS</code>, even when not using <code class="highlighter-rouge">build/mvn</code>.</li>
</ul>

<h3 id="buildmvn">build/mvn</h3>

<p>Spark now comes packaged with a self-contained Maven installation to ease building and deployment of Spark from source located under the <code class="highlighter-rouge">build/</code> directory. This script will automatically download and setup all necessary build requirements (<a href="https://maven.apache.org/">Maven</a>, <a href="https://www.scala-lang.org/">Scala</a>, and <a href="https://github.com/typesafehub/zinc">Zinc</a>) locally within the <code class="highlighter-rouge">build/</code> directory itself. It honors any <code class="highlighter-rouge">mvn</code> binary if present already, however, will pull down its own copy of Scala and Zinc regardless to ensure proper version requirements are met. <code class="highlighter-rouge">build/mvn</code> execution acts as a pass through to the <code class="highlighter-rouge">mvn</code> call allowing easy transition from previous build methods. As an example, one can build a version of Spark as follows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build/mvn -DskipTests clean package
</code></pre></div></div>

<p>Other build examples can be found below.</p>

<h2 id="building-a-runnable-distribution">Building a Runnable Distribution</h2>

<p>To create a Spark distribution like those distributed by the
<a href="https://spark.apache.org/downloads.html">Spark Downloads</a> page, and that is laid out so as
to be runnable, use <code class="highlighter-rouge">./dev/make-distribution.sh</code> in the project root directory. It can be configured
with Maven profile settings and so on like the direct Maven build. Example:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./dev/make-distribution.sh --name custom-spark --pip --r --tgz -Psparkr -Phive -Phive-thriftserver -Pmesos -Pyarn -Pkubernetes
</code></pre></div></div>

<p>This will build Spark distribution along with Python pip and R packages. For more information on usage, run <code class="highlighter-rouge">./dev/make-distribution.sh --help</code></p>

<h2 id="specifying-the-hadoop-version-and-enabling-yarn">Specifying the Hadoop Version and Enabling YARN</h2>

<p>You can specify the exact version of Hadoop to compile against through the <code class="highlighter-rouge">hadoop.version</code> property.</p>

<p>You can enable the <code class="highlighter-rouge">yarn</code> profile and optionally set the <code class="highlighter-rouge">yarn.version</code> property if it is different 
from <code class="highlighter-rouge">hadoop.version</code>.</p>

<p>Example:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build/mvn -Pyarn -Dhadoop.version=2.8.5 -DskipTests clean package
</code></pre></div></div>

<h2 id="building-with-hive-and-jdbc-support">Building With Hive and JDBC Support</h2>

<p>To enable Hive integration for Spark SQL along with its JDBC server and CLI,
add the <code class="highlighter-rouge">-Phive</code> and <code class="highlighter-rouge">Phive-thriftserver</code> profiles to your existing build options.
By default, Spark will use Hive 1.2.1 with the <code class="highlighter-rouge">hadoop-2.7</code> profile, and Hive 2.3.6 with the <code class="highlighter-rouge">hadoop-3.2</code> profile.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># With Hive 1.2.1 support
./build/mvn -Pyarn -Phive -Phive-thriftserver -DskipTests clean package

# With Hive 2.3.6 support
./build/mvn -Pyarn -Phive -Phive-thriftserver -Phadoop-3.2 -DskipTests clean package
</code></pre></div></div>

<h2 id="packaging-without-hadoop-dependencies-for-yarn">Packaging without Hadoop Dependencies for YARN</h2>

<p>The assembly directory produced by <code class="highlighter-rouge">mvn package</code> will, by default, include all of Spark’s
dependencies, including Hadoop and some of its ecosystem projects. On YARN deployments, this
causes multiple versions of these to appear on executor classpaths: the version packaged in
the Spark assembly and the version on each node, included with <code class="highlighter-rouge">yarn.application.classpath</code>.
The <code class="highlighter-rouge">hadoop-provided</code> profile builds the assembly without including Hadoop-ecosystem projects,
like ZooKeeper and Hadoop itself.</p>

<h2 id="building-with-mesos-support">Building with Mesos support</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build/mvn -Pmesos -DskipTests clean package
</code></pre></div></div>

<h2 id="building-with-kubernetes-support">Building with Kubernetes support</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build/mvn -Pkubernetes -DskipTests clean package
</code></pre></div></div>

<h2 id="building-submodules-individually">Building submodules individually</h2>

<p>It’s possible to build Spark submodules using the <code class="highlighter-rouge">mvn -pl</code> option.</p>

<p>For instance, you can build the Spark Streaming module using:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build/mvn -pl :spark-streaming_ clean install
</code></pre></div></div>

<p>where <code class="highlighter-rouge">spark-streaming_</code> is the <code class="highlighter-rouge">artifactId</code> as defined in <code class="highlighter-rouge">streaming/pom.xml</code> file.</p>

<h2 id="continuous-compilation">Continuous Compilation</h2>

<p>We use the scala-maven-plugin which supports incremental and continuous compilation. E.g.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build/mvn scala:cc
</code></pre></div></div>

<p>should run continuous compilation (i.e. wait for changes). However, this has not been tested
extensively. A couple of gotchas to note:</p>

<ul>
  <li>
    <p>it only scans the paths <code class="highlighter-rouge">src/main</code> and <code class="highlighter-rouge">src/test</code> (see
<a href="https://davidb.github.io/scala-maven-plugin/example_cc.html">docs</a>), so it will only work
from within certain submodules that have that structure.</p>
  </li>
  <li>
    <p>you’ll typically need to run <code class="highlighter-rouge">mvn install</code> from the project root for compilation within
specific submodules to work; this is because submodules that depend on other submodules do so via
the <code class="highlighter-rouge">spark-parent</code> module).</p>
  </li>
</ul>

<p>Thus, the full flow for running continuous-compilation of the <code class="highlighter-rouge">core</code> submodule may look more like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./build/mvn install
$ cd core
$ ../build/mvn scala:cc
</code></pre></div></div>

<h2 id="building-with-sbt">Building with SBT</h2>

<p>Maven is the official build tool recommended for packaging Spark, and is the <em>build of reference</em>.
But SBT is supported for day-to-day development since it can provide much faster iterative
compilation. More advanced developers may wish to use SBT.</p>

<p>The SBT build is derived from the Maven POM files, and so the same Maven profiles and variables
can be set to control the SBT build. For example:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build/sbt package
</code></pre></div></div>

<p>To avoid the overhead of launching sbt each time you need to re-compile, you can launch sbt
in interactive mode by running <code class="highlighter-rouge">build/sbt</code>, and then run all build commands at the command
prompt.</p>

<h3 id="setting-up-sbts-memory-usage">Setting up SBT’s Memory Usage</h3>
<p>Configure the JVM options for SBT in <code class="highlighter-rouge">.jvmopts</code> at the project root, for example:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-Xmx2g
-XX:ReservedCodeCacheSize=512m
</code></pre></div></div>

<p>For the meanings of these two options, please carefully read the <a href="https://spark.apache.org/docs/latest/building-spark.html#setting-up-mavens-memory-usage">Setting up Maven’s Memory Usage section</a>.</p>

<h2 id="speeding-up-compilation">Speeding up Compilation</h2>

<p>Developers who compile Spark frequently may want to speed up compilation; e.g., by using Zinc
(for developers who build with Maven) or by avoiding re-compilation of the assembly JAR (for
developers who build with SBT).  For more information about how to do this, refer to the
<a href="https://spark.apache.org/developer-tools.html#reducing-build-times">Useful Developer Tools page</a>.</p>

<h2 id="encrypted-filesystems">Encrypted Filesystems</h2>

<p>When building on an encrypted filesystem (if your home directory is encrypted, for example), then the Spark build might fail with a “Filename too long” error. As a workaround, add the following in the configuration args of the <code class="highlighter-rouge">scala-maven-plugin</code> in the project <code class="highlighter-rouge">pom.xml</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;arg&gt;-Xmax-classfile-name&lt;/arg&gt;
&lt;arg&gt;128&lt;/arg&gt;
</code></pre></div></div>

<p>and in <code class="highlighter-rouge">project/SparkBuild.scala</code> add:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scalacOptions in Compile ++= Seq("-Xmax-classfile-name", "128"),
</code></pre></div></div>

<p>to the <code class="highlighter-rouge">sharedSettings</code> val. See also <a href="https://github.com/apache/spark/pull/2883/files">this PR</a> if you are unsure of where to add these lines.</p>

<h2 id="intellij-idea-or-eclipse">IntelliJ IDEA or Eclipse</h2>

<p>For help in setting up IntelliJ IDEA or Eclipse for Spark development, and troubleshooting, refer to the
<a href="https://spark.apache.org/developer-tools.html">Useful Developer Tools page</a>.</p>

<h1 id="running-tests">Running Tests</h1>

<p>Tests are run by default via the <a href="http://www.scalatest.org/user_guide/using_the_scalatest_maven_plugin">ScalaTest Maven plugin</a>.
Note that tests should not be run as root or an admin user.</p>

<p>The following is an example of a command to run the tests:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build/mvn test
</code></pre></div></div>

<h2 id="testing-with-sbt">Testing with SBT</h2>

<p>The following is an example of a command to run the tests:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build/sbt test
</code></pre></div></div>

<h2 id="running-individual-tests">Running Individual Tests</h2>

<p>For information about how to run individual tests, refer to the
<a href="https://spark.apache.org/developer-tools.html#running-individual-tests">Useful Developer Tools page</a>.</p>

<h2 id="pyspark-pip-installable">PySpark pip installable</h2>

<p>If you are building Spark for use in a Python environment and you wish to pip install it, you will first need to build the Spark JARs as described above. Then you can construct an sdist package suitable for setup.py and pip installable package.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd python; python setup.py sdist
</code></pre></div></div>

<p><strong>Note:</strong> Due to packaging requirements you can not directly pip install from the Python directory, rather you must first build the sdist package as described above.</p>

<p>Alternatively, you can also run make-distribution with the –pip option.</p>

<h2 id="pyspark-tests-with-maven-or-sbt">PySpark Tests with Maven or SBT</h2>

<p>If you are building PySpark and wish to run the PySpark tests you will need to build Spark with Hive support.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build/mvn -DskipTests clean package -Phive
./python/run-tests
</code></pre></div></div>

<p>If you are building PySpark with SBT and wish to run the PySpark tests, you will need to build Spark with Hive support and also build the test components:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build/sbt -Phive clean package
./build/sbt test:compile
./python/run-tests
</code></pre></div></div>

<p>The run-tests script also can be limited to a specific Python version or a specific module</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./python/run-tests --python-executables=python --modules=pyspark-sql
</code></pre></div></div>

<h2 id="running-r-tests">Running R Tests</h2>

<p>To run the SparkR tests you will need to install the <a href="https://cran.r-project.org/package=knitr">knitr</a>, <a href="https://cran.r-project.org/package=rmarkdown">rmarkdown</a>, <a href="https://cran.r-project.org/package=testthat">testthat</a>, <a href="https://cran.r-project.org/package=e1071">e1071</a> and <a href="https://cran.r-project.org/package=survival">survival</a> packages first:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rscript -e "install.packages(c('knitr', 'rmarkdown', 'devtools', 'e1071', 'survival'), repos='https://cloud.r-project.org/')"
Rscript -e "devtools::install_version('testthat', version = '1.0.2', repos='https://cloud.r-project.org/')"
</code></pre></div></div>

<p>You can run just the SparkR tests using the command:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./R/run-tests.sh
</code></pre></div></div>

<h2 id="running-docker-based-integration-test-suites">Running Docker-based Integration Test Suites</h2>

<p>In order to run Docker integration tests, you have to install the <code class="highlighter-rouge">docker</code> engine on your box.
The instructions for installation can be found at <a href="https://docs.docker.com/engine/installation/">the Docker site</a>.
Once installed, the <code class="highlighter-rouge">docker</code> service needs to be started, if not already running.
On Linux, this can be done by <code class="highlighter-rouge">sudo service docker start</code>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build/mvn install -DskipTests
./build/mvn test -Pdocker-integration-tests -pl :spark-docker-integration-tests_
</code></pre></div></div>

<p>or</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build/sbt docker-integration-tests/test
</code></pre></div></div>

<h2 id="change-scala-version">Change Scala Version</h2>

<p>When other versions of Scala like 2.13 are supported, it will be possible to build for that version.
Change the major Scala version using (e.g. 2.13):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./dev/change-scala-version.sh 2.13
</code></pre></div></div>

<p>For Maven, please enable the profile (e.g. 2.13):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build/mvn -Pscala-2.13 compile
</code></pre></div></div>

<p>For SBT, specify a complete scala version using (e.g. 2.13.0):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build/sbt -Dscala.version=2.13.0
</code></pre></div></div>

<p>Otherwise, the sbt-pom-reader plugin will use the <code class="highlighter-rouge">scala.version</code> specified in the spark-parent pom.</p>

<h2 id="running-jenkins-tests-with-github-enterprise">Running Jenkins tests with Github Enterprise</h2>

<p>To run tests with Jenkins:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./dev/run-tests-jenkins
</code></pre></div></div>

<p>If use an individual repository or a repository on GitHub Enterprise, export below environment variables before running above command.</p>

<h3 id="related-environment-variables">Related environment variables</h3>

<table class="table">
<tr><th>Variable Name</th><th>Default</th><th>Meaning</th></tr>
<tr>
  <td><code>SPARK_PROJECT_URL</code></td>
  <td>https://github.com/apache/spark</td>
  <td>
    The Spark project URL of GitHub Enterprise.
  </td>
</tr>
<tr>
  <td><code>GITHUB_API_BASE</code></td>
  <td>https://api.github.com/repos/apache/spark</td>
  <td>
    The Spark project API server URL of GitHub Enterprise.
  </td>
</tr>
</table>
:ET