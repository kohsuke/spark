name: master

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  # Build: build Spark and run the tests for specified modules.
  build:
    name: "Build modules: ${{ matrix.modules }} ${{ matrix.comment }} (JDK ${{ matrix.java }}, ${{ matrix.hadoop }}, ${{ matrix.hive }})"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java:
          - 1.8
        hadoop:
          - hadoop3.2
        hive:
          - hive2.3
        # TODO(SPARK-XXXXX): We don't test 'streaming-kinesis-asl' for now.
        # Kinesis tests depends on external Amazon kinesis service.
        # Note that the modules below are from sparktestsupport/modules.py.
        modules:
          - |-
            core, unsafe, kvstore, avro,
            network_common, network_shuffle, repl, launcher
            examples, sketch, graphx
          - |-
            catalyst, sql
          - |-
            hive-thriftserver
          - |-
            streaming, sql-kafka-0-10, streaming-kafka-0-10
          - |-
            mllib-local, mllib
          - |-
            pyspark-sql, pyspark-mllib, pyspark-resource
          - |-
            pyspark-core, pyspark-streaming, pyspark-ml
          - |-
            sparkr
          - |-
            yarn, mesos, kubernetes, hadoop-cloud,
            spark-ganglia-lgpl
        # Here, we split Hive tests into some of heavy ones and the rest of them.
        included-tags: [""]
        excluded-tags: [""]
        comment: ["- running all tests"]
        include:
          - modules: hive
            java: 1.8
            hadoop: hadoop3.2
            hive: hive2.3
            included-tags: org.apache.spark.tags.HeavyHiveTest
            comment: "- running heavy tests"
          - modules: hive
            java: 1.8
            hadoop: hadoop3.2
            hive: hive2.3
            excluded-tags: org.apache.spark.tags.HeavyHiveTest
            comment: "- running non-heavy tests"
    env:
      TEST_ONLY_MODULES: ${{ matrix.modules }}
      HADOOP_PROFILE: ${{ matrix.hadoop }}
      HIVE_PROFILE: ${{ matrix.hive }}
      # Github Actions' default miniconda
      CONDA_PREFIX: /usr/share/miniconda
      # Don't run the tests in parallel due to flakiness. See SparkParallelTestGrouping.
      SERIAL_SBT_TESTS: 1
      TEST_ONLY_EXCLUDED_TAGS: ${{ matrix.excluded-tags }}
      TEST_ONLY_INCLUDED_TAGS: ${{ matrix.included-tags }}
    steps:
    - name: Checkout Spark repository
      uses: actions/checkout@v2
    # Cache local repositories. Note that Github Actions cache has a 2G limit.
    - name: Cache Scala, SBT, Maven and Zinc
      uses: actions/cache@v1
      with:
        path: build
        key: build-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          build-
    - name: Cache Maven local repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ matrix.java }}-${{ matrix.hadoop }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ matrix.java }}-${{ matrix.hadoop }}-maven-
    - name: Cache Ivy local repository
      uses: actions/cache@v2
      with:
        path: ~/.ivy2/cache
        key: ${{ matrix.java }}-${{ matrix.hadoop }}-ivy-${{ hashFiles('**/pom.xml') }}-${{ hashFiles('**/plugins.sbt') }}
        restore-keys: |
          ${{ matrix.java }}-${{ matrix.hadoop }}-ivy-
    - name: Install JDK ${{ matrix.java }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    # PySpark
    - name: Install PyPy3
      # SQL component also has Python related tests, for example, IntegratedUDFTestUtils.
      # Note that order here matters because default python3 is overridden by pypy3.
      uses: actions/setup-python@v2
      if: contains(matrix.modules, 'pyspark') || matrix.modules == 'sql'
      with:
        python-version: pypy3
        architecture: x64
    - name: Install Python 2.7
      uses: actions/setup-python@v2
      if: contains(matrix.modules, 'pyspark') || matrix.modules == 'sql'
      with:
        python-version: 2.7
        architecture: x64
    - name: Install Python 3.6
      uses: actions/setup-python@v2
      if: contains(matrix.modules, 'pyspark') || matrix.modules == 'sql'
      with:
        python-version: 3.6
        architecture: x64
    - name: Install Python packages
      if: contains(matrix.modules, 'pyspark') || matrix.modules == 'sql'
      # PyArrow is not supported in PyPy yet, see ARROW-2651.
      # scipy installation with PyPy fails for an unknown reason.
      run: |
        python3 -m pip install numpy pyarrow pandas scipy
        python3 -m pip list
        python2 -m pip install numpy pyarrow pandas scipy
        python2 -m pip list
        # Installing NumPy is flaky in PyPy.
        pypy3 -m pip install numpy pandas
        pypy3 -m pip list
    # SparkR
    - name: Install R 3.6
      uses: r-lib/actions/setup-r@v1
      if: contains(matrix.modules, 'sparkr')
      with:
        r-version: 3.6
    - name: Install R packages
      if: contains(matrix.modules, 'sparkr')
      run: |
        sudo apt-get install -y libcurl4-openssl-dev
        sudo Rscript -e "install.packages(c('knitr', 'rmarkdown', 'testthat', 'devtools', 'e1071', 'survival', 'arrow', 'roxygen2'), repos='https://cloud.r-project.org/')"
        # Show installed packages in R.
        sudo Rscript -e 'pkg_list <- as.data.frame(installed.packages()[, c(1,3:4)]); pkg_list[is.na(pkg_list$Priority), 1:2, drop = FALSE]'
    # Run the tests.
    - name: "Run tests: ${{ matrix.modules }}"
      run: |
        mkdir -p ~/.m2
        ./dev/run-tests --parallelism 2
        rm -rf ~/.m2/repository/org/apache/spark

  # Linters: run the linters and other static analysis.
  lint:
    name: Linters, licenses, dependencies
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Install JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Install Python 3.6
      uses: actions/setup-python@v2
      with:
        python-version: 3.6
        architecture: x64
    - name: Install Python linter dependencies
      run: |
        pip3 install flake8 sphinx numpy
    - name: Install R 3.6
      uses: r-lib/actions/setup-r@v1
      with:
        r-version: 3.6
    - name: Install R linter dependencies and SparkR
      run: |
        sudo apt-get install -y libcurl4-openssl-dev
        sudo Rscript -e "install.packages(c('devtools'), repos='https://cloud.r-project.org/')"
        sudo Rscript -e "devtools::install_github('jimhester/lintr@v2.0.0')"
        ./R/install-dev.sh
    - name: Scala linter
      run: ./dev/lint-scala
    - name: Java linter
      run: ./dev/lint-java
    - name: Python linter
      run: ./dev/lint-python
    - name: R linter
      run: ./dev/lint-r
    - name: License test
      run: ./dev/check-license
    - name: Dependencies test
      run: ./dev/test-dependencies.sh

  # Documentation build.
  docs:
    name: Build documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Cache Maven local repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: docs-maven-repo-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          docs-maven-
    - name: Install JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Install Python 3.6
      uses: actions/setup-python@v2
      with:
        python-version: 3.6
        architecture: x64
    - name: Install Ruby 2.7
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.7
    - name: Install R 3.6
      uses: r-lib/actions/setup-r@v1
      with:
        r-version: 3.6
    - name: Install dependencies
      run: |
        sudo apt-get install -y libcurl4-openssl-dev pandoc
        pip install sphinx mkdocs numpy
        gem install jekyll jekyll-redirect-from rouge
        sudo Rscript -e "install.packages(c('devtools', 'testthat', 'knitr', 'rmarkdown', 'roxygen2'), repos='https://cloud.r-project.org/')"
    - name: Run documentation build
      run: |
        cd docs
        jekyll build
