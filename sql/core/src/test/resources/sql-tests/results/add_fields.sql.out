-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 18


-- !query
CREATE TEMPORARY VIEW struct_level_1 AS VALUES
  (1, NAMED_STRUCT('A', 1, 'B', 1, 'C', 1))
  AS T(ID, A)
-- !query schema
struct<>
-- !query output



-- !query
CREATE TEMPORARY VIEW null_struct_level_1 AS VALUES
  (CAST(NULL AS struct<A:int,B:int,C:int>))
  AS T(A)
-- !query schema
struct<>
-- !query output



-- !query
CREATE TEMPORARY VIEW struct_level_2 AS VALUES
  (NAMED_STRUCT('A', NAMED_STRUCT('A', 1, 'B', 1, 'C', 1)))
  AS T(A)
-- !query schema
struct<>
-- !query output



-- !query
SELECT ADD_FIELDS(ID, 'D', 2) AS A FROM struct_level_1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
cannot resolve 'add_fields(struct_level_1.`ID`, 'D', 2)' due to data type mismatch: Only struct is allowed to appear at first position, got: integer.; line 1 pos 7


-- !query
SELECT ADD_FIELDS(A, NULL, 2) AS A FROM struct_level_1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
cannot resolve 'add_fields(struct_level_1.`A`, NULL, 2)' due to data type mismatch: Only non-null foldable string expressions are allowed to appear at even position.; line 1 pos 7


-- !query
SELECT ADD_FIELDS(A, 1, 2) AS A FROM struct_level_1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
cannot resolve 'add_fields(struct_level_1.`A`, 1, 2)' due to data type mismatch: Only non-null foldable string expressions are allowed to appear at even position.; line 1 pos 7


-- !query
SELECT ADD_FIELDS() AS A FROM struct_level_1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
cannot resolve 'add_fields()' due to data type mismatch: add_fields expects an odd number of arguments.; line 1 pos 7


-- !query
SELECT ADD_FIELDS(A) AS A FROM struct_level_1
-- !query schema
struct<A:struct<A:int,B:int,C:int>>
-- !query output
{"A":1,"B":1,"C":1}


-- !query
SELECT ADD_FIELDS(A, 'D', 2) AS A FROM null_struct_level_1
-- !query schema
struct<A:struct<A:int,B:int,C:int,D:int>>
-- !query output
NULL


-- !query
SELECT ADD_FIELDS(A, 'D', 2) AS A FROM struct_level_1
-- !query schema
struct<A:struct<A:int,B:int,C:int,D:int>>
-- !query output
{"A":1,"B":1,"C":1,"D":2}


-- !query
SELECT ADD_FIELDS(A, 'D', NULL) AS A FROM struct_level_1
-- !query schema
struct<A:struct<A:int,B:int,C:int,D:null>>
-- !query output
{"A":1,"B":1,"C":1,"D":null}


-- !query
SELECT ADD_FIELDS(A, 'D', 2, 'E', 3) AS A FROM struct_level_1
-- !query schema
struct<A:struct<A:int,B:int,C:int,D:int,E:int>>
-- !query output
{"A":1,"B":1,"C":1,"D":2,"E":3}


-- !query
SELECT ADD_FIELDS(A, 'B', 2) AS A FROM struct_level_1
-- !query schema
struct<A:struct<A:int,B:int,C:int>>
-- !query output
{"A":1,"B":2,"C":1}


-- !query
SELECT ADD_FIELDS(A, 'B', NULL) AS A FROM struct_level_1
-- !query schema
struct<A:struct<A:int,B:null,C:int>>
-- !query output
{"A":1,"B":null,"C":1}


-- !query
SELECT ADD_FIELDS(A, 'A', 2, 'B', 2) AS A FROM struct_level_1
-- !query schema
struct<A:struct<A:int,B:int,C:int>>
-- !query output
{"A":2,"B":2,"C":1}


-- !query
SELECT ADD_FIELDS(A, 'B', 2, 'D', 2) AS A FROM struct_level_1
-- !query schema
struct<A:struct<A:int,B:int,C:int,D:int>>
-- !query output
{"A":1,"B":2,"C":1,"D":2}


-- !query
SELECT ADD_FIELDS(A, 'A', ADD_FIELDS(A.A, 'D', 2)) AS A FROM struct_level_2
-- !query schema
struct<A:struct<A:struct<A:int,B:int,C:int,D:int>>>
-- !query output
{"A":{"A":1,"B":1,"C":1,"D":2}}


-- !query
SELECT ADD_FIELDS(A, 'A', ADD_FIELDS(A.A, 'B', 2)) AS A FROM struct_level_2
-- !query schema
struct<A:struct<A:struct<A:int,B:int,C:int>>>
-- !query output
{"A":{"A":1,"B":2,"C":1}}
