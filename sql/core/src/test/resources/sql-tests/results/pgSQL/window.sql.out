-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 148


-- !query 0
CREATE TEMPORARY VIEW tenk2 AS SELECT * FROM tenk1
-- !query 0 schema
struct<>
-- !query 0 output



-- !query 1
CREATE TABLE empsalary (
    depname string,
    empno integer,
    salary int,
    enroll_date date
) USING parquet
-- !query 1 schema
struct<>
-- !query 1 output



-- !query 2
INSERT INTO empsalary VALUES
('develop', 10, 5200, '2007-08-01'),
('sales', 1, 5000, '2006-10-01'),
('personnel', 5, 3500, '2007-12-10'),
('sales', 4, 4800, '2007-08-08'),
('personnel', 2, 3900, '2006-12-23'),
('develop', 7, 4200, '2008-01-01'),
('develop', 9, 4500, '2008-01-01'),
('sales', 3, 4800, '2007-08-01'),
('develop', 8, 6000, '2006-10-01'),
('develop', 11, 5200, '2007-08-15')
-- !query 2 schema
struct<>
-- !query 2 output



-- !query 3
SELECT depname, empno, salary, sum(salary) OVER (PARTITION BY depname) FROM empsalary ORDER BY depname, salary
-- !query 3 schema
struct<depname:string,empno:int,salary:int,sum(CAST(salary AS BIGINT)) OVER (PARTITION BY depname ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):bigint>
-- !query 3 output
develop	7	4200	25100
develop	9	4500	25100
develop	10	5200	25100
develop	11	5200	25100
develop	8	6000	25100
personnel	5	3500	7400
personnel	2	3900	7400
sales	4	4800	14600
sales	3	4800	14600
sales	1	5000	14600


-- !query 4
SELECT depname, empno, salary, rank() OVER (PARTITION BY depname ORDER BY salary) FROM empsalary
-- !query 4 schema
struct<depname:string,empno:int,salary:int,RANK() OVER (PARTITION BY depname ORDER BY salary ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int>
-- !query 4 output
develop	10	5200	3
develop	11	5200	3
develop	7	4200	1
develop	8	6000	5
develop	9	4500	2
personnel	2	3900	2
personnel	5	3500	1
sales	1	5000	3
sales	3	4800	1
sales	4	4800	1


-- !query 5
SELECT four, ten, SUM(SUM(four)) OVER (PARTITION BY four), AVG(ten) FROM tenk1
GROUP BY four, ten ORDER BY four, ten
-- !query 5 schema
struct<four:int,ten:int,sum(sum(CAST(four AS BIGINT))) OVER (PARTITION BY four ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):bigint,avg(ten):double>
-- !query 5 output
0	0	0	0.0
0	2	0	2.0
0	4	0	4.0
0	6	0	6.0
0	8	0	8.0
1	1	2500	1.0
1	3	2500	3.0
1	5	2500	5.0
1	7	2500	7.0
1	9	2500	9.0
2	0	5000	0.0
2	2	5000	2.0
2	4	5000	4.0
2	6	5000	6.0
2	8	5000	8.0
3	1	7500	1.0
3	3	7500	3.0
3	5	7500	5.0
3	7	7500	7.0
3	9	7500	9.0


-- !query 6
SELECT depname, empno, salary, sum(salary) OVER w FROM empsalary WINDOW w AS (PARTITION BY depname)
-- !query 6 schema
struct<depname:string,empno:int,salary:int,sum(CAST(salary AS BIGINT)) OVER (PARTITION BY depname ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):bigint>
-- !query 6 output
develop	10	5200	25100
develop	11	5200	25100
develop	7	4200	25100
develop	8	6000	25100
develop	9	4500	25100
personnel	2	3900	7400
personnel	5	3500	7400
sales	1	5000	14600
sales	3	4800	14600
sales	4	4800	14600


-- !query 7
SELECT COUNT(*) OVER () FROM tenk1 WHERE unique2 < 10
-- !query 7 schema
struct<count(1) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):bigint>
-- !query 7 output
10
10
10
10
10
10
10
10
10
10


-- !query 8
SELECT COUNT(*) OVER w FROM tenk1 WHERE unique2 < 10 WINDOW w AS ()
-- !query 8 schema
struct<count(1) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):bigint>
-- !query 8 output
10
10
10
10
10
10
10
10
10
10


-- !query 9
SELECT four FROM tenk1 WHERE FALSE WINDOW w AS (PARTITION BY ten)
-- !query 9 schema
struct<four:int>
-- !query 9 output



-- !query 10
SELECT sum(four) OVER (PARTITION BY ten ORDER BY unique2) AS sum_1, ten, four FROM tenk1 WHERE unique2 < 10
-- !query 10 schema
struct<sum_1:bigint,ten:int,four:int>
-- !query 10 output
0	0	0
0	0	0
0	4	0
1	7	1
1	9	1
2	0	2
3	1	3
3	3	3
4	1	1
5	1	1


-- !query 11
SELECT row_number() OVER (ORDER BY unique2) FROM tenk1 WHERE unique2 < 10
-- !query 11 schema
struct<row_number() OVER (ORDER BY unique2 ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int>
-- !query 11 output
1
10
2
3
4
5
6
7
8
9


-- !query 12
SELECT rank() OVER (PARTITION BY four ORDER BY ten) AS rank_1, ten, four FROM tenk1 WHERE unique2 < 10
-- !query 12 schema
struct<rank_1:int,ten:int,four:int>
-- !query 12 output
1	0	0
1	0	0
1	0	2
1	1	1
1	1	1
1	1	3
2	3	3
3	4	0
3	7	1
4	9	1


-- !query 13
SELECT dense_rank() OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10
-- !query 13 schema
struct<DENSE_RANK() OVER (PARTITION BY four ORDER BY ten ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int,ten:int,four:int>
-- !query 13 output
1	0	0
1	0	0
1	0	2
1	1	1
1	1	1
1	1	3
2	3	3
2	4	0
2	7	1
3	9	1


-- !query 14
SELECT percent_rank() OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10
-- !query 14 schema
struct<PERCENT_RANK() OVER (PARTITION BY four ORDER BY ten ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):double,ten:int,four:int>
-- !query 14 output
0.0	0	0
0.0	0	0
0.0	0	2
0.0	1	1
0.0	1	1
0.0	1	3
0.6666666666666666	7	1
1.0	3	3
1.0	4	0
1.0	9	1


-- !query 15
SELECT cume_dist() OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10
-- !query 15 schema
struct<cume_dist() OVER (PARTITION BY four ORDER BY ten ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):double,ten:int,four:int>
-- !query 15 output
0.5	1	1
0.5	1	1
0.5	1	3
0.6666666666666666	0	0
0.6666666666666666	0	0
0.75	7	1
1.0	0	2
1.0	3	3
1.0	4	0
1.0	9	1


-- !query 16
SELECT ntile(3) OVER (ORDER BY ten, four), ten, four FROM tenk1 WHERE unique2 < 10
-- !query 16 schema
struct<ntile(3) OVER (ORDER BY ten ASC NULLS FIRST, four ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int,ten:int,four:int>
-- !query 16 output
1	0	0
1	0	0
1	0	2
1	1	1
2	1	1
2	1	3
2	3	3
3	4	0
3	7	1
3	9	1


-- !query 17
SELECT lag(ten) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10
-- !query 17 schema
struct<lag(ten, 1, NULL) OVER (PARTITION BY four ORDER BY ten ASC NULLS FIRST ROWS BETWEEN -1 FOLLOWING AND -1 FOLLOWING):int,ten:int,four:int>
-- !query 17 output
0	0	0
0	4	0
1	1	1
1	3	3
1	7	1
7	9	1
NULL	0	0
NULL	0	2
NULL	1	1
NULL	1	3


-- !query 18
SELECT lead(ten) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10
-- !query 18 schema
struct<lead(ten, 1, NULL) OVER (PARTITION BY four ORDER BY ten ASC NULLS FIRST ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING):int,ten:int,four:int>
-- !query 18 output
0	0	0
1	1	1
3	1	3
4	0	0
7	1	1
9	7	1
NULL	0	2
NULL	3	3
NULL	4	0
NULL	9	1


-- !query 19
SELECT lead(ten * 2, 1) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10
-- !query 19 schema
struct<lead((ten * 2), 1, NULL) OVER (PARTITION BY four ORDER BY ten ASC NULLS FIRST ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING):int,ten:int,four:int>
-- !query 19 output
0	0	0
14	1	1
18	7	1
2	1	1
6	1	3
8	0	0
NULL	0	2
NULL	3	3
NULL	4	0
NULL	9	1


-- !query 20
SELECT lead(ten * 2, 1, -1) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10
-- !query 20 schema
struct<lead((ten * 2), 1, -1) OVER (PARTITION BY four ORDER BY ten ASC NULLS FIRST ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING):int,ten:int,four:int>
-- !query 20 output
-1	0	2
-1	3	3
-1	4	0
-1	9	1
0	0	0
14	1	1
18	7	1
2	1	1
6	1	3
8	0	0


-- !query 21
SELECT first(ten) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10
-- !query 21 schema
struct<first(ten, false) OVER (PARTITION BY four ORDER BY ten ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int,ten:int,four:int>
-- !query 21 output
0	0	0
0	0	0
0	0	2
0	4	0
1	1	1
1	1	1
1	1	3
1	3	3
1	7	1
1	9	1


-- !query 22
SELECT last(four) OVER (ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10
-- !query 22 schema
struct<last(four, false) OVER (ORDER BY ten ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int,ten:int,four:int>
-- !query 22 output
0	4	0
1	1	1
1	1	1
1	1	3
1	7	1
1	9	1
2	0	0
2	0	0
2	0	2
3	3	3


-- !query 23
SELECT last(ten) OVER (PARTITION BY four), ten, four FROM
(SELECT * FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten)s
ORDER BY four, ten
-- !query 23 schema
struct<last(ten, false) OVER (PARTITION BY four ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):int,ten:int,four:int>
-- !query 23 output
4	0	0
4	0	0
4	4	0
9	1	1
9	1	1
9	7	1
9	9	1
0	0	2
3	1	3
3	3	3


-- !query 24
SELECT ten, two, sum(hundred) AS gsum, sum(sum(hundred)) OVER (PARTITION BY two ORDER BY ten) AS wsum
FROM tenk1 GROUP BY ten, two
-- !query 24 schema
struct<ten:int,two:int,gsum:bigint,wsum:bigint>
-- !query 24 output
0	0	45000	45000
1	1	46000	46000
2	0	47000	92000
3	1	48000	94000
4	0	49000	141000
5	1	50000	144000
6	0	51000	192000
7	1	52000	196000
8	0	53000	245000
9	1	54000	250000


-- !query 25
SELECT count(*) OVER (PARTITION BY four), four FROM (SELECT * FROM tenk1 WHERE two = 1)s WHERE unique2 < 10
-- !query 25 schema
struct<count(1) OVER (PARTITION BY four ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):bigint,four:int>
-- !query 25 output
2	3
2	3
4	1
4	1
4	1
4	1


-- !query 26
SELECT (count(*) OVER (PARTITION BY four ORDER BY ten) +
  sum(hundred) OVER (PARTITION BY four ORDER BY ten)) AS cntsum
  FROM tenk1 WHERE unique2 < 10
-- !query 26 schema
struct<cntsum:bigint>
-- !query 26 output
136
22
22
24
24
51
82
87
92
92


-- !query 27
SELECT * FROM(
  SELECT count(*) OVER (PARTITION BY four ORDER BY ten) +
    sum(hundred) OVER (PARTITION BY two ORDER BY ten) AS total,
    count(*) OVER (PARTITION BY four ORDER BY ten) AS fourcount,
    sum(hundred) OVER (PARTITION BY two ORDER BY ten) AS twosum
    FROM tenk1
)sub WHERE total <> fourcount + twosum
-- !query 27 schema
struct<total:bigint,fourcount:bigint,twosum:bigint>
-- !query 27 output



-- !query 28
SELECT avg(four) OVER (PARTITION BY four ORDER BY thousand / 100) FROM tenk1 WHERE unique2 < 10
-- !query 28 schema
struct<avg(CAST(four AS BIGINT)) OVER (PARTITION BY four ORDER BY (thousand div 100) ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):double>
-- !query 28 output
0.0
0.0
0.0
1.0
1.0
1.0
1.0
2.0
3.0
3.0


-- !query 29
SELECT ten, two, sum(hundred) AS gsum, sum(sum(hundred)) OVER win AS wsum
FROM tenk1 GROUP BY ten, two WINDOW win AS (PARTITION BY two ORDER BY ten)
-- !query 29 schema
struct<ten:int,two:int,gsum:bigint,wsum:bigint>
-- !query 29 output
0	0	45000	45000
1	1	46000	46000
2	0	47000	92000
3	1	48000	94000
4	0	49000	141000
5	1	50000	144000
6	0	51000	192000
7	1	52000	196000
8	0	53000	245000
9	1	54000	250000


-- !query 30
SELECT sum(salary),
row_number() OVER (ORDER BY depname),
sum(sum(salary)) OVER (ORDER BY depname DESC)
FROM empsalary GROUP BY depname
-- !query 30 schema
struct<sum(salary):bigint,row_number() OVER (ORDER BY depname ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int,sum(sum(CAST(salary AS BIGINT))) OVER (ORDER BY depname DESC NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):bigint>
-- !query 30 output
14600	3	14600
25100	1	47100
7400	2	22000


-- !query 31
SELECT sum(salary) OVER w1, count(*) OVER w2
FROM empsalary WINDOW w1 AS (ORDER BY salary), w2 AS (ORDER BY salary)
-- !query 31 schema
struct<sum(CAST(salary AS BIGINT)) OVER (ORDER BY salary ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):bigint,count(1) OVER (ORDER BY salary ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):bigint>
-- !query 31 output
11600	3
16100	4
25700	6
25700	6
30700	7
3500	1
41100	9
41100	9
47100	10
7400	2


-- !query 32
SELECT count(*) OVER (PARTITION BY four) FROM (SELECT * FROM tenk1 WHERE FALSE)s
-- !query 32 schema
struct<count(1) OVER (PARTITION BY four ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):bigint>
-- !query 32 output



-- !query 33
SELECT sum(salary) OVER w, rank() OVER w FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary DESC)
-- !query 33 schema
struct<sum(CAST(salary AS BIGINT)) OVER (PARTITION BY depname ORDER BY salary DESC NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):bigint,RANK() OVER (PARTITION BY depname ORDER BY salary DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int>
-- !query 33 output
14600	2
14600	2
16400	2
16400	2
20900	4
25100	5
3900	1
5000	1
6000	1
7400	2


-- !query 34
create temporary view int4_tbl as select * from values
  (0),
  (123456),
  (-123456),
  (2147483647),
  (-2147483647)
  as int4_tbl(f1)
-- !query 34 schema
struct<>
-- !query 34 output



-- !query 35
SELECT SUM(COUNT(f1)) OVER () FROM int4_tbl WHERE f1=42
-- !query 35 schema
struct<sum(count(f1)) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):bigint>
-- !query 35 output
0


-- !query 36
select ten,
  sum(unique1) + sum(unique2) as res,
  rank() over (order by sum(unique1) + sum(unique2)) as rank
from tenk1
group by ten order by ten
-- !query 36 schema
struct<ten:int,res:bigint,rank:int>
-- !query 36 output
0	9976146	4
1	10114187	9
2	10059554	8
3	9878541	1
4	9881005	2
5	9981670	5
6	9947099	3
7	10120309	10
8	9991305	6
9	10040184	7


-- !query 37
select first(max(x)) over (), y
  from (select unique1 as x, ten+four as y from tenk1) ss
  group by y
-- !query 37 schema
struct<first(max(x), false) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):int,y:int>
-- !query 37 output
9980	0
9980	10
9980	12
9980	2
9980	4
9980	6
9980	8


-- !query 38
SELECT four, ten,
sum(ten) over (partition by four order by ten),
last(ten) over (partition by four order by ten)
FROM (select distinct ten, four from tenk1) ss
-- !query 38 schema
struct<four:int,ten:int,sum(CAST(ten AS BIGINT)) OVER (PARTITION BY four ORDER BY ten ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):bigint,last(ten, false) OVER (PARTITION BY four ORDER BY ten ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int>
-- !query 38 output
0	0	0	0
0	2	2	2
0	4	6	4
0	6	12	6
0	8	20	8
1	1	1	1
1	3	4	3
1	5	9	5
1	7	16	7
1	9	25	9
2	0	0	0
2	2	2	2
2	4	6	4
2	6	12	6
2	8	20	8
3	1	1	1
3	3	4	3
3	5	9	5
3	7	16	7
3	9	25	9


-- !query 39
SELECT four, ten,
sum(ten) over (partition by four order by ten range between unbounded preceding and current row),
last(ten) over (partition by four order by ten range between unbounded preceding and current row)
FROM (select distinct ten, four from tenk1) ss
-- !query 39 schema
struct<four:int,ten:int,sum(ten) OVER (PARTITION BY four ORDER BY ten ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):bigint,last(ten, false) OVER (PARTITION BY four ORDER BY ten ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int>
-- !query 39 output
0	0	0	0
0	2	2	2
0	4	6	4
0	6	12	6
0	8	20	8
1	1	1	1
1	3	4	3
1	5	9	5
1	7	16	7
1	9	25	9
2	0	0	0
2	2	2	2
2	4	6	4
2	6	12	6
2	8	20	8
3	1	1	1
3	3	4	3
3	5	9	5
3	7	16	7
3	9	25	9


-- !query 40
SELECT four, ten,
sum(ten) over (partition by four order by ten range between unbounded preceding and unbounded following),
last(ten) over (partition by four order by ten range between unbounded preceding and unbounded following)
FROM (select distinct ten, four from tenk1) ss
-- !query 40 schema
struct<four:int,ten:int,sum(ten) OVER (PARTITION BY four ORDER BY ten ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):bigint,last(ten, false) OVER (PARTITION BY four ORDER BY ten ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):int>
-- !query 40 output
0	0	20	8
0	2	20	8
0	4	20	8
0	6	20	8
0	8	20	8
1	1	25	9
1	3	25	9
1	5	25	9
1	7	25	9
1	9	25	9
2	0	20	8
2	2	20	8
2	4	20	8
2	6	20	8
2	8	20	8
3	1	25	9
3	3	25	9
3	5	25	9
3	7	25	9
3	9	25	9


-- !query 41
SELECT four, ten/4 as two,
sum(ten/4) over (partition by four order by ten/4 range between unbounded preceding and current row),
last(ten/4) over (partition by four order by ten/4 range between unbounded preceding and current row)
FROM (select distinct ten, four from tenk1) ss
-- !query 41 schema
struct<four:int,two:int,sum((ten div 4)) OVER (PARTITION BY four ORDER BY (ten div 4) ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):bigint,last((ten div 4), false) OVER (PARTITION BY four ORDER BY (ten div 4) ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int>
-- !query 41 output
0	0	0	0
0	0	0	0
0	1	2	1
0	1	2	1
0	2	4	2
1	0	0	0
1	0	0	0
1	1	2	1
1	1	2	1
1	2	4	2
2	0	0	0
2	0	0	0
2	1	2	1
2	1	2	1
2	2	4	2
3	0	0	0
3	0	0	0
3	1	2	1
3	1	2	1
3	2	4	2


-- !query 42
SELECT four, ten/4 as two,
sum(ten/4) over (partition by four order by ten/4 rows between unbounded preceding and current row),
last(ten/4) over (partition by four order by ten/4 rows between unbounded preceding and current row)
FROM (select distinct ten, four from tenk1) ss
-- !query 42 schema
struct<four:int,two:int,sum((ten div 4)) OVER (PARTITION BY four ORDER BY (ten div 4) ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):bigint,last((ten div 4), false) OVER (PARTITION BY four ORDER BY (ten div 4) ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int>
-- !query 42 output
0	0	0	0
0	0	0	0
0	1	1	1
0	1	2	1
0	2	4	2
1	0	0	0
1	0	0	0
1	1	1	1
1	1	2	1
1	2	4	2
2	0	0	0
2	0	0	0
2	1	1	1
2	1	2	1
2	2	4	2
3	0	0	0
3	0	0	0
3	1	1	1
3	1	2	1
3	2	4	2


-- !query 43
SELECT sum(unique1) over (order by four range between current row and unbounded following),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 43 schema
struct<sum(unique1) OVER (ORDER BY four ASC NULLS FIRST RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):bigint,unique1:int,four:int>
-- !query 43 output
10	3	3
10	7	3
18	2	2
18	6	2
33	1	1
33	5	1
33	9	1
45	0	0
45	4	0
45	8	0


-- !query 44
SELECT sum(unique1) over (rows between current row and unbounded following),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 44 schema
struct<sum(unique1) OVER (ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):bigint,unique1:int,four:int>
-- !query 44 output
0	0	0
10	3	3
15	5	1
23	8	0
32	9	1
38	6	2
39	1	1
41	2	2
45	4	0
7	7	3


-- !query 45
SELECT sum(unique1) over (rows between 2 preceding and 2 following),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 45 schema
struct<sum(unique1) OVER (ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING):bigint,unique1:int,four:int>
-- !query 45 output
10	0	0
13	2	2
15	7	3
22	1	1
23	3	3
26	6	2
29	9	1
31	8	0
32	5	1
7	4	0


-- !query 46
SELECT sum(unique1) over (rows between 2 preceding and 1 preceding),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 46 schema
struct<sum(unique1) OVER (ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING):bigint,unique1:int,four:int>
-- !query 46 output
10	0	0
13	3	3
15	8	0
17	5	1
3	6	2
4	2	2
6	1	1
7	9	1
8	7	3
NULL	4	0


-- !query 47
SELECT sum(unique1) over (rows between 1 following and 3 following),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 47 schema
struct<sum(unique1) OVER (ROWS BETWEEN 1 FOLLOWING AND 3 FOLLOWING):bigint,unique1:int,four:int>
-- !query 47 output
0	7	3
10	5	1
15	8	0
16	2	2
16	9	1
22	6	2
23	1	1
7	3	3
9	4	0
NULL	0	0


-- !query 48
SELECT sum(unique1) over (rows between unbounded preceding and 1 following),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 48 schema
struct<sum(unique1) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING):bigint,unique1:int,four:int>
-- !query 48 output
13	1	1
22	6	2
30	9	1
35	8	0
38	5	1
45	0	0
45	3	3
45	7	3
6	4	0
7	2	2


-- !query 49
CREATE TEMP VIEW v_window AS
SELECT i.id, sum(i.id) over (order by i.id rows between 1 preceding and 1 following) as sum_rows
FROM range(1, 10) i
-- !query 49 schema
struct<>
-- !query 49 output



-- !query 50
SELECT * FROM v_window
-- !query 50 schema
struct<id:bigint,sum_rows:bigint>
-- !query 50 output
1	3
2	6
3	9
4	12
5	15
6	18
7	21
8	24
9	17


-- !query 51
SELECT * FROM v_window
-- !query 51 schema
struct<id:bigint,sum_rows:bigint>
-- !query 51 output
1	3
2	6
3	9
4	12
5	15
6	18
7	21
8	24
9	17


-- !query 52
SELECT * FROM v_window
-- !query 52 schema
struct<id:bigint,sum_rows:bigint>
-- !query 52 output
1	3
2	6
3	9
4	12
5	15
6	18
7	21
8	24
9	17


-- !query 53
SELECT * FROM v_window
-- !query 53 schema
struct<id:bigint,sum_rows:bigint>
-- !query 53 output
1	3
2	6
3	9
4	12
5	15
6	18
7	21
8	24
9	17


-- !query 54
CREATE OR REPLACE TEMP VIEW v_window AS
SELECT i.id, sum(i.id) over (order by i.id range between 1 preceding and 1 following) as sum_rows FROM range(1, 10) i
-- !query 54 schema
struct<>
-- !query 54 output



-- !query 55
SELECT * FROM v_window
-- !query 55 schema
struct<id:bigint,sum_rows:bigint>
-- !query 55 output
1	3
2	6
3	9
4	12
5	15
6	18
7	21
8	24
9	17


-- !query 56
DROP VIEW v_window
-- !query 56 schema
struct<>
-- !query 56 output



-- !query 57
SELECT sum(unique1) over (order by four range between 2 preceding and 1 preceding),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 57 schema
struct<sum(unique1) OVER (ORDER BY four ASC NULLS FIRST RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING):bigint,unique1:int,four:int>
-- !query 57 output
12	1	1
12	5	1
12	9	1
23	3	3
23	7	3
27	2	2
27	6	2
NULL	0	0
NULL	4	0
NULL	8	0


-- !query 58
SELECT sum(unique1) over (order by four desc range between 2 preceding and 1 preceding),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 58 schema
struct<sum(unique1) OVER (ORDER BY four DESC NULLS LAST RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING):bigint,unique1:int,four:int>
-- !query 58 output
10	2	2
10	6	2
18	1	1
18	5	1
18	9	1
23	0	0
23	4	0
23	8	0
NULL	3	3
NULL	7	3


-- !query 59
SELECT sum(unique1) over (partition by four order by unique1 range between 5 preceding and 6 following),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 59 schema
struct<sum(unique1) OVER (PARTITION BY four ORDER BY unique1 ASC NULLS FIRST RANGE BETWEEN 5 PRECEDING AND 6 FOLLOWING):bigint,unique1:int,four:int>
-- !query 59 output
10	3	3
10	7	3
12	4	0
12	8	0
14	9	1
15	5	1
4	0	0
6	1	1
8	2	2
8	6	2


-- !query 60
select ss.id, ss.y,
       first(ss.y) over w,
       last(ss.y) over w
from
  (select x.id, x.id as y from range(1,5) as x
   union all select null, 42
   union all select null, 43) ss
window w as
  (order by ss.id asc nulls first range between 2 preceding and 2 following)
-- !query 60 schema
struct<id:bigint,y:bigint,first(y, false) OVER (ORDER BY id ASC NULLS FIRST RANGE BETWEEN CAST((- 2) AS BIGINT) FOLLOWING AND CAST(2 AS BIGINT) FOLLOWING):bigint,last(y, false) OVER (ORDER BY id ASC NULLS FIRST RANGE BETWEEN CAST((- 2) AS BIGINT) FOLLOWING AND CAST(2 AS BIGINT) FOLLOWING):bigint>
-- !query 60 output
1	1	1	3
2	2	1	4
3	3	1	4
4	4	2	4
NULL	42	42	43
NULL	43	42	43


-- !query 61
select ss.id, ss.y,
       first(ss.y) over w,
       last(ss.y) over w
from
  (select x.id, x.id as y from range(1,5) as x
   union all select null, 42
   union all select null, 43) ss
window w as
  (order by ss.id asc nulls last range between 2 preceding and 2 following)
-- !query 61 schema
struct<id:bigint,y:bigint,first(y, false) OVER (ORDER BY id ASC NULLS LAST RANGE BETWEEN CAST((- 2) AS BIGINT) FOLLOWING AND CAST(2 AS BIGINT) FOLLOWING):bigint,last(y, false) OVER (ORDER BY id ASC NULLS LAST RANGE BETWEEN CAST((- 2) AS BIGINT) FOLLOWING AND CAST(2 AS BIGINT) FOLLOWING):bigint>
-- !query 61 output
1	1	1	3
2	2	1	4
3	3	1	4
4	4	2	4
NULL	42	42	43
NULL	43	42	43


-- !query 62
select ss.id, ss.y,
       first(ss.y) over w,
       last(ss.y) over w
from
  (select x.id, x.id as y from range(1,5) as x
   union all select null, 42
   union all select null, 43) ss
window w as
  (order by ss.id desc nulls first range between 2 preceding and 2 following)
-- !query 62 schema
struct<id:bigint,y:bigint,first(y, false) OVER (ORDER BY id DESC NULLS FIRST RANGE BETWEEN CAST((- 2) AS BIGINT) FOLLOWING AND CAST(2 AS BIGINT) FOLLOWING):bigint,last(y, false) OVER (ORDER BY id DESC NULLS FIRST RANGE BETWEEN CAST((- 2) AS BIGINT) FOLLOWING AND CAST(2 AS BIGINT) FOLLOWING):bigint>
-- !query 62 output
1	1	3	1
2	2	4	1
3	3	4	1
4	4	4	2
NULL	42	42	43
NULL	43	42	43


-- !query 63
select ss.id, ss.y,
       first(ss.y) over w,
       last(ss.y) over w
from
  (select x.id, x.id as y from range(1,5) as x
   union all select null, 42
   union all select null, 43) ss
window w as
  (order by ss.id desc nulls last range between 2 preceding and 2 following)
-- !query 63 schema
struct<id:bigint,y:bigint,first(y, false) OVER (ORDER BY id DESC NULLS LAST RANGE BETWEEN CAST((- 2) AS BIGINT) FOLLOWING AND CAST(2 AS BIGINT) FOLLOWING):bigint,last(y, false) OVER (ORDER BY id DESC NULLS LAST RANGE BETWEEN CAST((- 2) AS BIGINT) FOLLOWING AND CAST(2 AS BIGINT) FOLLOWING):bigint>
-- !query 63 output
1	1	3	1
2	2	4	1
3	3	4	1
4	4	4	2
NULL	42	42	43
NULL	43	42	43


-- !query 64
select x.id, last(x.id) over (order by x.id range between current row and 2147450884 following)
from range(32764, 32766) x
-- !query 64 schema
struct<id:bigint,last(id, false) OVER (ORDER BY id ASC NULLS FIRST RANGE BETWEEN CURRENT ROW AND CAST(2147450884 AS BIGINT) FOLLOWING):bigint>
-- !query 64 output
32764	32765
32765	32765


-- !query 65
select x.id, last(x.id) over (order by x.id desc range between current row and 2147450885 following)
from range(-32766, -32764) x
-- !query 65 schema
struct<id:bigint,last(id, false) OVER (ORDER BY id DESC NULLS LAST RANGE BETWEEN CURRENT ROW AND CAST(2147450885 AS BIGINT) FOLLOWING):bigint>
-- !query 65 output
-32765	-32766
-32766	-32766


-- !query 66
select x.id, last(x.id) over (order by x.id range between current row and 4 following)
from range(2147483644, 2147483646) x
-- !query 66 schema
struct<id:bigint,last(id, false) OVER (ORDER BY id ASC NULLS FIRST RANGE BETWEEN CURRENT ROW AND CAST(4 AS BIGINT) FOLLOWING):bigint>
-- !query 66 output
2147483644	2147483645
2147483645	2147483645


-- !query 67
select x.id, last(x.id) over (order by x.id desc range between current row and 5 following)
from range(-2147483646, -2147483644) x
-- !query 67 schema
struct<id:bigint,last(id, false) OVER (ORDER BY id DESC NULLS LAST RANGE BETWEEN CURRENT ROW AND CAST(5 AS BIGINT) FOLLOWING):bigint>
-- !query 67 output
-2147483645	-2147483646
-2147483646	-2147483646


-- !query 68
select x.id, last(x.id) over (order by x.id range between current row and 4 following)
from range(9223372036854775804, 9223372036854775806) x
-- !query 68 schema
struct<id:bigint,last(id, false) OVER (ORDER BY id ASC NULLS FIRST RANGE BETWEEN CURRENT ROW AND CAST(4 AS BIGINT) FOLLOWING):bigint>
-- !query 68 output
9223372036854775804	NULL
9223372036854775805	NULL


-- !query 69
select x.id, last(x.id) over (order by x.id desc range between current row and 5 following)
from range(-9223372036854775806, -9223372036854775804) x
-- !query 69 schema
struct<id:bigint,last(id, false) OVER (ORDER BY id DESC NULLS LAST RANGE BETWEEN CURRENT ROW AND CAST(5 AS BIGINT) FOLLOWING):bigint>
-- !query 69 output
-9223372036854775805	NULL
-9223372036854775806	NULL


-- !query 70
SELECT sum(unique1) over (order by four range between unbounded preceding and current row),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 70 schema
struct<sum(unique1) OVER (ORDER BY four ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):bigint,unique1:int,four:int>
-- !query 70 output
12	0	0
12	4	0
12	8	0
27	1	1
27	5	1
27	9	1
35	2	2
35	6	2
45	3	3
45	7	3


-- !query 71
SELECT sum(unique1) over (order by four range between unbounded preceding and unbounded following),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 71 schema
struct<sum(unique1) OVER (ORDER BY four ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):bigint,unique1:int,four:int>
-- !query 71 output
45	0	0
45	1	1
45	2	2
45	3	3
45	4	0
45	5	1
45	6	2
45	7	3
45	8	0
45	9	1


-- !query 72
SELECT sum(unique1) over (order by four range between current row and unbounded following),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 72 schema
struct<sum(unique1) OVER (ORDER BY four ASC NULLS FIRST RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):bigint,unique1:int,four:int>
-- !query 72 output
10	3	3
10	7	3
18	2	2
18	6	2
33	1	1
33	5	1
33	9	1
45	0	0
45	4	0
45	8	0


-- !query 73
SELECT sum(unique1) over (order by four range between 1 preceding and unbounded following),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 73 schema
struct<sum(unique1) OVER (ORDER BY four ASC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING):bigint,unique1:int,four:int>
-- !query 73 output
18	3	3
18	7	3
33	2	2
33	6	2
45	0	0
45	1	1
45	4	0
45	5	1
45	8	0
45	9	1


-- !query 74
SELECT sum(unique1) over (order by four range between 1 following and unbounded following),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 74 schema
struct<sum(unique1) OVER (ORDER BY four ASC NULLS FIRST RANGE BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING):bigint,unique1:int,four:int>
-- !query 74 output
10	2	2
10	6	2
18	1	1
18	5	1
18	9	1
33	0	0
33	4	0
33	8	0
NULL	3	3
NULL	7	3


-- !query 75
SELECT sum(unique1) over (order by four range between unbounded preceding and 2 following),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 75 schema
struct<sum(unique1) OVER (ORDER BY four ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING):bigint,unique1:int,four:int>
-- !query 75 output
35	0	0
35	4	0
35	8	0
45	1	1
45	2	2
45	3	3
45	5	1
45	6	2
45	7	3
45	9	1


-- !query 76
SELECT sum(unique1) over (order by four range between 2 preceding and 1 preceding),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 76 schema
struct<sum(unique1) OVER (ORDER BY four ASC NULLS FIRST RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING):bigint,unique1:int,four:int>
-- !query 76 output
12	1	1
12	5	1
12	9	1
23	3	3
23	7	3
27	2	2
27	6	2
NULL	0	0
NULL	4	0
NULL	8	0


-- !query 77
SELECT sum(unique1) over (order by four range between 0 preceding and 0 following),
unique1, four
FROM tenk1 WHERE unique1 < 10
-- !query 77 schema
struct<sum(unique1) OVER (ORDER BY four ASC NULLS FIRST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING):bigint,unique1:int,four:int>
-- !query 77 output
10	3	3
10	7	3
12	0	0
12	4	0
12	8	0
15	1	1
15	5	1
15	9	1
8	2	2
8	6	2


-- !query 78
SELECT sum(unique1) over (partition by ten
  order by four range between 0 preceding and 0 following),unique1, four, ten
FROM tenk1 WHERE unique1 < 10
-- !query 78 schema
struct<sum(unique1) OVER (PARTITION BY ten ORDER BY four ASC NULLS FIRST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING):bigint,unique1:int,four:int,ten:int>
-- !query 78 output
0	0	0	0
1	1	1	1
2	2	2	2
3	3	3	3
4	4	0	4
5	5	1	5
6	6	2	6
7	7	3	7
8	8	0	8
9	9	1	9


-- !query 79
WITH cte (x) AS (
        SELECT * FROM range(1, 35, 2)
)
SELECT x, (sum(x) over w)
FROM cte
WINDOW w AS (ORDER BY x rows between 1 preceding and 1 following)
-- !query 79 schema
struct<x:bigint,sum(x) OVER (ORDER BY x ASC NULLS FIRST ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING):bigint>
-- !query 79 output
1	4
11	33
13	39
15	45
17	51
19	57
21	63
23	69
25	75
27	81
29	87
3	9
31	93
33	64
5	15
7	21
9	27


-- !query 80
WITH cte (x) AS (
        SELECT * FROM range(1, 35, 2)
)
SELECT x, (sum(x) over w)
FROM cte
WINDOW w AS (ORDER BY x range between 1 preceding and 1 following)
-- !query 80 schema
struct<x:bigint,sum(x) OVER (ORDER BY x ASC NULLS FIRST RANGE BETWEEN CAST((- 1) AS BIGINT) FOLLOWING AND CAST(1 AS BIGINT) FOLLOWING):bigint>
-- !query 80 output
1	1
11	11
13	13
15	15
17	17
19	19
21	21
23	23
25	25
27	27
29	29
3	3
31	31
33	33
5	5
7	7
9	9


-- !query 81
WITH cte (x) AS (
        SELECT * FROM range(1, 35, 2)
)
SELECT x, (sum(x) over w)
FROM cte
WINDOW w AS (ORDER BY x range between 1 preceding and 1 following)
-- !query 81 schema
struct<x:bigint,sum(x) OVER (ORDER BY x ASC NULLS FIRST RANGE BETWEEN CAST((- 1) AS BIGINT) FOLLOWING AND CAST(1 AS BIGINT) FOLLOWING):bigint>
-- !query 81 output
1	1
11	11
13	13
15	15
17	17
19	19
21	21
23	23
25	25
27	27
29	29
3	3
31	31
33	33
5	5
7	7
9	9


-- !query 82
WITH cte (x) AS (
        select 1 union all select 1 union all select 1 union all
        SELECT * FROM range(5, 49, 2)
)
SELECT x, (sum(x) over w)
FROM cte
WINDOW w AS (ORDER BY x rows between 1 preceding and 1 following)
-- !query 82 schema
struct<x:bigint,sum(x) OVER (ORDER BY x ASC NULLS FIRST ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING):bigint>
-- !query 82 output
1	2
1	3
1	7
11	33
13	39
15	45
17	51
19	57
21	63
23	69
25	75
27	81
29	87
31	93
33	99
35	105
37	111
39	117
41	123
43	129
45	135
47	92
5	13
7	21
9	27


-- !query 83
WITH cte (x) AS (
        select 1 union all select 1 union all select 1 union all
        SELECT * FROM range(5, 49, 2)
)
SELECT x, (sum(x) over w)
FROM cte
WINDOW w AS (ORDER BY x range between 1 preceding and 1 following)
-- !query 83 schema
struct<x:bigint,sum(x) OVER (ORDER BY x ASC NULLS FIRST RANGE BETWEEN CAST((- 1) AS BIGINT) FOLLOWING AND CAST(1 AS BIGINT) FOLLOWING):bigint>
-- !query 83 output
1	3
1	3
1	3
11	11
13	13
15	15
17	17
19	19
21	21
23	23
25	25
27	27
29	29
31	31
33	33
35	35
37	37
39	39
41	41
43	43
45	45
47	47
5	5
7	7
9	9


-- !query 84
WITH cte (x) AS (
        select 1 union all select 1 union all select 1 union all
        SELECT * FROM range(5, 49, 2)
)
SELECT x, (sum(x) over w)
FROM cte
WINDOW w AS (ORDER BY x range between 1 preceding and 1 following)
-- !query 84 schema
struct<x:bigint,sum(x) OVER (ORDER BY x ASC NULLS FIRST RANGE BETWEEN CAST((- 1) AS BIGINT) FOLLOWING AND CAST(1 AS BIGINT) FOLLOWING):bigint>
-- !query 84 output
1	3
1	3
1	3
11	11
13	13
15	15
17	17
19	19
21	21
23	23
25	25
27	27
29	29
31	31
33	33
35	35
37	37
39	39
41	41
43	43
45	45
47	47
5	5
7	7
9	9


-- !query 85
SELECT count(*) OVER (PARTITION BY four) FROM (SELECT * FROM tenk1 UNION ALL SELECT * FROM tenk2)s LIMIT 0
-- !query 85 schema
struct<count(1) OVER (PARTITION BY four ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):bigint>
-- !query 85 output



-- !query 86
create table t1 (f1 int, f2 int) using parquet
-- !query 86 schema
struct<>
-- !query 86 output



-- !query 87
insert into t1 values (1,1),(1,2),(2,2)
-- !query 87 schema
struct<>
-- !query 87 output



-- !query 88
select f1, sum(f1) over (partition by f1 order by f1
                         range between 1 preceding and 1 following)
from t1 where f1 = f2
-- !query 88 schema
struct<f1:int,sum(f1) OVER (PARTITION BY f1 ORDER BY f1 ASC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING):bigint>
-- !query 88 output
1	1
2	2


-- !query 89
explain
select f1, sum(f1) over (partition by f1 order by f2
range between 1 preceding and 1 following)
from t1 where f1 = f2
-- !query 89 schema
struct<plan:string>
-- !query 89 output
== Physical Plan ==
*Project [f1#x, sum(f1) OVER (PARTITION BY f1 ORDER BY f2 ASC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING)#xL]
+- Window [sum(cast(f1#x as bigint)) windowspecdefinition(f1#x, f2#x ASC NULLS FIRST, specifiedwindowframe(RangeFrame, -1, 1)) AS sum(f1) OVER (PARTITION BY f1 ORDER BY f2 ASC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING)#xL], [f1#x], [f2#x ASC NULLS FIRST]
   +- *Sort [f1#x ASC NULLS FIRST, f2#x ASC NULLS FIRST], false, 0
      +- Exchange hashpartitioning(f1#x, 200), true
         +- *Project [f1#x, f2#x]
            +- *Filter ((isnotnull(f1#x) AND isnotnull(f2#x)) AND (f1#x = f2#x))
               +- *ColumnarToRow
                  +- FileScan parquet default.t1[f1#x,f2#x] Batched: true, DataFilters: [isnotnull(f1#x), isnotnull(f2#x), (f1#x = f2#x)], Format: Parquet, Location: InMemoryFileIndex[file:/home/dguedes/Workspace/spark/sql/core/spark-warehouse/org.apache.spark.sq..., PartitionFilters: [], PushedFilters: [IsNotNull(f1), IsNotNull(f2)], ReadSchema: struct<f1:int,f2:int>


-- !query 90
select f1, sum(f1) over (partition by f1 order by f2
                         range between 1 preceding and 1 following)
from t1 where f1 = f2
-- !query 90 schema
struct<f1:int,sum(f1) OVER (PARTITION BY f1 ORDER BY f2 ASC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING):bigint>
-- !query 90 output
1	1
2	2


-- !query 91
select f1, sum(f1) over (partition by f1, f1 order by f2
range between 2 preceding and 1 preceding)
from t1 where f1 = f2
-- !query 91 schema
struct<f1:int,sum(f1) OVER (PARTITION BY f1, f1 ORDER BY f2 ASC NULLS FIRST RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING):bigint>
-- !query 91 output
1	NULL
2	NULL


-- !query 92
select f1, sum(f1) over (partition by f1, f2 order by f2
range between 1 following and 2 following)
from t1 where f1 = f2
-- !query 92 schema
struct<f1:int,sum(f1) OVER (PARTITION BY f1, f2 ORDER BY f2 ASC NULLS FIRST RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING):bigint>
-- !query 92 output
1	NULL
2	NULL


-- !query 93
select f1, sum(f1) over (partition by f1,
f1 order by f2 range between 1 preceding and 1 following)
from t1 where f1 = f2
-- !query 93 schema
struct<f1:int,sum(f1) OVER (PARTITION BY f1, f1 ORDER BY f2 ASC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING):bigint>
-- !query 93 output
1	1
2	2


-- !query 94
explain
select f1, sum(f1) over (partition by f1 order by f2
range between 1 preceding and 1 following)
from t1 where f1 = f2
-- !query 94 schema
struct<plan:string>
-- !query 94 output
== Physical Plan ==
*Project [f1#x, sum(f1) OVER (PARTITION BY f1 ORDER BY f2 ASC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING)#xL]
+- Window [sum(cast(f1#x as bigint)) windowspecdefinition(f1#x, f2#x ASC NULLS FIRST, specifiedwindowframe(RangeFrame, -1, 1)) AS sum(f1) OVER (PARTITION BY f1 ORDER BY f2 ASC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING)#xL], [f1#x], [f2#x ASC NULLS FIRST]
   +- *Sort [f1#x ASC NULLS FIRST, f2#x ASC NULLS FIRST], false, 0
      +- Exchange hashpartitioning(f1#x, 200), true
         +- *Project [f1#x, f2#x]
            +- *Filter ((isnotnull(f1#x) AND isnotnull(f2#x)) AND (f1#x = f2#x))
               +- *ColumnarToRow
                  +- FileScan parquet default.t1[f1#x,f2#x] Batched: true, DataFilters: [isnotnull(f1#x), isnotnull(f2#x), (f1#x = f2#x)], Format: Parquet, Location: InMemoryFileIndex[file:/home/dguedes/Workspace/spark/sql/core/spark-warehouse/org.apache.spark.sq..., PartitionFilters: [], PushedFilters: [IsNotNull(f1), IsNotNull(f2)], ReadSchema: struct<f1:int,f2:int>


-- !query 95
select f1, sum(f1) over (partition by f1 order by f2
range between 1 preceding and 1 following)
from t1 where f1 = f2
-- !query 95 schema
struct<f1:int,sum(f1) OVER (PARTITION BY f1 ORDER BY f2 ASC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING):bigint>
-- !query 95 output
1	1
2	2


-- !query 96
select f1, sum(f1) over (partition by f1, f1 order by f2
range between 2 preceding and 1 preceding)
from t1 where f1 = f2
-- !query 96 schema
struct<f1:int,sum(f1) OVER (PARTITION BY f1, f1 ORDER BY f2 ASC NULLS FIRST RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING):bigint>
-- !query 96 output
1	NULL
2	NULL


-- !query 97
select f1, sum(f1) over (partition by f1, f2 order by f2
range between 1 following and 2 following)
from t1 where f1 = f2
-- !query 97 schema
struct<f1:int,sum(f1) OVER (PARTITION BY f1, f2 ORDER BY f2 ASC NULLS FIRST RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING):bigint>
-- !query 97 output
1	NULL
2	NULL


-- !query 98
SELECT rank() OVER (ORDER BY length('abc'))
-- !query 98 schema
struct<RANK() OVER (ORDER BY length(abc) ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int>
-- !query 98 output
1


-- !query 99
select * from
(select row_number() over (order by salary) rn from empsalary) ss
where rn < 10
-- !query 99 schema
struct<rn:int>
-- !query 99 output
1
2
3
4
5
6
7
8
9


-- !query 100
EXPLAIN
SELECT * FROM
(SELECT depname,
sum(salary) OVER (PARTITION BY depname) depsalary,
min(salary) OVER (PARTITION BY depname || 'A', depname) depminsalary
FROM empsalary) emp
WHERE depname = 'sales'
-- !query 100 schema
struct<plan:string>
-- !query 100 output
== Physical Plan ==
*Project [depname#x, depsalary#xL, depminsalary#x]
+- Window [min(salary#x) windowspecdefinition(_w1#x, depname#x, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS depminsalary#x], [_w1#x, depname#x]
   +- *Sort [_w1#x ASC NULLS FIRST, depname#x ASC NULLS FIRST], false, 0
      +- Window [sum(cast(salary#x as bigint)) windowspecdefinition(depname#x, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS depsalary#xL], [depname#x]
         +- *Sort [depname#x ASC NULLS FIRST], false, 0
            +- Exchange hashpartitioning(depname#x, 200), true
               +- *Project [depname#x, salary#x, concat(depname#x, A) AS _w1#x]
                  +- *Filter (isnotnull(depname#x) AND (depname#x = sales))
                     +- *ColumnarToRow
                        +- FileScan parquet default.empsalary[depname#x,salary#x] Batched: true, DataFilters: [isnotnull(depname#x), (depname#x = sales)], Format: Parquet, Location: InMemoryFileIndex[file:/home/dguedes/Workspace/spark/sql/core/spark-warehouse/org.apache.spark.sq..., PartitionFilters: [], PushedFilters: [IsNotNull(depname), EqualTo(depname,sales)], ReadSchema: struct<depname:string,salary:int>


-- !query 101
EXPLAIN
SELECT * FROM
(SELECT depname,
sum(salary) OVER (PARTITION BY enroll_date) enroll_salary,
min(salary) OVER (PARTITION BY depname) depminsalary
FROM empsalary) emp
WHERE depname = 'sales'
-- !query 101 schema
struct<plan:string>
-- !query 101 output
== Physical Plan ==
*Project [depname#x, enroll_salary#xL, depminsalary#x]
+- *Filter (isnotnull(depname#x) AND (depname#x = sales))
   +- Window [sum(cast(salary#x as bigint)) windowspecdefinition(enroll_date#x, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS enroll_salary#xL], [enroll_date#x]
      +- *Sort [enroll_date#x ASC NULLS FIRST], false, 0
         +- Exchange hashpartitioning(enroll_date#x, 200), true
            +- Window [min(salary#x) windowspecdefinition(depname#x, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS depminsalary#x], [depname#x]
               +- *Sort [depname#x ASC NULLS FIRST], false, 0
                  +- Exchange hashpartitioning(depname#x, 200), true
                     +- *Project [depname#x, salary#x, enroll_date#x]
                        +- *ColumnarToRow
                           +- FileScan parquet default.empsalary[depname#x,salary#x,enroll_date#x] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex[file:/home/dguedes/Workspace/spark/sql/core/spark-warehouse/org.apache.spark.sq..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<depname:string,salary:int,enroll_date:date>


-- !query 102
EXPLAIN
SELECT * FROM
(SELECT depname,
sum(salary) OVER (PARTITION BY depname order by empno) depsalary,
min(salary) OVER (PARTITION BY depname, empno order by enroll_date) depminsalary
FROM empsalary) emp
WHERE depname = 'sales'
-- !query 102 schema
struct<plan:string>
-- !query 102 output
== Physical Plan ==
*Project [depname#x, depsalary#xL, depminsalary#x]
+- Window [min(salary#x) windowspecdefinition(depname#x, empno#x, enroll_date#x ASC NULLS FIRST, specifiedwindowframe(RangeFrame, unboundedpreceding$(), currentrow$())) AS depminsalary#x], [depname#x, empno#x], [enroll_date#x ASC NULLS FIRST]
   +- *Sort [depname#x ASC NULLS FIRST, empno#x ASC NULLS FIRST, enroll_date#x ASC NULLS FIRST], false, 0
      +- Window [sum(cast(salary#x as bigint)) windowspecdefinition(depname#x, empno#x ASC NULLS FIRST, specifiedwindowframe(RangeFrame, unboundedpreceding$(), currentrow$())) AS depsalary#xL], [depname#x], [empno#x ASC NULLS FIRST]
         +- *Sort [depname#x ASC NULLS FIRST, empno#x ASC NULLS FIRST], false, 0
            +- Exchange hashpartitioning(depname#x, 200), true
               +- *Project [depname#x, salary#x, empno#x, enroll_date#x]
                  +- *Filter (isnotnull(depname#x) AND (depname#x = sales))
                     +- *ColumnarToRow
                        +- FileScan parquet default.empsalary[depname#x,empno#x,salary#x,enroll_date#x] Batched: true, DataFilters: [isnotnull(depname#x), (depname#x = sales)], Format: Parquet, Location: InMemoryFileIndex[file:/home/dguedes/Workspace/spark/sql/core/spark-warehouse/org.apache.spark.sq..., PartitionFilters: [], PushedFilters: [IsNotNull(depname), EqualTo(depname,sales)], ReadSchema: struct<depname:string,empno:int,salary:int,enroll_date:date>


-- !query 103
EXPLAIN
SELECT
lead(1) OVER (PARTITION BY depname ORDER BY salary, enroll_date),
lag(1) OVER (PARTITION BY depname ORDER BY salary,enroll_date,empno)
FROM empsalary
-- !query 103 schema
struct<plan:string>
-- !query 103 output
== Physical Plan ==
*Project [lead(1, 1, NULL) OVER (PARTITION BY depname ORDER BY salary ASC NULLS FIRST, enroll_date ASC NULLS FIRST ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING)#x, lag(1, 1, NULL) OVER (PARTITION BY depname ORDER BY salary ASC NULLS FIRST, enroll_date ASC NULLS FIRST, empno ASC NULLS FIRST ROWS BETWEEN -1 FOLLOWING AND -1 FOLLOWING)#x]
+- Window [lead(1, 1, null) windowspecdefinition(depname#x, salary#x ASC NULLS FIRST, enroll_date#x ASC NULLS FIRST, specifiedwindowframe(RowFrame, 1, 1)) AS lead(1, 1, NULL) OVER (PARTITION BY depname ORDER BY salary ASC NULLS FIRST, enroll_date ASC NULLS FIRST ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING)#x], [depname#x], [salary#x ASC NULLS FIRST, enroll_date#x ASC NULLS FIRST]
   +- *Project [depname#x, salary#x, enroll_date#x, lag(1, 1, NULL) OVER (PARTITION BY depname ORDER BY salary ASC NULLS FIRST, enroll_date ASC NULLS FIRST, empno ASC NULLS FIRST ROWS BETWEEN -1 FOLLOWING AND -1 FOLLOWING)#x]
      +- Window [lag(1, 1, null) windowspecdefinition(depname#x, salary#x ASC NULLS FIRST, enroll_date#x ASC NULLS FIRST, empno#x ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)) AS lag(1, 1, NULL) OVER (PARTITION BY depname ORDER BY salary ASC NULLS FIRST, enroll_date ASC NULLS FIRST, empno ASC NULLS FIRST ROWS BETWEEN -1 FOLLOWING AND -1 FOLLOWING)#x], [depname#x], [salary#x ASC NULLS FIRST, enroll_date#x ASC NULLS FIRST, empno#x ASC NULLS FIRST]
         +- *Sort [depname#x ASC NULLS FIRST, salary#x ASC NULLS FIRST, enroll_date#x ASC NULLS FIRST, empno#x ASC NULLS FIRST], false, 0
            +- Exchange hashpartitioning(depname#x, 200), true
               +- *Project [depname#x, salary#x, enroll_date#x, empno#x]
                  +- *ColumnarToRow
                     +- FileScan parquet default.empsalary[depname#x,empno#x,salary#x,enroll_date#x] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex[file:/home/dguedes/Workspace/spark/sql/core/spark-warehouse/org.apache.spark.sq..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<depname:string,empno:int,salary:int,enroll_date:date>


-- !query 104
SELECT i,AVG(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)
-- !query 104 schema
struct<i:int,avg(v) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 104 output
1	1.5
2	2.0
3	NULL
4	NULL


-- !query 105
SELECT i,AVG(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)
-- !query 105 schema
struct<i:int,avg(v) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 105 output
1	1.5
2	2.0
3	NULL
4	NULL


-- !query 106
SELECT i,AVG(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)
-- !query 106 schema
struct<i:int,avg(v) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 106 output
1	1.5
2	2.0
3	NULL
4	NULL


-- !query 107
SELECT i,AVG(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1.5),(2,2.5),(3,NULL),(4,NULL)) t(i,v)
-- !query 107 schema
struct<i:int,avg(v) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):decimal(6,5)>
-- !query 107 output
1	2
2	2.5
3	NULL
4	NULL


-- !query 108
SELECT i,AVG(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,'1 sec'),(2,'2 sec'),(3,NULL),(4,NULL)) t(i,v)
-- !query 108 schema
struct<i:int,avg(CAST(v AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 108 output
1	NULL
2	NULL
3	NULL
4	NULL


-- !query 109
SELECT i,SUM(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)
-- !query 109 schema
struct<i:int,sum(v) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):bigint>
-- !query 109 output
1	3
2	2
3	NULL
4	NULL


-- !query 110
SELECT i,SUM(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)
-- !query 110 schema
struct<i:int,sum(v) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):bigint>
-- !query 110 output
1	3
2	2
3	NULL
4	NULL


-- !query 111
SELECT i,SUM(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)
-- !query 111 schema
struct<i:int,sum(v) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):bigint>
-- !query 111 output
1	3
2	2
3	NULL
4	NULL


-- !query 112
SELECT i,SUM(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,'1.10'),(2,'2.20'),(3,NULL),(4,NULL)) t(i,v)
-- !query 112 schema
struct<i:int,sum(CAST(v AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 112 output
1	3.3000000000000003
2	2.2
3	NULL
4	NULL


-- !query 113
SELECT i,SUM(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,'1 sec'),(2,'2 sec'),(3,NULL),(4,NULL)) t(i,v)
-- !query 113 schema
struct<i:int,sum(CAST(v AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 113 output
1	NULL
2	NULL
3	NULL
4	NULL


-- !query 114
SELECT i,SUM(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1.1),(2,2.2),(3,NULL),(4,NULL)) t(i,v)
-- !query 114 schema
struct<i:int,sum(v) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):decimal(12,1)>
-- !query 114 output
1	3.3
2	2.2
3	NULL
4	NULL


-- !query 115
SELECT SUM(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1.01),(2,2),(3,3)) v(i,n)
-- !query 115 schema
struct<sum(n) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):decimal(22,2)>
-- !query 115 output
3
5
6.01


-- !query 116
SELECT i,COUNT(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)
-- !query 116 schema
struct<i:int,count(v) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):bigint>
-- !query 116 output
1	2
2	1
3	0
4	0


-- !query 117
SELECT i,COUNT(*) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)
-- !query 117 schema
struct<i:int,count(1) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):bigint>
-- !query 117 output
1	4
2	3
3	2
4	1


-- !query 118
SELECT VAR_POP(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
-- !query 118 schema
struct<var_pop(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 118 output
0.0
11266.666666666666
13868.750000000002
21703.999999999996
4225.0


-- !query 119
SELECT VAR_POP(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
-- !query 119 schema
struct<var_pop(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 119 output
0.0
11266.666666666666
13868.750000000002
21703.999999999996
4225.0


-- !query 120
SELECT VAR_POP(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
-- !query 120 schema
struct<var_pop(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 120 output
0.0
11266.666666666666
13868.750000000002
21703.999999999996
4225.0


-- !query 121
SELECT VAR_POP(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
-- !query 121 schema
struct<var_pop(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 121 output
0.0
11266.666666666666
13868.750000000002
21703.999999999996
4225.0


-- !query 122
SELECT VAR_SAMP(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
-- !query 122 schema
struct<var_samp(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 122 output
16900.0
18491.666666666668
27129.999999999996
8450.0
NaN


-- !query 123
SELECT VAR_SAMP(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
-- !query 123 schema
struct<var_samp(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 123 output
16900.0
18491.666666666668
27129.999999999996
8450.0
NaN


-- !query 124
SELECT VAR_SAMP(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
-- !query 124 schema
struct<var_samp(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 124 output
16900.0
18491.666666666668
27129.999999999996
8450.0
NaN


-- !query 125
SELECT VAR_SAMP(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
-- !query 125 schema
struct<var_samp(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 125 output
16900.0
18491.666666666668
27129.999999999996
8450.0
NaN


-- !query 126
SELECT VARIANCE(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
-- !query 126 schema
struct<var_samp(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 126 output
16900.0
18491.666666666668
27129.999999999996
8450.0
NaN


-- !query 127
SELECT VARIANCE(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
-- !query 127 schema
struct<var_samp(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 127 output
16900.0
18491.666666666668
27129.999999999996
8450.0
NaN


-- !query 128
SELECT VARIANCE(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
-- !query 128 schema
struct<var_samp(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 128 output
16900.0
18491.666666666668
27129.999999999996
8450.0
NaN


-- !query 129
SELECT VARIANCE(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
-- !query 129 schema
struct<var_samp(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 129 output
16900.0
18491.666666666668
27129.999999999996
8450.0
NaN


-- !query 130
SELECT STDDEV_POP(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)
-- !query 130 schema
struct<stddev_pop(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 130 output
0.0
106.14455552060438
117.76565713313879
147.32277488562315
147.32277488562315
65.0


-- !query 131
SELECT STDDEV_POP(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)
-- !query 131 schema
struct<stddev_pop(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 131 output
0.0
106.14455552060438
117.76565713313879
147.32277488562315
147.32277488562315
65.0


-- !query 132
SELECT STDDEV_POP(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)
-- !query 132 schema
struct<stddev_pop(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 132 output
0.0
106.14455552060438
117.76565713313879
147.32277488562315
147.32277488562315
65.0


-- !query 133
SELECT STDDEV_POP(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)
-- !query 133 schema
struct<stddev_pop(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 133 output
0.0
106.14455552060438
117.76565713313879
147.32277488562315
147.32277488562315
65.0


-- !query 134
SELECT STDDEV_SAMP(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)
-- !query 134 schema
struct<stddev_samp(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 134 output
130.0
135.9840676942217
164.7118696390761
164.7118696390761
91.92388155425118
NaN


-- !query 135
SELECT STDDEV_SAMP(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)
-- !query 135 schema
struct<stddev_samp(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 135 output
130.0
135.9840676942217
164.7118696390761
164.7118696390761
91.92388155425118
NaN


-- !query 136
SELECT STDDEV_SAMP(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)
-- !query 136 schema
struct<stddev_samp(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 136 output
130.0
135.9840676942217
164.7118696390761
164.7118696390761
91.92388155425118
NaN


-- !query 137
SELECT STDDEV_SAMP(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)
-- !query 137 schema
struct<stddev_samp(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 137 output
130.0
135.9840676942217
164.7118696390761
164.7118696390761
91.92388155425118
NaN


-- !query 138
SELECT STDDEV(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
-- !query 138 schema
struct<stddev_samp(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 138 output
130.0
135.9840676942217
164.7118696390761
164.7118696390761
91.92388155425118
NaN


-- !query 139
SELECT STDDEV(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
-- !query 139 schema
struct<stddev_samp(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 139 output
130.0
135.9840676942217
164.7118696390761
164.7118696390761
91.92388155425118
NaN


-- !query 140
SELECT STDDEV(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
-- !query 140 schema
struct<stddev_samp(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 140 output
130.0
135.9840676942217
164.7118696390761
164.7118696390761
91.92388155425118
NaN


-- !query 141
SELECT STDDEV(n) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)
-- !query 141 schema
struct<stddev_samp(CAST(n AS DOUBLE)) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING):double>
-- !query 141 output
130.0
135.9840676942217
164.7118696390761
164.7118696390761
91.92388155425118
NaN


-- !query 142
SELECT i,SUM(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND CURRENT ROW)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)
-- !query 142 schema
struct<i:int,sum(v) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND CURRENT ROW):bigint>
-- !query 142 output
1	1
2	2
3	NULL
4	NULL


-- !query 143
SELECT i,SUM(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)
-- !query 143 schema
struct<i:int,sum(v) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING):bigint>
-- !query 143 output
1	3
2	2
3	NULL
4	NULL


-- !query 144
SELECT i,SUM(v) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,3),(4,4)) t(i,v)
-- !query 144 schema
struct<i:int,sum(v) OVER (ORDER BY i ASC NULLS FIRST ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING):bigint>
-- !query 144 output
1	3
2	6
3	9
4	7


-- !query 145
drop table empsalary
-- !query 145 schema
struct<>
-- !query 145 output



-- !query 146
drop table t1
-- !query 146 schema
struct<>
-- !query 146 output



-- !query 147
drop view int4_tbl
-- !query 147 schema
struct<>
-- !query 147 output

