== Parsed Logical Plan ==
'GlobalLimit 100
+- 'LocalLimit 100
   +- 'Sort ['i_item_id ASC NULLS FIRST], true
      +- 'Aggregate ['i_item_id], ['i_item_id, 'avg('cs_quantity) AS agg1#1, 'avg('cs_list_price) AS agg2#2, 'avg('cs_coupon_amt) AS agg3#3, 'avg('cs_sales_price) AS agg4#4]
         +- 'Filter ((((('cs_sold_date_sk = 'd_date_sk) AND ('cs_item_sk = 'i_item_sk)) AND ('cs_bill_cdemo_sk = 'cd_demo_sk)) AND (('cs_promo_sk = 'p_promo_sk) AND ('cd_gender = M))) AND ((('cd_marital_status = S) AND ('cd_education_status = College)) AND ((('p_channel_email = N) OR ('p_channel_event = N)) AND ('d_year = 2000))))
            +- 'Join Inner
               :- 'Join Inner
               :  :- 'Join Inner
               :  :  :- 'Join Inner
               :  :  :  :- 'UnresolvedRelation [catalog_sales]
               :  :  :  +- 'UnresolvedRelation [customer_demographics]
               :  :  +- 'UnresolvedRelation [date_dim]
               :  +- 'UnresolvedRelation [item]
               +- 'UnresolvedRelation [promotion]

== Analyzed Logical Plan ==
i_item_id: string, agg1: double, agg2: decimal(11,6), agg3: decimal(11,6), agg4: decimal(11,6)
GlobalLimit 100
+- LocalLimit 100
   +- Project [i_item_id#5, agg1#1, agg2#2, agg3#3, agg4#4]
      +- Sort [i_item_id#5 ASC NULLS FIRST], true
         +- Aggregate [i_item_id#5], [i_item_id#5, avg(cast(cs_quantity#6 as bigint)) AS agg1#1, avg(cs_list_price#7) AS agg2#2, avg(cs_coupon_amt#8) AS agg3#3, avg(cs_sales_price#9) AS agg4#4]
            +- Filter (((((cs_sold_date_sk#10 = d_date_sk#11) AND (cs_item_sk#12 = i_item_sk#13)) AND (cs_bill_cdemo_sk#14 = cd_demo_sk#15)) AND ((cs_promo_sk#16 = p_promo_sk#17) AND (cd_gender#18 = M))) AND (((cd_marital_status#19 = S) AND (cd_education_status#20 = College)) AND (((p_channel_email#21 = N) OR (p_channel_event#22 = N)) AND (d_year#23 = 2000))))
               +- Join Inner
                  :- Join Inner
                  :  :- Join Inner
                  :  :  :- Join Inner
                  :  :  :  :- SubqueryAlias spark_catalog.default.catalog_sales
                  :  :  :  :  +- Relation[cs_sold_date_sk#10,cs_sold_time_sk#24,cs_ship_date_sk#25,cs_bill_customer_sk#26,cs_bill_cdemo_sk#14,cs_bill_hdemo_sk#27,cs_bill_addr_sk#28,cs_ship_customer_sk#29,cs_ship_cdemo_sk#30,cs_ship_hdemo_sk#31,cs_ship_addr_sk#32,cs_call_center_sk#33,cs_catalog_page_sk#34,cs_ship_mode_sk#35,cs_warehouse_sk#36,cs_item_sk#12,cs_promo_sk#16,cs_order_number#37,cs_quantity#6,cs_wholesale_cost#38,cs_list_price#7,cs_sales_price#9,cs_ext_discount_amt#39,cs_ext_sales_price#40,... 10 more fields] parquet
                  :  :  :  +- SubqueryAlias spark_catalog.default.customer_demographics
                  :  :  :     +- Relation[cd_demo_sk#15,cd_gender#18,cd_marital_status#19,cd_education_status#20,cd_purchase_estimate#41,cd_credit_rating#42,cd_dep_count#43,cd_dep_employed_count#44,cd_dep_college_count#45] parquet
                  :  :  +- SubqueryAlias spark_catalog.default.date_dim
                  :  :     +- Relation[d_date_sk#11,d_date_id#46,d_date#47,d_month_seq#48,d_week_seq#49,d_quarter_seq#50,d_year#23,d_dow#51,d_moy#52,d_dom#53,d_qoy#54,d_fy_year#55,d_fy_quarter_seq#56,d_fy_week_seq#57,d_day_name#58,d_quarter_name#59,d_holiday#60,d_weekend#61,d_following_holiday#62,d_first_dom#63,d_last_dom#64,d_same_day_ly#65,d_same_day_lq#66,d_current_day#67,... 4 more fields] parquet
                  :  +- SubqueryAlias spark_catalog.default.item
                  :     +- Relation[i_item_sk#13,i_item_id#5,i_rec_start_date#68,i_rec_end_date#69,i_item_desc#70,i_current_price#71,i_wholesale_cost#72,i_brand_id#73,i_brand#74,i_class_id#75,i_class#76,i_category_id#77,i_category#78,i_manufact_id#79,i_manufact#80,i_size#81,i_formulation#82,i_color#83,i_units#84,i_container#85,i_manager_id#86,i_product_name#87] parquet
                  +- SubqueryAlias spark_catalog.default.promotion
                     +- Relation[p_promo_sk#17,p_promo_id#88,p_start_date_sk#89,p_end_date_sk#90,p_item_sk#91,p_cost#92,p_response_target#93,p_promo_name#94,p_channel_dmail#95,p_channel_email#21,p_channel_catalog#96,p_channel_tv#97,p_channel_radio#98,p_channel_press#99,p_channel_event#22,p_channel_demo#100,p_channel_details#101,p_purpose#102,p_discount_active#103] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Sort [i_item_id#5 ASC NULLS FIRST], true
      +- Aggregate [i_item_id#5], [i_item_id#5, avg(cast(cs_quantity#6 as bigint)) AS agg1#1, cast((avg(UnscaledValue(cs_list_price#7)) / 100.0) as decimal(11,6)) AS agg2#2, cast((avg(UnscaledValue(cs_coupon_amt#8)) / 100.0) as decimal(11,6)) AS agg3#3, cast((avg(UnscaledValue(cs_sales_price#9)) / 100.0) as decimal(11,6)) AS agg4#4]
         +- Project [cs_quantity#6, cs_list_price#7, cs_sales_price#9, cs_coupon_amt#8, i_item_id#5]
            +- Join Inner, (cs_promo_sk#16 = p_promo_sk#17)
               :- Project [cs_promo_sk#16, cs_quantity#6, cs_list_price#7, cs_sales_price#9, cs_coupon_amt#8, i_item_id#5]
               :  +- Join Inner, (cs_item_sk#12 = i_item_sk#13)
               :     :- Project [cs_item_sk#12, cs_promo_sk#16, cs_quantity#6, cs_list_price#7, cs_sales_price#9, cs_coupon_amt#8]
               :     :  +- Join Inner, (cs_sold_date_sk#10 = d_date_sk#11)
               :     :     :- Project [cs_sold_date_sk#10, cs_item_sk#12, cs_promo_sk#16, cs_quantity#6, cs_list_price#7, cs_sales_price#9, cs_coupon_amt#8]
               :     :     :  +- Join Inner, (cs_bill_cdemo_sk#14 = cd_demo_sk#15)
               :     :     :     :- Project [cs_sold_date_sk#10, cs_bill_cdemo_sk#14, cs_item_sk#12, cs_promo_sk#16, cs_quantity#6, cs_list_price#7, cs_sales_price#9, cs_coupon_amt#8]
               :     :     :     :  +- Filter (((isnotnull(cs_bill_cdemo_sk#14) AND isnotnull(cs_sold_date_sk#10)) AND isnotnull(cs_item_sk#12)) AND isnotnull(cs_promo_sk#16))
               :     :     :     :     +- Relation[cs_sold_date_sk#10,cs_sold_time_sk#24,cs_ship_date_sk#25,cs_bill_customer_sk#26,cs_bill_cdemo_sk#14,cs_bill_hdemo_sk#27,cs_bill_addr_sk#28,cs_ship_customer_sk#29,cs_ship_cdemo_sk#30,cs_ship_hdemo_sk#31,cs_ship_addr_sk#32,cs_call_center_sk#33,cs_catalog_page_sk#34,cs_ship_mode_sk#35,cs_warehouse_sk#36,cs_item_sk#12,cs_promo_sk#16,cs_order_number#37,cs_quantity#6,cs_wholesale_cost#38,cs_list_price#7,cs_sales_price#9,cs_ext_discount_amt#39,cs_ext_sales_price#40,... 10 more fields] parquet
               :     :     :     +- Project [cd_demo_sk#15]
               :     :     :        +- Filter ((((((isnotnull(cd_marital_status#19) AND isnotnull(cd_gender#18)) AND isnotnull(cd_education_status#20)) AND (cd_gender#18 = M)) AND (cd_marital_status#19 = S)) AND (cd_education_status#20 = College)) AND isnotnull(cd_demo_sk#15))
               :     :     :           +- Relation[cd_demo_sk#15,cd_gender#18,cd_marital_status#19,cd_education_status#20,cd_purchase_estimate#41,cd_credit_rating#42,cd_dep_count#43,cd_dep_employed_count#44,cd_dep_college_count#45] parquet
               :     :     +- Project [d_date_sk#11]
               :     :        +- Filter ((isnotnull(d_year#23) AND (d_year#23 = 2000)) AND isnotnull(d_date_sk#11))
               :     :           +- Relation[d_date_sk#11,d_date_id#46,d_date#47,d_month_seq#48,d_week_seq#49,d_quarter_seq#50,d_year#23,d_dow#51,d_moy#52,d_dom#53,d_qoy#54,d_fy_year#55,d_fy_quarter_seq#56,d_fy_week_seq#57,d_day_name#58,d_quarter_name#59,d_holiday#60,d_weekend#61,d_following_holiday#62,d_first_dom#63,d_last_dom#64,d_same_day_ly#65,d_same_day_lq#66,d_current_day#67,... 4 more fields] parquet
               :     +- Project [i_item_sk#13, i_item_id#5]
               :        +- Filter isnotnull(i_item_sk#13)
               :           +- Relation[i_item_sk#13,i_item_id#5,i_rec_start_date#68,i_rec_end_date#69,i_item_desc#70,i_current_price#71,i_wholesale_cost#72,i_brand_id#73,i_brand#74,i_class_id#75,i_class#76,i_category_id#77,i_category#78,i_manufact_id#79,i_manufact#80,i_size#81,i_formulation#82,i_color#83,i_units#84,i_container#85,i_manager_id#86,i_product_name#87] parquet
               +- Project [p_promo_sk#17]
                  +- Filter (((p_channel_email#21 = N) OR (p_channel_event#22 = N)) AND isnotnull(p_promo_sk#17))
                     +- Relation[p_promo_sk#17,p_promo_id#88,p_start_date_sk#89,p_end_date_sk#90,p_item_sk#91,p_cost#92,p_response_target#93,p_promo_name#94,p_channel_dmail#95,p_channel_email#21,p_channel_catalog#96,p_channel_tv#97,p_channel_radio#98,p_channel_press#99,p_channel_event#22,p_channel_demo#100,p_channel_details#101,p_purpose#102,p_discount_active#103] parquet

== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[i_item_id#5 ASC NULLS FIRST], output=[i_item_id#5,agg1#1,agg2#2,agg3#3,agg4#4])
+- *(6) HashAggregate(keys=[i_item_id#5], functions=[avg(cast(cs_quantity#6 as bigint)), avg(UnscaledValue(cs_list_price#7)), avg(UnscaledValue(cs_coupon_amt#8)), avg(UnscaledValue(cs_sales_price#9))], output=[i_item_id#5, agg1#1, agg2#2, agg3#3, agg4#4])
   +- Exchange hashpartitioning(i_item_id#5, 5), true, [id=#104]
      +- *(5) HashAggregate(keys=[i_item_id#5], functions=[partial_avg(cast(cs_quantity#6 as bigint)), partial_avg(UnscaledValue(cs_list_price#7)), partial_avg(UnscaledValue(cs_coupon_amt#8)), partial_avg(UnscaledValue(cs_sales_price#9))], output=[i_item_id#5, sum#105, count#106, sum#107, count#108, sum#109, count#110, sum#111, count#112])
         +- *(5) Project [cs_quantity#6, cs_list_price#7, cs_sales_price#9, cs_coupon_amt#8, i_item_id#5]
            +- *(5) BroadcastHashJoin [cs_promo_sk#16], [p_promo_sk#17], Inner, BuildRight, false
               :- *(5) Project [cs_promo_sk#16, cs_quantity#6, cs_list_price#7, cs_sales_price#9, cs_coupon_amt#8, i_item_id#5]
               :  +- *(5) BroadcastHashJoin [cs_item_sk#12], [i_item_sk#13], Inner, BuildRight, false
               :     :- *(5) Project [cs_item_sk#12, cs_promo_sk#16, cs_quantity#6, cs_list_price#7, cs_sales_price#9, cs_coupon_amt#8]
               :     :  +- *(5) BroadcastHashJoin [cs_sold_date_sk#10], [d_date_sk#11], Inner, BuildRight, false
               :     :     :- *(5) Project [cs_sold_date_sk#10, cs_item_sk#12, cs_promo_sk#16, cs_quantity#6, cs_list_price#7, cs_sales_price#9, cs_coupon_amt#8]
               :     :     :  +- *(5) BroadcastHashJoin [cs_bill_cdemo_sk#14], [cd_demo_sk#15], Inner, BuildRight, false
               :     :     :     :- *(5) Filter (((isnotnull(cs_bill_cdemo_sk#14) AND isnotnull(cs_sold_date_sk#10)) AND isnotnull(cs_item_sk#12)) AND isnotnull(cs_promo_sk#16))
               :     :     :     :  +- *(5) ColumnarToRow
               :     :     :     :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#10,cs_bill_cdemo_sk#14,cs_item_sk#12,cs_promo_sk#16,cs_quantity#6,cs_list_price#7,cs_sales_price#9,cs_coupon_amt#8] Batched: true, DataFilters: [isnotnull(cs_bill_cdemo_sk#14), isnotnull(cs_sold_date_sk#10), isnotnull(cs_item_sk#12), isno..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk), IsNotNull(cs_pro..., ReadSchema: struct<cs_sold_date_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_quantity:int,cs...
               :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#113]
               :     :     :        +- *(1) Project [cd_demo_sk#15]
               :     :     :           +- *(1) Filter ((((((isnotnull(cd_marital_status#19) AND isnotnull(cd_gender#18)) AND isnotnull(cd_education_status#20)) AND (cd_gender#18 = M)) AND (cd_marital_status#19 = S)) AND (cd_education_status#20 = College)) AND isnotnull(cd_demo_sk#15))
               :     :     :              +- *(1) ColumnarToRow
               :     :     :                 +- FileScan parquet default.customer_demographics[cd_demo_sk#15,cd_gender#18,cd_marital_status#19,cd_education_status#20] Batched: true, DataFilters: [isnotnull(cd_marital_status#19), isnotnull(cd_gender#18), isnotnull(cd_education_status#20), ..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(cd_marital_status), IsNotNull(cd_gender), IsNotNull(cd_education_status), EqualTo(cd_g..., ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>
               :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#114]
               :     :        +- *(2) Project [d_date_sk#11]
               :     :           +- *(2) Filter ((isnotnull(d_year#23) AND (d_year#23 = 2000)) AND isnotnull(d_date_sk#11))
               :     :              +- *(2) ColumnarToRow
               :     :                 +- FileScan parquet default.date_dim[d_date_sk#11,d_year#23] Batched: true, DataFilters: [isnotnull(d_year#23), (d_year#23 = 2000), isnotnull(d_date_sk#11)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#115]
               :        +- *(3) Filter isnotnull(i_item_sk#13)
               :           +- *(3) ColumnarToRow
               :              +- FileScan parquet default.item[i_item_sk#13,i_item_id#5] Batched: true, DataFilters: [isnotnull(i_item_sk#13)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#116]
                  +- *(4) Project [p_promo_sk#17]
                     +- *(4) Filter (((p_channel_email#21 = N) OR (p_channel_event#22 = N)) AND isnotnull(p_promo_sk#17))
                        +- *(4) ColumnarToRow
                           +- FileScan parquet default.promotion[p_promo_sk#17,p_channel_email#21,p_channel_event#22] Batched: true, DataFilters: [((p_channel_email#21 = N) OR (p_channel_event#22 = N)), isnotnull(p_promo_sk#17)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [Or(EqualTo(p_channel_email,N),EqualTo(p_channel_event,N)), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_email:string,p_channel_event:string>
