== Parsed Logical Plan ==
CTE [year_total]
:  +- 'SubqueryAlias year_total
:     +- 'Union false, false
:        :- 'Union false, false
:        :  :- 'Aggregate ['c_customer_id, 'c_first_name, 'c_last_name, 'c_preferred_cust_flag, 'c_birth_country, 'c_login, 'c_email_address, 'd_year], ['c_customer_id AS customer_id#1, 'c_first_name AS customer_first_name#2, 'c_last_name AS customer_last_name#3, 'c_preferred_cust_flag AS customer_preferred_cust_flag#4, 'c_birth_country AS customer_birth_country#5, 'c_login AS customer_login#6, 'c_email_address AS customer_email_address#7, 'd_year AS dyear#8, 'sum((((('ss_ext_list_price - 'ss_ext_wholesale_cost) - 'ss_ext_discount_amt) + 'ss_ext_sales_price) / 2)) AS year_total#9, s AS sale_type#10]
:        :  :  +- 'Filter (('c_customer_sk = 'ss_customer_sk) AND ('ss_sold_date_sk = 'd_date_sk))
:        :  :     +- 'Join Inner
:        :  :        :- 'Join Inner
:        :  :        :  :- 'UnresolvedRelation [customer]
:        :  :        :  +- 'UnresolvedRelation [store_sales]
:        :  :        +- 'UnresolvedRelation [date_dim]
:        :  +- 'Aggregate ['c_customer_id, 'c_first_name, 'c_last_name, 'c_preferred_cust_flag, 'c_birth_country, 'c_login, 'c_email_address, 'd_year], ['c_customer_id AS customer_id#11, 'c_first_name AS customer_first_name#12, 'c_last_name AS customer_last_name#13, 'c_preferred_cust_flag AS customer_preferred_cust_flag#14, 'c_birth_country AS customer_birth_country#15, 'c_login AS customer_login#16, 'c_email_address AS customer_email_address#17, 'd_year AS dyear#18, 'sum((((('cs_ext_list_price - 'cs_ext_wholesale_cost) - 'cs_ext_discount_amt) + 'cs_ext_sales_price) / 2)) AS year_total#19, c AS sale_type#20]
:        :     +- 'Filter (('c_customer_sk = 'cs_bill_customer_sk) AND ('cs_sold_date_sk = 'd_date_sk))
:        :        +- 'Join Inner
:        :           :- 'Join Inner
:        :           :  :- 'UnresolvedRelation [customer]
:        :           :  +- 'UnresolvedRelation [catalog_sales]
:        :           +- 'UnresolvedRelation [date_dim]
:        +- 'Aggregate ['c_customer_id, 'c_first_name, 'c_last_name, 'c_preferred_cust_flag, 'c_birth_country, 'c_login, 'c_email_address, 'd_year], ['c_customer_id AS customer_id#21, 'c_first_name AS customer_first_name#22, 'c_last_name AS customer_last_name#23, 'c_preferred_cust_flag AS customer_preferred_cust_flag#24, 'c_birth_country AS customer_birth_country#25, 'c_login AS customer_login#26, 'c_email_address AS customer_email_address#27, 'd_year AS dyear#28, 'sum((((('ws_ext_list_price - 'ws_ext_wholesale_cost) - 'ws_ext_discount_amt) + 'ws_ext_sales_price) / 2)) AS year_total#29, w AS sale_type#30]
:           +- 'Filter (('c_customer_sk = 'ws_bill_customer_sk) AND ('ws_sold_date_sk = 'd_date_sk))
:              +- 'Join Inner
:                 :- 'Join Inner
:                 :  :- 'UnresolvedRelation [customer]
:                 :  +- 'UnresolvedRelation [web_sales]
:                 +- 'UnresolvedRelation [date_dim]
+- 'GlobalLimit 100
   +- 'LocalLimit 100
      +- 'Sort ['t_s_secyear.customer_id ASC NULLS FIRST, 't_s_secyear.customer_first_name ASC NULLS FIRST, 't_s_secyear.customer_last_name ASC NULLS FIRST, 't_s_secyear.customer_preferred_cust_flag ASC NULLS FIRST, 't_s_secyear.customer_birth_country ASC NULLS FIRST, 't_s_secyear.customer_login ASC NULLS FIRST, 't_s_secyear.customer_email_address ASC NULLS FIRST], true
         +- 'Project ['t_s_secyear.customer_id, 't_s_secyear.customer_first_name, 't_s_secyear.customer_last_name, 't_s_secyear.customer_preferred_cust_flag, 't_s_secyear.customer_birth_country, 't_s_secyear.customer_login, 't_s_secyear.customer_email_address]
            +- 'Filter (((((('t_s_secyear.customer_id = 't_s_firstyear.customer_id) AND ('t_s_firstyear.customer_id = 't_c_secyear.customer_id)) AND ('t_s_firstyear.customer_id = 't_c_firstyear.customer_id)) AND ((('t_s_firstyear.customer_id = 't_w_firstyear.customer_id) AND ('t_s_firstyear.customer_id = 't_w_secyear.customer_id)) AND ('t_s_firstyear.sale_type = s))) AND (((('t_c_firstyear.sale_type = c) AND ('t_w_firstyear.sale_type = w)) AND ('t_s_secyear.sale_type = s)) AND (('t_c_secyear.sale_type = c) AND ('t_w_secyear.sale_type = w)))) AND ((((('t_s_firstyear.dyear = 2001) AND ('t_s_secyear.dyear = (2001 + 1))) AND ('t_c_firstyear.dyear = 2001)) AND ((('t_c_secyear.dyear = (2001 + 1)) AND ('t_w_firstyear.dyear = 2001)) AND ('t_w_secyear.dyear = (2001 + 1)))) AND (((('t_s_firstyear.year_total > 0) AND ('t_c_firstyear.year_total > 0)) AND ('t_w_firstyear.year_total > 0)) AND ((CASE WHEN ('t_c_firstyear.year_total > 0) THEN ('t_c_secyear.year_total / 't_c_firstyear.year_total) ELSE null END > CASE WHEN ('t_s_firstyear.year_total > 0) THEN ('t_s_secyear.year_total / 't_s_firstyear.year_total) ELSE null END) AND (CASE WHEN ('t_c_firstyear.year_total > 0) THEN ('t_c_secyear.year_total / 't_c_firstyear.year_total) ELSE null END > CASE WHEN ('t_w_firstyear.year_total > 0) THEN ('t_w_secyear.year_total / 't_w_firstyear.year_total) ELSE null END)))))
               +- 'Join Inner
                  :- 'Join Inner
                  :  :- 'Join Inner
                  :  :  :- 'Join Inner
                  :  :  :  :- 'Join Inner
                  :  :  :  :  :- 'SubqueryAlias t_s_firstyear
                  :  :  :  :  :  +- 'UnresolvedRelation [year_total]
                  :  :  :  :  +- 'SubqueryAlias t_s_secyear
                  :  :  :  :     +- 'UnresolvedRelation [year_total]
                  :  :  :  +- 'SubqueryAlias t_c_firstyear
                  :  :  :     +- 'UnresolvedRelation [year_total]
                  :  :  +- 'SubqueryAlias t_c_secyear
                  :  :     +- 'UnresolvedRelation [year_total]
                  :  +- 'SubqueryAlias t_w_firstyear
                  :     +- 'UnresolvedRelation [year_total]
                  +- 'SubqueryAlias t_w_secyear
                     +- 'UnresolvedRelation [year_total]

== Analyzed Logical Plan ==
customer_id: string, customer_first_name: string, customer_last_name: string, customer_preferred_cust_flag: string, customer_birth_country: string, customer_login: string, customer_email_address: string
GlobalLimit 100
+- LocalLimit 100
   +- Sort [customer_id#31 ASC NULLS FIRST, customer_first_name#32 ASC NULLS FIRST, customer_last_name#33 ASC NULLS FIRST, customer_preferred_cust_flag#34 ASC NULLS FIRST, customer_birth_country#35 ASC NULLS FIRST, customer_login#36 ASC NULLS FIRST, customer_email_address#37 ASC NULLS FIRST], true
      +- Project [customer_id#31, customer_first_name#32, customer_last_name#33, customer_preferred_cust_flag#34, customer_birth_country#35, customer_login#36, customer_email_address#37]
         +- Filter ((((((customer_id#31 = customer_id#1) AND (customer_id#1 = customer_id#38)) AND (customer_id#1 = customer_id#39)) AND (((customer_id#1 = customer_id#40) AND (customer_id#1 = customer_id#41)) AND (sale_type#10 = s))) AND ((((sale_type#42 = c) AND (sale_type#43 = w)) AND (sale_type#44 = s)) AND ((sale_type#45 = c) AND (sale_type#46 = w)))) AND (((((dyear#8 = 2001) AND (dyear#47 = (2001 + 1))) AND (dyear#48 = 2001)) AND (((dyear#49 = (2001 + 1)) AND (dyear#50 = 2001)) AND (dyear#51 = (2001 + 1)))) AND ((((cast(year_total#9 as decimal(24,6)) > cast(cast(0 as decimal(1,0)) as decimal(24,6))) AND (cast(year_total#52 as decimal(24,6)) > cast(cast(0 as decimal(1,0)) as decimal(24,6)))) AND (cast(year_total#53 as decimal(24,6)) > cast(cast(0 as decimal(1,0)) as decimal(24,6)))) AND ((CASE WHEN (cast(year_total#52 as decimal(24,6)) > cast(cast(0 as decimal(1,0)) as decimal(24,6))) THEN CheckOverflow((promote_precision(cast(year_total#54 as decimal(24,6))) / promote_precision(cast(year_total#52 as decimal(24,6)))), DecimalType(38,14), true) ELSE cast(null as decimal(38,14)) END > CASE WHEN (cast(year_total#9 as decimal(24,6)) > cast(cast(0 as decimal(1,0)) as decimal(24,6))) THEN CheckOverflow((promote_precision(cast(year_total#55 as decimal(24,6))) / promote_precision(cast(year_total#9 as decimal(24,6)))), DecimalType(38,14), true) ELSE cast(null as decimal(38,14)) END) AND (CASE WHEN (cast(year_total#52 as decimal(24,6)) > cast(cast(0 as decimal(1,0)) as decimal(24,6))) THEN CheckOverflow((promote_precision(cast(year_total#54 as decimal(24,6))) / promote_precision(cast(year_total#52 as decimal(24,6)))), DecimalType(38,14), true) ELSE cast(null as decimal(38,14)) END > CASE WHEN (cast(year_total#53 as decimal(24,6)) > cast(cast(0 as decimal(1,0)) as decimal(24,6))) THEN CheckOverflow((promote_precision(cast(year_total#56 as decimal(24,6))) / promote_precision(cast(year_total#53 as decimal(24,6)))), DecimalType(38,14), true) ELSE cast(null as decimal(38,14)) END)))))
            +- Join Inner
               :- Join Inner
               :  :- Join Inner
               :  :  :- Join Inner
               :  :  :  :- Join Inner
               :  :  :  :  :- SubqueryAlias t_s_firstyear
               :  :  :  :  :  +- SubqueryAlias year_total
               :  :  :  :  :     +- Union false, false
               :  :  :  :  :        :- Union false, false
               :  :  :  :  :        :  :- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#1, c_first_name#58 AS customer_first_name#2, c_last_name#59 AS customer_last_name#3, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#4, c_birth_country#61 AS customer_birth_country#5, c_login#62 AS customer_login#6, c_email_address#63 AS customer_email_address#7, d_year#64 AS dyear#8, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#66 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#67 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#68 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#9, s AS sale_type#10]
               :  :  :  :  :        :  :  +- Filter ((c_customer_sk#69 = ss_customer_sk#70) AND (ss_sold_date_sk#71 = d_date_sk#72))
               :  :  :  :  :        :  :     +- Join Inner
               :  :  :  :  :        :  :        :- Join Inner
               :  :  :  :  :        :  :        :  :- SubqueryAlias spark_catalog.default.customer
               :  :  :  :  :        :  :        :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
               :  :  :  :  :        :  :        :  +- SubqueryAlias spark_catalog.default.store_sales
               :  :  :  :  :        :  :        :     +- Relation[ss_sold_date_sk#71,ss_sold_time_sk#83,ss_item_sk#84,ss_customer_sk#70,ss_cdemo_sk#85,ss_hdemo_sk#86,ss_addr_sk#87,ss_store_sk#88,ss_promo_sk#89,ss_ticket_number#90,ss_quantity#91,ss_wholesale_cost#92,ss_list_price#93,ss_sales_price#94,ss_ext_discount_amt#67,ss_ext_sales_price#68,ss_ext_wholesale_cost#66,ss_ext_list_price#65,ss_ext_tax#95,ss_coupon_amt#96,ss_net_paid#97,ss_net_paid_inc_tax#98,ss_net_profit#99] parquet
               :  :  :  :  :        :  :        +- SubqueryAlias spark_catalog.default.date_dim
               :  :  :  :  :        :  :           +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
               :  :  :  :  :        :  +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#11, c_first_name#58 AS customer_first_name#12, c_last_name#59 AS customer_last_name#13, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#14, c_birth_country#61 AS customer_birth_country#15, c_login#62 AS customer_login#16, c_email_address#63 AS customer_email_address#17, d_year#64 AS dyear#18, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#122 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#124 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#125 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#19, c AS sale_type#20]
               :  :  :  :  :        :     +- Filter ((c_customer_sk#69 = cs_bill_customer_sk#126) AND (cs_sold_date_sk#127 = d_date_sk#72))
               :  :  :  :  :        :        +- Join Inner
               :  :  :  :  :        :           :- Join Inner
               :  :  :  :  :        :           :  :- SubqueryAlias spark_catalog.default.customer
               :  :  :  :  :        :           :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
               :  :  :  :  :        :           :  +- SubqueryAlias spark_catalog.default.catalog_sales
               :  :  :  :  :        :           :     +- Relation[cs_sold_date_sk#127,cs_sold_time_sk#128,cs_ship_date_sk#129,cs_bill_customer_sk#126,cs_bill_cdemo_sk#130,cs_bill_hdemo_sk#131,cs_bill_addr_sk#132,cs_ship_customer_sk#133,cs_ship_cdemo_sk#134,cs_ship_hdemo_sk#135,cs_ship_addr_sk#136,cs_call_center_sk#137,cs_catalog_page_sk#138,cs_ship_mode_sk#139,cs_warehouse_sk#140,cs_item_sk#141,cs_promo_sk#142,cs_order_number#143,cs_quantity#144,cs_wholesale_cost#145,cs_list_price#146,cs_sales_price#147,cs_ext_discount_amt#124,cs_ext_sales_price#125,... 10 more fields] parquet
               :  :  :  :  :        :           +- SubqueryAlias spark_catalog.default.date_dim
               :  :  :  :  :        :              +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
               :  :  :  :  :        +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#21, c_first_name#58 AS customer_first_name#22, c_last_name#59 AS customer_last_name#23, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#24, c_birth_country#61 AS customer_birth_country#25, c_login#62 AS customer_login#26, c_email_address#63 AS customer_email_address#27, d_year#64 AS dyear#28, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#148 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#149 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#150 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#151 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#29, w AS sale_type#30]
               :  :  :  :  :           +- Filter ((c_customer_sk#69 = ws_bill_customer_sk#152) AND (ws_sold_date_sk#153 = d_date_sk#72))
               :  :  :  :  :              +- Join Inner
               :  :  :  :  :                 :- Join Inner
               :  :  :  :  :                 :  :- SubqueryAlias spark_catalog.default.customer
               :  :  :  :  :                 :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
               :  :  :  :  :                 :  +- SubqueryAlias spark_catalog.default.web_sales
               :  :  :  :  :                 :     +- Relation[ws_sold_date_sk#153,ws_sold_time_sk#154,ws_ship_date_sk#155,ws_item_sk#156,ws_bill_customer_sk#152,ws_bill_cdemo_sk#157,ws_bill_hdemo_sk#158,ws_bill_addr_sk#159,ws_ship_customer_sk#160,ws_ship_cdemo_sk#161,ws_ship_hdemo_sk#162,ws_ship_addr_sk#163,ws_web_page_sk#164,ws_web_site_sk#165,ws_ship_mode_sk#166,ws_warehouse_sk#167,ws_promo_sk#168,ws_order_number#169,ws_quantity#170,ws_wholesale_cost#171,ws_list_price#172,ws_sales_price#173,ws_ext_discount_amt#150,ws_ext_sales_price#151,... 10 more fields] parquet
               :  :  :  :  :                 +- SubqueryAlias spark_catalog.default.date_dim
               :  :  :  :  :                    +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
               :  :  :  :  +- SubqueryAlias t_s_secyear
               :  :  :  :     +- SubqueryAlias year_total
               :  :  :  :        +- Union false, false
               :  :  :  :           :- Union false, false
               :  :  :  :           :  :- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#31, c_first_name#58 AS customer_first_name#32, c_last_name#59 AS customer_last_name#33, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#34, c_birth_country#61 AS customer_birth_country#35, c_login#62 AS customer_login#36, c_email_address#63 AS customer_email_address#37, d_year#64 AS dyear#47, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#66 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#67 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#68 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#55, s AS sale_type#44]
               :  :  :  :           :  :  +- Filter ((c_customer_sk#69 = ss_customer_sk#70) AND (ss_sold_date_sk#71 = d_date_sk#72))
               :  :  :  :           :  :     +- Join Inner
               :  :  :  :           :  :        :- Join Inner
               :  :  :  :           :  :        :  :- SubqueryAlias spark_catalog.default.customer
               :  :  :  :           :  :        :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
               :  :  :  :           :  :        :  +- SubqueryAlias spark_catalog.default.store_sales
               :  :  :  :           :  :        :     +- Relation[ss_sold_date_sk#71,ss_sold_time_sk#83,ss_item_sk#84,ss_customer_sk#70,ss_cdemo_sk#85,ss_hdemo_sk#86,ss_addr_sk#87,ss_store_sk#88,ss_promo_sk#89,ss_ticket_number#90,ss_quantity#91,ss_wholesale_cost#92,ss_list_price#93,ss_sales_price#94,ss_ext_discount_amt#67,ss_ext_sales_price#68,ss_ext_wholesale_cost#66,ss_ext_list_price#65,ss_ext_tax#95,ss_coupon_amt#96,ss_net_paid#97,ss_net_paid_inc_tax#98,ss_net_profit#99] parquet
               :  :  :  :           :  :        +- SubqueryAlias spark_catalog.default.date_dim
               :  :  :  :           :  :           +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
               :  :  :  :           :  +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#11, c_first_name#58 AS customer_first_name#12, c_last_name#59 AS customer_last_name#13, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#14, c_birth_country#61 AS customer_birth_country#15, c_login#62 AS customer_login#16, c_email_address#63 AS customer_email_address#17, d_year#64 AS dyear#18, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#122 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#124 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#125 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#19, c AS sale_type#20]
               :  :  :  :           :     +- Filter ((c_customer_sk#69 = cs_bill_customer_sk#126) AND (cs_sold_date_sk#127 = d_date_sk#72))
               :  :  :  :           :        +- Join Inner
               :  :  :  :           :           :- Join Inner
               :  :  :  :           :           :  :- SubqueryAlias spark_catalog.default.customer
               :  :  :  :           :           :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
               :  :  :  :           :           :  +- SubqueryAlias spark_catalog.default.catalog_sales
               :  :  :  :           :           :     +- Relation[cs_sold_date_sk#127,cs_sold_time_sk#128,cs_ship_date_sk#129,cs_bill_customer_sk#126,cs_bill_cdemo_sk#130,cs_bill_hdemo_sk#131,cs_bill_addr_sk#132,cs_ship_customer_sk#133,cs_ship_cdemo_sk#134,cs_ship_hdemo_sk#135,cs_ship_addr_sk#136,cs_call_center_sk#137,cs_catalog_page_sk#138,cs_ship_mode_sk#139,cs_warehouse_sk#140,cs_item_sk#141,cs_promo_sk#142,cs_order_number#143,cs_quantity#144,cs_wholesale_cost#145,cs_list_price#146,cs_sales_price#147,cs_ext_discount_amt#124,cs_ext_sales_price#125,... 10 more fields] parquet
               :  :  :  :           :           +- SubqueryAlias spark_catalog.default.date_dim
               :  :  :  :           :              +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
               :  :  :  :           +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#21, c_first_name#58 AS customer_first_name#22, c_last_name#59 AS customer_last_name#23, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#24, c_birth_country#61 AS customer_birth_country#25, c_login#62 AS customer_login#26, c_email_address#63 AS customer_email_address#27, d_year#64 AS dyear#28, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#148 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#149 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#150 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#151 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#29, w AS sale_type#30]
               :  :  :  :              +- Filter ((c_customer_sk#69 = ws_bill_customer_sk#152) AND (ws_sold_date_sk#153 = d_date_sk#72))
               :  :  :  :                 +- Join Inner
               :  :  :  :                    :- Join Inner
               :  :  :  :                    :  :- SubqueryAlias spark_catalog.default.customer
               :  :  :  :                    :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
               :  :  :  :                    :  +- SubqueryAlias spark_catalog.default.web_sales
               :  :  :  :                    :     +- Relation[ws_sold_date_sk#153,ws_sold_time_sk#154,ws_ship_date_sk#155,ws_item_sk#156,ws_bill_customer_sk#152,ws_bill_cdemo_sk#157,ws_bill_hdemo_sk#158,ws_bill_addr_sk#159,ws_ship_customer_sk#160,ws_ship_cdemo_sk#161,ws_ship_hdemo_sk#162,ws_ship_addr_sk#163,ws_web_page_sk#164,ws_web_site_sk#165,ws_ship_mode_sk#166,ws_warehouse_sk#167,ws_promo_sk#168,ws_order_number#169,ws_quantity#170,ws_wholesale_cost#171,ws_list_price#172,ws_sales_price#173,ws_ext_discount_amt#150,ws_ext_sales_price#151,... 10 more fields] parquet
               :  :  :  :                    +- SubqueryAlias spark_catalog.default.date_dim
               :  :  :  :                       +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
               :  :  :  +- SubqueryAlias t_c_firstyear
               :  :  :     +- SubqueryAlias year_total
               :  :  :        +- Union false, false
               :  :  :           :- Union false, false
               :  :  :           :  :- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#39, c_first_name#58 AS customer_first_name#174, c_last_name#59 AS customer_last_name#175, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#176, c_birth_country#61 AS customer_birth_country#177, c_login#62 AS customer_login#178, c_email_address#63 AS customer_email_address#179, d_year#64 AS dyear#48, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#66 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#67 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#68 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#52, s AS sale_type#42]
               :  :  :           :  :  +- Filter ((c_customer_sk#69 = ss_customer_sk#70) AND (ss_sold_date_sk#71 = d_date_sk#72))
               :  :  :           :  :     +- Join Inner
               :  :  :           :  :        :- Join Inner
               :  :  :           :  :        :  :- SubqueryAlias spark_catalog.default.customer
               :  :  :           :  :        :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
               :  :  :           :  :        :  +- SubqueryAlias spark_catalog.default.store_sales
               :  :  :           :  :        :     +- Relation[ss_sold_date_sk#71,ss_sold_time_sk#83,ss_item_sk#84,ss_customer_sk#70,ss_cdemo_sk#85,ss_hdemo_sk#86,ss_addr_sk#87,ss_store_sk#88,ss_promo_sk#89,ss_ticket_number#90,ss_quantity#91,ss_wholesale_cost#92,ss_list_price#93,ss_sales_price#94,ss_ext_discount_amt#67,ss_ext_sales_price#68,ss_ext_wholesale_cost#66,ss_ext_list_price#65,ss_ext_tax#95,ss_coupon_amt#96,ss_net_paid#97,ss_net_paid_inc_tax#98,ss_net_profit#99] parquet
               :  :  :           :  :        +- SubqueryAlias spark_catalog.default.date_dim
               :  :  :           :  :           +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
               :  :  :           :  +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#11, c_first_name#58 AS customer_first_name#12, c_last_name#59 AS customer_last_name#13, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#14, c_birth_country#61 AS customer_birth_country#15, c_login#62 AS customer_login#16, c_email_address#63 AS customer_email_address#17, d_year#64 AS dyear#18, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#122 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#124 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#125 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#19, c AS sale_type#20]
               :  :  :           :     +- Filter ((c_customer_sk#69 = cs_bill_customer_sk#126) AND (cs_sold_date_sk#127 = d_date_sk#72))
               :  :  :           :        +- Join Inner
               :  :  :           :           :- Join Inner
               :  :  :           :           :  :- SubqueryAlias spark_catalog.default.customer
               :  :  :           :           :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
               :  :  :           :           :  +- SubqueryAlias spark_catalog.default.catalog_sales
               :  :  :           :           :     +- Relation[cs_sold_date_sk#127,cs_sold_time_sk#128,cs_ship_date_sk#129,cs_bill_customer_sk#126,cs_bill_cdemo_sk#130,cs_bill_hdemo_sk#131,cs_bill_addr_sk#132,cs_ship_customer_sk#133,cs_ship_cdemo_sk#134,cs_ship_hdemo_sk#135,cs_ship_addr_sk#136,cs_call_center_sk#137,cs_catalog_page_sk#138,cs_ship_mode_sk#139,cs_warehouse_sk#140,cs_item_sk#141,cs_promo_sk#142,cs_order_number#143,cs_quantity#144,cs_wholesale_cost#145,cs_list_price#146,cs_sales_price#147,cs_ext_discount_amt#124,cs_ext_sales_price#125,... 10 more fields] parquet
               :  :  :           :           +- SubqueryAlias spark_catalog.default.date_dim
               :  :  :           :              +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
               :  :  :           +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#21, c_first_name#58 AS customer_first_name#22, c_last_name#59 AS customer_last_name#23, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#24, c_birth_country#61 AS customer_birth_country#25, c_login#62 AS customer_login#26, c_email_address#63 AS customer_email_address#27, d_year#64 AS dyear#28, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#148 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#149 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#150 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#151 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#29, w AS sale_type#30]
               :  :  :              +- Filter ((c_customer_sk#69 = ws_bill_customer_sk#152) AND (ws_sold_date_sk#153 = d_date_sk#72))
               :  :  :                 +- Join Inner
               :  :  :                    :- Join Inner
               :  :  :                    :  :- SubqueryAlias spark_catalog.default.customer
               :  :  :                    :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
               :  :  :                    :  +- SubqueryAlias spark_catalog.default.web_sales
               :  :  :                    :     +- Relation[ws_sold_date_sk#153,ws_sold_time_sk#154,ws_ship_date_sk#155,ws_item_sk#156,ws_bill_customer_sk#152,ws_bill_cdemo_sk#157,ws_bill_hdemo_sk#158,ws_bill_addr_sk#159,ws_ship_customer_sk#160,ws_ship_cdemo_sk#161,ws_ship_hdemo_sk#162,ws_ship_addr_sk#163,ws_web_page_sk#164,ws_web_site_sk#165,ws_ship_mode_sk#166,ws_warehouse_sk#167,ws_promo_sk#168,ws_order_number#169,ws_quantity#170,ws_wholesale_cost#171,ws_list_price#172,ws_sales_price#173,ws_ext_discount_amt#150,ws_ext_sales_price#151,... 10 more fields] parquet
               :  :  :                    +- SubqueryAlias spark_catalog.default.date_dim
               :  :  :                       +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
               :  :  +- SubqueryAlias t_c_secyear
               :  :     +- SubqueryAlias year_total
               :  :        +- Union false, false
               :  :           :- Union false, false
               :  :           :  :- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#38, c_first_name#58 AS customer_first_name#180, c_last_name#59 AS customer_last_name#181, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#182, c_birth_country#61 AS customer_birth_country#183, c_login#62 AS customer_login#184, c_email_address#63 AS customer_email_address#185, d_year#64 AS dyear#49, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#66 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#67 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#68 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#54, s AS sale_type#45]
               :  :           :  :  +- Filter ((c_customer_sk#69 = ss_customer_sk#70) AND (ss_sold_date_sk#71 = d_date_sk#72))
               :  :           :  :     +- Join Inner
               :  :           :  :        :- Join Inner
               :  :           :  :        :  :- SubqueryAlias spark_catalog.default.customer
               :  :           :  :        :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
               :  :           :  :        :  +- SubqueryAlias spark_catalog.default.store_sales
               :  :           :  :        :     +- Relation[ss_sold_date_sk#71,ss_sold_time_sk#83,ss_item_sk#84,ss_customer_sk#70,ss_cdemo_sk#85,ss_hdemo_sk#86,ss_addr_sk#87,ss_store_sk#88,ss_promo_sk#89,ss_ticket_number#90,ss_quantity#91,ss_wholesale_cost#92,ss_list_price#93,ss_sales_price#94,ss_ext_discount_amt#67,ss_ext_sales_price#68,ss_ext_wholesale_cost#66,ss_ext_list_price#65,ss_ext_tax#95,ss_coupon_amt#96,ss_net_paid#97,ss_net_paid_inc_tax#98,ss_net_profit#99] parquet
               :  :           :  :        +- SubqueryAlias spark_catalog.default.date_dim
               :  :           :  :           +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
               :  :           :  +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#11, c_first_name#58 AS customer_first_name#12, c_last_name#59 AS customer_last_name#13, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#14, c_birth_country#61 AS customer_birth_country#15, c_login#62 AS customer_login#16, c_email_address#63 AS customer_email_address#17, d_year#64 AS dyear#18, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#122 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#124 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#125 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#19, c AS sale_type#20]
               :  :           :     +- Filter ((c_customer_sk#69 = cs_bill_customer_sk#126) AND (cs_sold_date_sk#127 = d_date_sk#72))
               :  :           :        +- Join Inner
               :  :           :           :- Join Inner
               :  :           :           :  :- SubqueryAlias spark_catalog.default.customer
               :  :           :           :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
               :  :           :           :  +- SubqueryAlias spark_catalog.default.catalog_sales
               :  :           :           :     +- Relation[cs_sold_date_sk#127,cs_sold_time_sk#128,cs_ship_date_sk#129,cs_bill_customer_sk#126,cs_bill_cdemo_sk#130,cs_bill_hdemo_sk#131,cs_bill_addr_sk#132,cs_ship_customer_sk#133,cs_ship_cdemo_sk#134,cs_ship_hdemo_sk#135,cs_ship_addr_sk#136,cs_call_center_sk#137,cs_catalog_page_sk#138,cs_ship_mode_sk#139,cs_warehouse_sk#140,cs_item_sk#141,cs_promo_sk#142,cs_order_number#143,cs_quantity#144,cs_wholesale_cost#145,cs_list_price#146,cs_sales_price#147,cs_ext_discount_amt#124,cs_ext_sales_price#125,... 10 more fields] parquet
               :  :           :           +- SubqueryAlias spark_catalog.default.date_dim
               :  :           :              +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
               :  :           +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#21, c_first_name#58 AS customer_first_name#22, c_last_name#59 AS customer_last_name#23, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#24, c_birth_country#61 AS customer_birth_country#25, c_login#62 AS customer_login#26, c_email_address#63 AS customer_email_address#27, d_year#64 AS dyear#28, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#148 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#149 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#150 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#151 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#29, w AS sale_type#30]
               :  :              +- Filter ((c_customer_sk#69 = ws_bill_customer_sk#152) AND (ws_sold_date_sk#153 = d_date_sk#72))
               :  :                 +- Join Inner
               :  :                    :- Join Inner
               :  :                    :  :- SubqueryAlias spark_catalog.default.customer
               :  :                    :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
               :  :                    :  +- SubqueryAlias spark_catalog.default.web_sales
               :  :                    :     +- Relation[ws_sold_date_sk#153,ws_sold_time_sk#154,ws_ship_date_sk#155,ws_item_sk#156,ws_bill_customer_sk#152,ws_bill_cdemo_sk#157,ws_bill_hdemo_sk#158,ws_bill_addr_sk#159,ws_ship_customer_sk#160,ws_ship_cdemo_sk#161,ws_ship_hdemo_sk#162,ws_ship_addr_sk#163,ws_web_page_sk#164,ws_web_site_sk#165,ws_ship_mode_sk#166,ws_warehouse_sk#167,ws_promo_sk#168,ws_order_number#169,ws_quantity#170,ws_wholesale_cost#171,ws_list_price#172,ws_sales_price#173,ws_ext_discount_amt#150,ws_ext_sales_price#151,... 10 more fields] parquet
               :  :                    +- SubqueryAlias spark_catalog.default.date_dim
               :  :                       +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
               :  +- SubqueryAlias t_w_firstyear
               :     +- SubqueryAlias year_total
               :        +- Union false, false
               :           :- Union false, false
               :           :  :- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#40, c_first_name#58 AS customer_first_name#186, c_last_name#59 AS customer_last_name#187, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#188, c_birth_country#61 AS customer_birth_country#189, c_login#62 AS customer_login#190, c_email_address#63 AS customer_email_address#191, d_year#64 AS dyear#50, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#66 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#67 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#68 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#53, s AS sale_type#43]
               :           :  :  +- Filter ((c_customer_sk#69 = ss_customer_sk#70) AND (ss_sold_date_sk#71 = d_date_sk#72))
               :           :  :     +- Join Inner
               :           :  :        :- Join Inner
               :           :  :        :  :- SubqueryAlias spark_catalog.default.customer
               :           :  :        :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
               :           :  :        :  +- SubqueryAlias spark_catalog.default.store_sales
               :           :  :        :     +- Relation[ss_sold_date_sk#71,ss_sold_time_sk#83,ss_item_sk#84,ss_customer_sk#70,ss_cdemo_sk#85,ss_hdemo_sk#86,ss_addr_sk#87,ss_store_sk#88,ss_promo_sk#89,ss_ticket_number#90,ss_quantity#91,ss_wholesale_cost#92,ss_list_price#93,ss_sales_price#94,ss_ext_discount_amt#67,ss_ext_sales_price#68,ss_ext_wholesale_cost#66,ss_ext_list_price#65,ss_ext_tax#95,ss_coupon_amt#96,ss_net_paid#97,ss_net_paid_inc_tax#98,ss_net_profit#99] parquet
               :           :  :        +- SubqueryAlias spark_catalog.default.date_dim
               :           :  :           +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
               :           :  +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#11, c_first_name#58 AS customer_first_name#12, c_last_name#59 AS customer_last_name#13, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#14, c_birth_country#61 AS customer_birth_country#15, c_login#62 AS customer_login#16, c_email_address#63 AS customer_email_address#17, d_year#64 AS dyear#18, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#122 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#124 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#125 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#19, c AS sale_type#20]
               :           :     +- Filter ((c_customer_sk#69 = cs_bill_customer_sk#126) AND (cs_sold_date_sk#127 = d_date_sk#72))
               :           :        +- Join Inner
               :           :           :- Join Inner
               :           :           :  :- SubqueryAlias spark_catalog.default.customer
               :           :           :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
               :           :           :  +- SubqueryAlias spark_catalog.default.catalog_sales
               :           :           :     +- Relation[cs_sold_date_sk#127,cs_sold_time_sk#128,cs_ship_date_sk#129,cs_bill_customer_sk#126,cs_bill_cdemo_sk#130,cs_bill_hdemo_sk#131,cs_bill_addr_sk#132,cs_ship_customer_sk#133,cs_ship_cdemo_sk#134,cs_ship_hdemo_sk#135,cs_ship_addr_sk#136,cs_call_center_sk#137,cs_catalog_page_sk#138,cs_ship_mode_sk#139,cs_warehouse_sk#140,cs_item_sk#141,cs_promo_sk#142,cs_order_number#143,cs_quantity#144,cs_wholesale_cost#145,cs_list_price#146,cs_sales_price#147,cs_ext_discount_amt#124,cs_ext_sales_price#125,... 10 more fields] parquet
               :           :           +- SubqueryAlias spark_catalog.default.date_dim
               :           :              +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
               :           +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#21, c_first_name#58 AS customer_first_name#22, c_last_name#59 AS customer_last_name#23, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#24, c_birth_country#61 AS customer_birth_country#25, c_login#62 AS customer_login#26, c_email_address#63 AS customer_email_address#27, d_year#64 AS dyear#28, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#148 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#149 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#150 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#151 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#29, w AS sale_type#30]
               :              +- Filter ((c_customer_sk#69 = ws_bill_customer_sk#152) AND (ws_sold_date_sk#153 = d_date_sk#72))
               :                 +- Join Inner
               :                    :- Join Inner
               :                    :  :- SubqueryAlias spark_catalog.default.customer
               :                    :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
               :                    :  +- SubqueryAlias spark_catalog.default.web_sales
               :                    :     +- Relation[ws_sold_date_sk#153,ws_sold_time_sk#154,ws_ship_date_sk#155,ws_item_sk#156,ws_bill_customer_sk#152,ws_bill_cdemo_sk#157,ws_bill_hdemo_sk#158,ws_bill_addr_sk#159,ws_ship_customer_sk#160,ws_ship_cdemo_sk#161,ws_ship_hdemo_sk#162,ws_ship_addr_sk#163,ws_web_page_sk#164,ws_web_site_sk#165,ws_ship_mode_sk#166,ws_warehouse_sk#167,ws_promo_sk#168,ws_order_number#169,ws_quantity#170,ws_wholesale_cost#171,ws_list_price#172,ws_sales_price#173,ws_ext_discount_amt#150,ws_ext_sales_price#151,... 10 more fields] parquet
               :                    +- SubqueryAlias spark_catalog.default.date_dim
               :                       +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
               +- SubqueryAlias t_w_secyear
                  +- SubqueryAlias year_total
                     +- Union false, false
                        :- Union false, false
                        :  :- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#41, c_first_name#58 AS customer_first_name#192, c_last_name#59 AS customer_last_name#193, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#194, c_birth_country#61 AS customer_birth_country#195, c_login#62 AS customer_login#196, c_email_address#63 AS customer_email_address#197, d_year#64 AS dyear#51, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#66 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#67 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#68 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#56, s AS sale_type#46]
                        :  :  +- Filter ((c_customer_sk#69 = ss_customer_sk#70) AND (ss_sold_date_sk#71 = d_date_sk#72))
                        :  :     +- Join Inner
                        :  :        :- Join Inner
                        :  :        :  :- SubqueryAlias spark_catalog.default.customer
                        :  :        :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
                        :  :        :  +- SubqueryAlias spark_catalog.default.store_sales
                        :  :        :     +- Relation[ss_sold_date_sk#71,ss_sold_time_sk#83,ss_item_sk#84,ss_customer_sk#70,ss_cdemo_sk#85,ss_hdemo_sk#86,ss_addr_sk#87,ss_store_sk#88,ss_promo_sk#89,ss_ticket_number#90,ss_quantity#91,ss_wholesale_cost#92,ss_list_price#93,ss_sales_price#94,ss_ext_discount_amt#67,ss_ext_sales_price#68,ss_ext_wholesale_cost#66,ss_ext_list_price#65,ss_ext_tax#95,ss_coupon_amt#96,ss_net_paid#97,ss_net_paid_inc_tax#98,ss_net_profit#99] parquet
                        :  :        +- SubqueryAlias spark_catalog.default.date_dim
                        :  :           +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
                        :  +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#11, c_first_name#58 AS customer_first_name#12, c_last_name#59 AS customer_last_name#13, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#14, c_birth_country#61 AS customer_birth_country#15, c_login#62 AS customer_login#16, c_email_address#63 AS customer_email_address#17, d_year#64 AS dyear#18, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#122 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#124 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#125 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#19, c AS sale_type#20]
                        :     +- Filter ((c_customer_sk#69 = cs_bill_customer_sk#126) AND (cs_sold_date_sk#127 = d_date_sk#72))
                        :        +- Join Inner
                        :           :- Join Inner
                        :           :  :- SubqueryAlias spark_catalog.default.customer
                        :           :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
                        :           :  +- SubqueryAlias spark_catalog.default.catalog_sales
                        :           :     +- Relation[cs_sold_date_sk#127,cs_sold_time_sk#128,cs_ship_date_sk#129,cs_bill_customer_sk#126,cs_bill_cdemo_sk#130,cs_bill_hdemo_sk#131,cs_bill_addr_sk#132,cs_ship_customer_sk#133,cs_ship_cdemo_sk#134,cs_ship_hdemo_sk#135,cs_ship_addr_sk#136,cs_call_center_sk#137,cs_catalog_page_sk#138,cs_ship_mode_sk#139,cs_warehouse_sk#140,cs_item_sk#141,cs_promo_sk#142,cs_order_number#143,cs_quantity#144,cs_wholesale_cost#145,cs_list_price#146,cs_sales_price#147,cs_ext_discount_amt#124,cs_ext_sales_price#125,... 10 more fields] parquet
                        :           +- SubqueryAlias spark_catalog.default.date_dim
                        :              +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
                        +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#21, c_first_name#58 AS customer_first_name#22, c_last_name#59 AS customer_last_name#23, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#24, c_birth_country#61 AS customer_birth_country#25, c_login#62 AS customer_login#26, c_email_address#63 AS customer_email_address#27, d_year#64 AS dyear#28, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#148 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#149 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#150 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#151 as decimal(10,2)))), DecimalType(10,2), true) as decimal(10,2))) / promote_precision(cast(cast(2 as decimal(1,0)) as decimal(10,2)))), DecimalType(14,6), true)) AS year_total#29, w AS sale_type#30]
                           +- Filter ((c_customer_sk#69 = ws_bill_customer_sk#152) AND (ws_sold_date_sk#153 = d_date_sk#72))
                              +- Join Inner
                                 :- Join Inner
                                 :  :- SubqueryAlias spark_catalog.default.customer
                                 :  :  +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
                                 :  +- SubqueryAlias spark_catalog.default.web_sales
                                 :     +- Relation[ws_sold_date_sk#153,ws_sold_time_sk#154,ws_ship_date_sk#155,ws_item_sk#156,ws_bill_customer_sk#152,ws_bill_cdemo_sk#157,ws_bill_hdemo_sk#158,ws_bill_addr_sk#159,ws_ship_customer_sk#160,ws_ship_cdemo_sk#161,ws_ship_hdemo_sk#162,ws_ship_addr_sk#163,ws_web_page_sk#164,ws_web_site_sk#165,ws_ship_mode_sk#166,ws_warehouse_sk#167,ws_promo_sk#168,ws_order_number#169,ws_quantity#170,ws_wholesale_cost#171,ws_list_price#172,ws_sales_price#173,ws_ext_discount_amt#150,ws_ext_sales_price#151,... 10 more fields] parquet
                                 +- SubqueryAlias spark_catalog.default.date_dim
                                    +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Sort [customer_id#31 ASC NULLS FIRST, customer_first_name#32 ASC NULLS FIRST, customer_last_name#33 ASC NULLS FIRST, customer_preferred_cust_flag#34 ASC NULLS FIRST, customer_birth_country#35 ASC NULLS FIRST, customer_login#36 ASC NULLS FIRST, customer_email_address#37 ASC NULLS FIRST], true
      +- Project [customer_id#31, customer_first_name#32, customer_last_name#33, customer_preferred_cust_flag#34, customer_birth_country#35, customer_login#36, customer_email_address#37]
         +- Join Inner, ((customer_id#1 = customer_id#41) AND (CASE WHEN (year_total#52 > 0.000000) THEN CheckOverflow((promote_precision(year_total#54) / promote_precision(year_total#52)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#53 > 0.000000) THEN CheckOverflow((promote_precision(year_total#56) / promote_precision(year_total#53)), DecimalType(38,14), true) ELSE null END))
            :- Project [customer_id#1, customer_id#31, customer_first_name#32, customer_last_name#33, customer_preferred_cust_flag#34, customer_birth_country#35, customer_login#36, customer_email_address#37, year_total#52, year_total#54, year_total#53]
            :  +- Join Inner, (customer_id#1 = customer_id#40)
            :     :- Project [customer_id#1, customer_id#31, customer_first_name#32, customer_last_name#33, customer_preferred_cust_flag#34, customer_birth_country#35, customer_login#36, customer_email_address#37, year_total#52, year_total#54]
            :     :  +- Join Inner, ((customer_id#1 = customer_id#38) AND (CASE WHEN (year_total#52 > 0.000000) THEN CheckOverflow((promote_precision(year_total#54) / promote_precision(year_total#52)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#9 > 0.000000) THEN CheckOverflow((promote_precision(year_total#55) / promote_precision(year_total#9)), DecimalType(38,14), true) ELSE null END))
            :     :     :- Project [customer_id#1, year_total#9, customer_id#31, customer_first_name#32, customer_last_name#33, customer_preferred_cust_flag#34, customer_birth_country#35, customer_login#36, customer_email_address#37, year_total#55, year_total#52]
            :     :     :  +- Join Inner, (customer_id#1 = customer_id#39)
            :     :     :     :- Join Inner, (customer_id#31 = customer_id#1)
            :     :     :     :  :- Filter (isnotnull(year_total#9) AND (year_total#9 > 0.000000))
            :     :     :     :  :  +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#1, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#66 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#67 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#68 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true)) AS year_total#9]
            :     :     :     :  :     +- Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, ss_ext_discount_amt#67, ss_ext_sales_price#68, ss_ext_wholesale_cost#66, ss_ext_list_price#65, d_year#64]
            :     :     :     :  :        +- Join Inner, (ss_sold_date_sk#71 = d_date_sk#72)
            :     :     :     :  :           :- Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, ss_sold_date_sk#71, ss_ext_discount_amt#67, ss_ext_sales_price#68, ss_ext_wholesale_cost#66, ss_ext_list_price#65]
            :     :     :     :  :           :  +- Join Inner, (c_customer_sk#69 = ss_customer_sk#70)
            :     :     :     :  :           :     :- Project [c_customer_sk#69, c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63]
            :     :     :     :  :           :     :  +- Filter (isnotnull(c_customer_sk#69) AND isnotnull(c_customer_id#57))
            :     :     :     :  :           :     :     +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
            :     :     :     :  :           :     +- Project [ss_sold_date_sk#71, ss_customer_sk#70, ss_ext_discount_amt#67, ss_ext_sales_price#68, ss_ext_wholesale_cost#66, ss_ext_list_price#65]
            :     :     :     :  :           :        +- Filter (isnotnull(ss_customer_sk#70) AND isnotnull(ss_sold_date_sk#71))
            :     :     :     :  :           :           +- Relation[ss_sold_date_sk#71,ss_sold_time_sk#83,ss_item_sk#84,ss_customer_sk#70,ss_cdemo_sk#85,ss_hdemo_sk#86,ss_addr_sk#87,ss_store_sk#88,ss_promo_sk#89,ss_ticket_number#90,ss_quantity#91,ss_wholesale_cost#92,ss_list_price#93,ss_sales_price#94,ss_ext_discount_amt#67,ss_ext_sales_price#68,ss_ext_wholesale_cost#66,ss_ext_list_price#65,ss_ext_tax#95,ss_coupon_amt#96,ss_net_paid#97,ss_net_paid_inc_tax#98,ss_net_profit#99] parquet
            :     :     :     :  :           +- Project [d_date_sk#72, d_year#64]
            :     :     :     :  :              +- Filter ((isnotnull(d_year#64) AND (d_year#64 = 2001)) AND isnotnull(d_date_sk#72))
            :     :     :     :  :                 +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
            :     :     :     :  +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#31, c_first_name#58 AS customer_first_name#32, c_last_name#59 AS customer_last_name#33, c_preferred_cust_flag#60 AS customer_preferred_cust_flag#34, c_birth_country#61 AS customer_birth_country#35, c_login#62 AS customer_login#36, c_email_address#63 AS customer_email_address#37, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#66 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#67 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#68 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true)) AS year_total#55]
            :     :     :     :     +- Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, ss_ext_discount_amt#67, ss_ext_sales_price#68, ss_ext_wholesale_cost#66, ss_ext_list_price#65, d_year#64]
            :     :     :     :        +- Join Inner, (ss_sold_date_sk#71 = d_date_sk#72)
            :     :     :     :           :- Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, ss_sold_date_sk#71, ss_ext_discount_amt#67, ss_ext_sales_price#68, ss_ext_wholesale_cost#66, ss_ext_list_price#65]
            :     :     :     :           :  +- Join Inner, (c_customer_sk#69 = ss_customer_sk#70)
            :     :     :     :           :     :- Project [c_customer_sk#69, c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63]
            :     :     :     :           :     :  +- Filter (isnotnull(c_customer_sk#69) AND isnotnull(c_customer_id#57))
            :     :     :     :           :     :     +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
            :     :     :     :           :     +- Project [ss_sold_date_sk#71, ss_customer_sk#70, ss_ext_discount_amt#67, ss_ext_sales_price#68, ss_ext_wholesale_cost#66, ss_ext_list_price#65]
            :     :     :     :           :        +- Filter (isnotnull(ss_customer_sk#70) AND isnotnull(ss_sold_date_sk#71))
            :     :     :     :           :           +- Relation[ss_sold_date_sk#71,ss_sold_time_sk#83,ss_item_sk#84,ss_customer_sk#70,ss_cdemo_sk#85,ss_hdemo_sk#86,ss_addr_sk#87,ss_store_sk#88,ss_promo_sk#89,ss_ticket_number#90,ss_quantity#91,ss_wholesale_cost#92,ss_list_price#93,ss_sales_price#94,ss_ext_discount_amt#67,ss_ext_sales_price#68,ss_ext_wholesale_cost#66,ss_ext_list_price#65,ss_ext_tax#95,ss_coupon_amt#96,ss_net_paid#97,ss_net_paid_inc_tax#98,ss_net_profit#99] parquet
            :     :     :     :           +- Project [d_date_sk#72, d_year#64]
            :     :     :     :              +- Filter ((isnotnull(d_year#64) AND (d_year#64 = 2002)) AND isnotnull(d_date_sk#72))
            :     :     :     :                 +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
            :     :     :     +- Project [customer_id#11 AS customer_id#39, year_total#19 AS year_total#52]
            :     :     :        +- Filter (isnotnull(year_total#19) AND (year_total#19 > 0.000000))
            :     :     :           +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#11, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#122 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#124 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#125 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true)) AS year_total#19]
            :     :     :              +- Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, cs_ext_discount_amt#124, cs_ext_sales_price#125, cs_ext_wholesale_cost#123, cs_ext_list_price#122, d_year#64]
            :     :     :                 +- Join Inner, (cs_sold_date_sk#127 = d_date_sk#72)
            :     :     :                    :- Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, cs_sold_date_sk#127, cs_ext_discount_amt#124, cs_ext_sales_price#125, cs_ext_wholesale_cost#123, cs_ext_list_price#122]
            :     :     :                    :  +- Join Inner, (c_customer_sk#69 = cs_bill_customer_sk#126)
            :     :     :                    :     :- Project [c_customer_sk#69, c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63]
            :     :     :                    :     :  +- Filter (isnotnull(c_customer_sk#69) AND isnotnull(c_customer_id#57))
            :     :     :                    :     :     +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
            :     :     :                    :     +- Project [cs_sold_date_sk#127, cs_bill_customer_sk#126, cs_ext_discount_amt#124, cs_ext_sales_price#125, cs_ext_wholesale_cost#123, cs_ext_list_price#122]
            :     :     :                    :        +- Filter (isnotnull(cs_bill_customer_sk#126) AND isnotnull(cs_sold_date_sk#127))
            :     :     :                    :           +- Relation[cs_sold_date_sk#127,cs_sold_time_sk#128,cs_ship_date_sk#129,cs_bill_customer_sk#126,cs_bill_cdemo_sk#130,cs_bill_hdemo_sk#131,cs_bill_addr_sk#132,cs_ship_customer_sk#133,cs_ship_cdemo_sk#134,cs_ship_hdemo_sk#135,cs_ship_addr_sk#136,cs_call_center_sk#137,cs_catalog_page_sk#138,cs_ship_mode_sk#139,cs_warehouse_sk#140,cs_item_sk#141,cs_promo_sk#142,cs_order_number#143,cs_quantity#144,cs_wholesale_cost#145,cs_list_price#146,cs_sales_price#147,cs_ext_discount_amt#124,cs_ext_sales_price#125,... 10 more fields] parquet
            :     :     :                    +- Project [d_date_sk#72, d_year#64]
            :     :     :                       +- Filter ((isnotnull(d_year#64) AND (d_year#64 = 2001)) AND isnotnull(d_date_sk#72))
            :     :     :                          +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
            :     :     +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#38, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#122 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#124 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#125 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true)) AS year_total#54]
            :     :        +- Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, cs_ext_discount_amt#124, cs_ext_sales_price#125, cs_ext_wholesale_cost#123, cs_ext_list_price#122, d_year#64]
            :     :           +- Join Inner, (cs_sold_date_sk#127 = d_date_sk#72)
            :     :              :- Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, cs_sold_date_sk#127, cs_ext_discount_amt#124, cs_ext_sales_price#125, cs_ext_wholesale_cost#123, cs_ext_list_price#122]
            :     :              :  +- Join Inner, (c_customer_sk#69 = cs_bill_customer_sk#126)
            :     :              :     :- Project [c_customer_sk#69, c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63]
            :     :              :     :  +- Filter (isnotnull(c_customer_sk#69) AND isnotnull(c_customer_id#57))
            :     :              :     :     +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
            :     :              :     +- Project [cs_sold_date_sk#127, cs_bill_customer_sk#126, cs_ext_discount_amt#124, cs_ext_sales_price#125, cs_ext_wholesale_cost#123, cs_ext_list_price#122]
            :     :              :        +- Filter (isnotnull(cs_bill_customer_sk#126) AND isnotnull(cs_sold_date_sk#127))
            :     :              :           +- Relation[cs_sold_date_sk#127,cs_sold_time_sk#128,cs_ship_date_sk#129,cs_bill_customer_sk#126,cs_bill_cdemo_sk#130,cs_bill_hdemo_sk#131,cs_bill_addr_sk#132,cs_ship_customer_sk#133,cs_ship_cdemo_sk#134,cs_ship_hdemo_sk#135,cs_ship_addr_sk#136,cs_call_center_sk#137,cs_catalog_page_sk#138,cs_ship_mode_sk#139,cs_warehouse_sk#140,cs_item_sk#141,cs_promo_sk#142,cs_order_number#143,cs_quantity#144,cs_wholesale_cost#145,cs_list_price#146,cs_sales_price#147,cs_ext_discount_amt#124,cs_ext_sales_price#125,... 10 more fields] parquet
            :     :              +- Project [d_date_sk#72, d_year#64]
            :     :                 +- Filter ((isnotnull(d_year#64) AND (d_year#64 = 2002)) AND isnotnull(d_date_sk#72))
            :     :                    +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
            :     +- Project [customer_id#21 AS customer_id#40, year_total#29 AS year_total#53]
            :        +- Filter (isnotnull(year_total#29) AND (year_total#29 > 0.000000))
            :           +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#21, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#148 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#149 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#150 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#151 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true)) AS year_total#29]
            :              +- Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, ws_ext_discount_amt#150, ws_ext_sales_price#151, ws_ext_wholesale_cost#149, ws_ext_list_price#148, d_year#64]
            :                 +- Join Inner, (ws_sold_date_sk#153 = d_date_sk#72)
            :                    :- Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, ws_sold_date_sk#153, ws_ext_discount_amt#150, ws_ext_sales_price#151, ws_ext_wholesale_cost#149, ws_ext_list_price#148]
            :                    :  +- Join Inner, (c_customer_sk#69 = ws_bill_customer_sk#152)
            :                    :     :- Project [c_customer_sk#69, c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63]
            :                    :     :  +- Filter (isnotnull(c_customer_sk#69) AND isnotnull(c_customer_id#57))
            :                    :     :     +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
            :                    :     +- Project [ws_sold_date_sk#153, ws_bill_customer_sk#152, ws_ext_discount_amt#150, ws_ext_sales_price#151, ws_ext_wholesale_cost#149, ws_ext_list_price#148]
            :                    :        +- Filter (isnotnull(ws_bill_customer_sk#152) AND isnotnull(ws_sold_date_sk#153))
            :                    :           +- Relation[ws_sold_date_sk#153,ws_sold_time_sk#154,ws_ship_date_sk#155,ws_item_sk#156,ws_bill_customer_sk#152,ws_bill_cdemo_sk#157,ws_bill_hdemo_sk#158,ws_bill_addr_sk#159,ws_ship_customer_sk#160,ws_ship_cdemo_sk#161,ws_ship_hdemo_sk#162,ws_ship_addr_sk#163,ws_web_page_sk#164,ws_web_site_sk#165,ws_ship_mode_sk#166,ws_warehouse_sk#167,ws_promo_sk#168,ws_order_number#169,ws_quantity#170,ws_wholesale_cost#171,ws_list_price#172,ws_sales_price#173,ws_ext_discount_amt#150,ws_ext_sales_price#151,... 10 more fields] parquet
            :                    +- Project [d_date_sk#72, d_year#64]
            :                       +- Filter ((isnotnull(d_year#64) AND (d_year#64 = 2001)) AND isnotnull(d_date_sk#72))
            :                          +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet
            +- Aggregate [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], [c_customer_id#57 AS customer_id#41, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#148 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#149 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#150 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#151 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true)) AS year_total#56]
               +- Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, ws_ext_discount_amt#150, ws_ext_sales_price#151, ws_ext_wholesale_cost#149, ws_ext_list_price#148, d_year#64]
                  +- Join Inner, (ws_sold_date_sk#153 = d_date_sk#72)
                     :- Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, ws_sold_date_sk#153, ws_ext_discount_amt#150, ws_ext_sales_price#151, ws_ext_wholesale_cost#149, ws_ext_list_price#148]
                     :  +- Join Inner, (c_customer_sk#69 = ws_bill_customer_sk#152)
                     :     :- Project [c_customer_sk#69, c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63]
                     :     :  +- Filter (isnotnull(c_customer_sk#69) AND isnotnull(c_customer_id#57))
                     :     :     +- Relation[c_customer_sk#69,c_customer_id#57,c_current_cdemo_sk#73,c_current_hdemo_sk#74,c_current_addr_sk#75,c_first_shipto_date_sk#76,c_first_sales_date_sk#77,c_salutation#78,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_day#79,c_birth_month#80,c_birth_year#81,c_birth_country#61,c_login#62,c_email_address#63,c_last_review_date#82] parquet
                     :     +- Project [ws_sold_date_sk#153, ws_bill_customer_sk#152, ws_ext_discount_amt#150, ws_ext_sales_price#151, ws_ext_wholesale_cost#149, ws_ext_list_price#148]
                     :        +- Filter (isnotnull(ws_bill_customer_sk#152) AND isnotnull(ws_sold_date_sk#153))
                     :           +- Relation[ws_sold_date_sk#153,ws_sold_time_sk#154,ws_ship_date_sk#155,ws_item_sk#156,ws_bill_customer_sk#152,ws_bill_cdemo_sk#157,ws_bill_hdemo_sk#158,ws_bill_addr_sk#159,ws_ship_customer_sk#160,ws_ship_cdemo_sk#161,ws_ship_hdemo_sk#162,ws_ship_addr_sk#163,ws_web_page_sk#164,ws_web_site_sk#165,ws_ship_mode_sk#166,ws_warehouse_sk#167,ws_promo_sk#168,ws_order_number#169,ws_quantity#170,ws_wholesale_cost#171,ws_list_price#172,ws_sales_price#173,ws_ext_discount_amt#150,ws_ext_sales_price#151,... 10 more fields] parquet
                     +- Project [d_date_sk#72, d_year#64]
                        +- Filter ((isnotnull(d_year#64) AND (d_year#64 = 2002)) AND isnotnull(d_date_sk#72))
                           +- Relation[d_date_sk#72,d_date_id#100,d_date#101,d_month_seq#102,d_week_seq#103,d_quarter_seq#104,d_year#64,d_dow#105,d_moy#106,d_dom#107,d_qoy#108,d_fy_year#109,d_fy_quarter_seq#110,d_fy_week_seq#111,d_day_name#112,d_quarter_name#113,d_holiday#114,d_weekend#115,d_following_holiday#116,d_first_dom#117,d_last_dom#118,d_same_day_ly#119,d_same_day_lq#120,d_current_day#121,... 4 more fields] parquet

== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[customer_id#31 ASC NULLS FIRST,customer_first_name#32 ASC NULLS FIRST,customer_last_name#33 ASC NULLS FIRST,customer_preferred_cust_flag#34 ASC NULLS FIRST,customer_birth_country#35 ASC NULLS FIRST,customer_login#36 ASC NULLS FIRST,customer_email_address#37 ASC NULLS FIRST], output=[customer_id#31,customer_first_name#32,customer_last_name#33,customer_preferred_cust_flag#34,customer_birth_country#35,customer_login#36,customer_email_address#37])
+- *(24) Project [customer_id#31, customer_first_name#32, customer_last_name#33, customer_preferred_cust_flag#34, customer_birth_country#35, customer_login#36, customer_email_address#37]
   +- *(24) BroadcastHashJoin [customer_id#1], [customer_id#41], Inner, BuildRight, (CASE WHEN (year_total#52 > 0.000000) THEN CheckOverflow((promote_precision(year_total#54) / promote_precision(year_total#52)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#53 > 0.000000) THEN CheckOverflow((promote_precision(year_total#56) / promote_precision(year_total#53)), DecimalType(38,14), true) ELSE null END), false
      :- *(24) Project [customer_id#1, customer_id#31, customer_first_name#32, customer_last_name#33, customer_preferred_cust_flag#34, customer_birth_country#35, customer_login#36, customer_email_address#37, year_total#52, year_total#54, year_total#53]
      :  +- *(24) BroadcastHashJoin [customer_id#1], [customer_id#40], Inner, BuildRight, false
      :     :- *(24) Project [customer_id#1, customer_id#31, customer_first_name#32, customer_last_name#33, customer_preferred_cust_flag#34, customer_birth_country#35, customer_login#36, customer_email_address#37, year_total#52, year_total#54]
      :     :  +- *(24) BroadcastHashJoin [customer_id#1], [customer_id#38], Inner, BuildRight, (CASE WHEN (year_total#52 > 0.000000) THEN CheckOverflow((promote_precision(year_total#54) / promote_precision(year_total#52)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#9 > 0.000000) THEN CheckOverflow((promote_precision(year_total#55) / promote_precision(year_total#9)), DecimalType(38,14), true) ELSE null END), false
      :     :     :- *(24) Project [customer_id#1, year_total#9, customer_id#31, customer_first_name#32, customer_last_name#33, customer_preferred_cust_flag#34, customer_birth_country#35, customer_login#36, customer_email_address#37, year_total#55, year_total#52]
      :     :     :  +- *(24) BroadcastHashJoin [customer_id#1], [customer_id#39], Inner, BuildRight, false
      :     :     :     :- *(24) BroadcastHashJoin [customer_id#1], [customer_id#31], Inner, BuildRight, false
      :     :     :     :  :- *(24) Filter (isnotnull(year_total#9) AND (year_total#9 > 0.000000))
      :     :     :     :  :  +- *(24) HashAggregate(keys=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#66 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#67 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#68 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1, year_total#9])
      :     :     :     :  :     +- Exchange hashpartitioning(c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64, 5), true, [id=#198]
      :     :     :     :  :        +- *(3) HashAggregate(keys=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#66 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#67 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#68 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64, sum#199, isEmpty#200])
      :     :     :     :  :           +- *(3) Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, ss_ext_discount_amt#67, ss_ext_sales_price#68, ss_ext_wholesale_cost#66, ss_ext_list_price#65, d_year#64]
      :     :     :     :  :              +- *(3) BroadcastHashJoin [ss_sold_date_sk#71], [d_date_sk#72], Inner, BuildRight, false
      :     :     :     :  :                 :- *(3) Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, ss_sold_date_sk#71, ss_ext_discount_amt#67, ss_ext_sales_price#68, ss_ext_wholesale_cost#66, ss_ext_list_price#65]
      :     :     :     :  :                 :  +- *(3) BroadcastHashJoin [c_customer_sk#69], [ss_customer_sk#70], Inner, BuildRight, false
      :     :     :     :  :                 :     :- *(3) Filter (isnotnull(c_customer_sk#69) AND isnotnull(c_customer_id#57))
      :     :     :     :  :                 :     :  +- *(3) ColumnarToRow
      :     :     :     :  :                 :     :     +- FileScan parquet default.customer[c_customer_sk#69,c_customer_id#57,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_country#61,c_login#62,c_email_address#63] Batched: true, DataFilters: [isnotnull(c_customer_sk#69), isnotnull(c_customer_id#57)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
      :     :     :     :  :                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#201]
      :     :     :     :  :                 :        +- *(1) Filter (isnotnull(ss_customer_sk#70) AND isnotnull(ss_sold_date_sk#71))
      :     :     :     :  :                 :           +- *(1) ColumnarToRow
      :     :     :     :  :                 :              +- FileScan parquet default.store_sales[ss_sold_date_sk#71,ss_customer_sk#70,ss_ext_discount_amt#67,ss_ext_sales_price#68,ss_ext_wholesale_cost#66,ss_ext_list_price#65] Batched: true, DataFilters: [isnotnull(ss_customer_sk#70), isnotnull(ss_sold_date_sk#71)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price...
      :     :     :     :  :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#202]
      :     :     :     :  :                    +- *(2) Filter ((isnotnull(d_year#64) AND (d_year#64 = 2001)) AND isnotnull(d_date_sk#72))
      :     :     :     :  :                       +- *(2) ColumnarToRow
      :     :     :     :  :                          +- FileScan parquet default.date_dim[d_date_sk#72,d_year#64] Batched: true, DataFilters: [isnotnull(d_year#64), (d_year#64 = 2001), isnotnull(d_date_sk#72)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :     :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#203]
      :     :     :     :     +- *(7) HashAggregate(keys=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#66 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#67 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#68 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#31, customer_first_name#32, customer_last_name#33, customer_preferred_cust_flag#34, customer_birth_country#35, customer_login#36, customer_email_address#37, year_total#55])
      :     :     :     :        +- Exchange hashpartitioning(c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64, 5), true, [id=#204]
      :     :     :     :           +- *(6) HashAggregate(keys=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#66 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#67 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#68 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64, sum#205, isEmpty#206])
      :     :     :     :              +- *(6) Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, ss_ext_discount_amt#67, ss_ext_sales_price#68, ss_ext_wholesale_cost#66, ss_ext_list_price#65, d_year#64]
      :     :     :     :                 +- *(6) BroadcastHashJoin [ss_sold_date_sk#71], [d_date_sk#72], Inner, BuildRight, false
      :     :     :     :                    :- *(6) Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, ss_sold_date_sk#71, ss_ext_discount_amt#67, ss_ext_sales_price#68, ss_ext_wholesale_cost#66, ss_ext_list_price#65]
      :     :     :     :                    :  +- *(6) BroadcastHashJoin [c_customer_sk#69], [ss_customer_sk#70], Inner, BuildRight, false
      :     :     :     :                    :     :- *(6) Filter (isnotnull(c_customer_sk#69) AND isnotnull(c_customer_id#57))
      :     :     :     :                    :     :  +- *(6) ColumnarToRow
      :     :     :     :                    :     :     +- FileScan parquet default.customer[c_customer_sk#69,c_customer_id#57,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_country#61,c_login#62,c_email_address#63] Batched: true, DataFilters: [isnotnull(c_customer_sk#69), isnotnull(c_customer_id#57)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
      :     :     :     :                    :     +- ReusedExchange [ss_sold_date_sk#71, ss_customer_sk#70, ss_ext_discount_amt#67, ss_ext_sales_price#68, ss_ext_wholesale_cost#66, ss_ext_list_price#65], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#201]
      :     :     :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#207]
      :     :     :     :                       +- *(5) Filter ((isnotnull(d_year#64) AND (d_year#64 = 2002)) AND isnotnull(d_date_sk#72))
      :     :     :     :                          +- *(5) ColumnarToRow
      :     :     :     :                             +- FileScan parquet default.date_dim[d_date_sk#72,d_year#64] Batched: true, DataFilters: [isnotnull(d_year#64), (d_year#64 = 2002), isnotnull(d_date_sk#72)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#208]
      :     :     :        +- *(11) Project [customer_id#11 AS customer_id#39, year_total#19 AS year_total#52]
      :     :     :           +- *(11) Filter (isnotnull(year_total#19) AND (year_total#19 > 0.000000))
      :     :     :              +- *(11) HashAggregate(keys=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#122 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#124 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#125 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#11, year_total#19])
      :     :     :                 +- Exchange hashpartitioning(c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64, 5), true, [id=#209]
      :     :     :                    +- *(10) HashAggregate(keys=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#122 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#124 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#125 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64, sum#210, isEmpty#211])
      :     :     :                       +- *(10) Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, cs_ext_discount_amt#124, cs_ext_sales_price#125, cs_ext_wholesale_cost#123, cs_ext_list_price#122, d_year#64]
      :     :     :                          +- *(10) BroadcastHashJoin [cs_sold_date_sk#127], [d_date_sk#72], Inner, BuildRight, false
      :     :     :                             :- *(10) Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, cs_sold_date_sk#127, cs_ext_discount_amt#124, cs_ext_sales_price#125, cs_ext_wholesale_cost#123, cs_ext_list_price#122]
      :     :     :                             :  +- *(10) BroadcastHashJoin [c_customer_sk#69], [cs_bill_customer_sk#126], Inner, BuildRight, false
      :     :     :                             :     :- *(10) Filter (isnotnull(c_customer_sk#69) AND isnotnull(c_customer_id#57))
      :     :     :                             :     :  +- *(10) ColumnarToRow
      :     :     :                             :     :     +- FileScan parquet default.customer[c_customer_sk#69,c_customer_id#57,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_country#61,c_login#62,c_email_address#63] Batched: true, DataFilters: [isnotnull(c_customer_sk#69), isnotnull(c_customer_id#57)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
      :     :     :                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#212]
      :     :     :                             :        +- *(8) Filter (isnotnull(cs_bill_customer_sk#126) AND isnotnull(cs_sold_date_sk#127))
      :     :     :                             :           +- *(8) ColumnarToRow
      :     :     :                             :              +- FileScan parquet default.catalog_sales[cs_sold_date_sk#127,cs_bill_customer_sk#126,cs_ext_discount_amt#124,cs_ext_sales_price#125,cs_ext_wholesale_cost#123,cs_ext_list_price#122] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#126), isnotnull(cs_sold_date_sk#127)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_...
      :     :     :                             +- ReusedExchange [d_date_sk#72, d_year#64], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#202]
      :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#213]
      :     :        +- *(15) HashAggregate(keys=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#122 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#124 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#125 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#38, year_total#54])
      :     :           +- Exchange hashpartitioning(c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64, 5), true, [id=#214]
      :     :              +- *(14) HashAggregate(keys=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#122 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#124 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#125 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64, sum#215, isEmpty#216])
      :     :                 +- *(14) Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, cs_ext_discount_amt#124, cs_ext_sales_price#125, cs_ext_wholesale_cost#123, cs_ext_list_price#122, d_year#64]
      :     :                    +- *(14) BroadcastHashJoin [cs_sold_date_sk#127], [d_date_sk#72], Inner, BuildRight, false
      :     :                       :- *(14) Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, cs_sold_date_sk#127, cs_ext_discount_amt#124, cs_ext_sales_price#125, cs_ext_wholesale_cost#123, cs_ext_list_price#122]
      :     :                       :  +- *(14) BroadcastHashJoin [c_customer_sk#69], [cs_bill_customer_sk#126], Inner, BuildRight, false
      :     :                       :     :- *(14) Filter (isnotnull(c_customer_sk#69) AND isnotnull(c_customer_id#57))
      :     :                       :     :  +- *(14) ColumnarToRow
      :     :                       :     :     +- FileScan parquet default.customer[c_customer_sk#69,c_customer_id#57,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_country#61,c_login#62,c_email_address#63] Batched: true, DataFilters: [isnotnull(c_customer_sk#69), isnotnull(c_customer_id#57)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
      :     :                       :     +- ReusedExchange [cs_sold_date_sk#127, cs_bill_customer_sk#126, cs_ext_discount_amt#124, cs_ext_sales_price#125, cs_ext_wholesale_cost#123, cs_ext_list_price#122], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#212]
      :     :                       +- ReusedExchange [d_date_sk#72, d_year#64], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#207]
      :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#217]
      :        +- *(19) Project [customer_id#21 AS customer_id#40, year_total#29 AS year_total#53]
      :           +- *(19) Filter (isnotnull(year_total#29) AND (year_total#29 > 0.000000))
      :              +- *(19) HashAggregate(keys=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#148 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#149 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#150 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#151 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#21, year_total#29])
      :                 +- Exchange hashpartitioning(c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64, 5), true, [id=#218]
      :                    +- *(18) HashAggregate(keys=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#148 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#149 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#150 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#151 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64, sum#219, isEmpty#220])
      :                       +- *(18) Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, ws_ext_discount_amt#150, ws_ext_sales_price#151, ws_ext_wholesale_cost#149, ws_ext_list_price#148, d_year#64]
      :                          +- *(18) BroadcastHashJoin [ws_sold_date_sk#153], [d_date_sk#72], Inner, BuildRight, false
      :                             :- *(18) Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, ws_sold_date_sk#153, ws_ext_discount_amt#150, ws_ext_sales_price#151, ws_ext_wholesale_cost#149, ws_ext_list_price#148]
      :                             :  +- *(18) BroadcastHashJoin [c_customer_sk#69], [ws_bill_customer_sk#152], Inner, BuildRight, false
      :                             :     :- *(18) Filter (isnotnull(c_customer_sk#69) AND isnotnull(c_customer_id#57))
      :                             :     :  +- *(18) ColumnarToRow
      :                             :     :     +- FileScan parquet default.customer[c_customer_sk#69,c_customer_id#57,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_country#61,c_login#62,c_email_address#63] Batched: true, DataFilters: [isnotnull(c_customer_sk#69), isnotnull(c_customer_id#57)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
      :                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#221]
      :                             :        +- *(16) Filter (isnotnull(ws_bill_customer_sk#152) AND isnotnull(ws_sold_date_sk#153))
      :                             :           +- *(16) ColumnarToRow
      :                             :              +- FileScan parquet default.web_sales[ws_sold_date_sk#153,ws_bill_customer_sk#152,ws_ext_discount_amt#150,ws_ext_sales_price#151,ws_ext_wholesale_cost#149,ws_ext_list_price#148] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#152), isnotnull(ws_sold_date_sk#153)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_...
      :                             +- ReusedExchange [d_date_sk#72, d_year#64], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#202]
      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#222]
         +- *(23) HashAggregate(keys=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#148 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#149 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#150 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#151 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#41, year_total#56])
            +- Exchange hashpartitioning(c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64, 5), true, [id=#223]
               +- *(22) HashAggregate(keys=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#148 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#149 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#150 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#151 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#64, sum#224, isEmpty#225])
                  +- *(22) Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, ws_ext_discount_amt#150, ws_ext_sales_price#151, ws_ext_wholesale_cost#149, ws_ext_list_price#148, d_year#64]
                     +- *(22) BroadcastHashJoin [ws_sold_date_sk#153], [d_date_sk#72], Inner, BuildRight, false
                        :- *(22) Project [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, ws_sold_date_sk#153, ws_ext_discount_amt#150, ws_ext_sales_price#151, ws_ext_wholesale_cost#149, ws_ext_list_price#148]
                        :  +- *(22) BroadcastHashJoin [c_customer_sk#69], [ws_bill_customer_sk#152], Inner, BuildRight, false
                        :     :- *(22) Filter (isnotnull(c_customer_sk#69) AND isnotnull(c_customer_id#57))
                        :     :  +- *(22) ColumnarToRow
                        :     :     +- FileScan parquet default.customer[c_customer_sk#69,c_customer_id#57,c_first_name#58,c_last_name#59,c_preferred_cust_flag#60,c_birth_country#61,c_login#62,c_email_address#63] Batched: true, DataFilters: [isnotnull(c_customer_sk#69), isnotnull(c_customer_id#57)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
                        :     +- ReusedExchange [ws_sold_date_sk#153, ws_bill_customer_sk#152, ws_ext_discount_amt#150, ws_ext_sales_price#151, ws_ext_wholesale_cost#149, ws_ext_list_price#148], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#221]
                        +- ReusedExchange [d_date_sk#72, d_year#64], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#207]
