== Parsed Logical Plan ==
'GlobalLimit 100
+- 'LocalLimit 100
   +- 'Sort ['ca_zip ASC NULLS FIRST], true
      +- 'Aggregate ['ca_zip], ['ca_zip, unresolvedalias('sum('cs_sales_price), None)]
         +- 'Filter (((('cs_bill_customer_sk = 'c_customer_sk) AND ('c_current_addr_sk = 'ca_address_sk)) AND (('substr('ca_zip, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR 'ca_state IN (CA,WA,GA)) OR ('cs_sales_price > 500))) AND ((('cs_sold_date_sk = 'd_date_sk) AND ('d_qoy = 2)) AND ('d_year = 2001)))
            +- 'Join Inner
               :- 'Join Inner
               :  :- 'Join Inner
               :  :  :- 'UnresolvedRelation [catalog_sales]
               :  :  +- 'UnresolvedRelation [customer]
               :  +- 'UnresolvedRelation [customer_address]
               +- 'UnresolvedRelation [date_dim]

== Analyzed Logical Plan ==
ca_zip: string, sum(cs_sales_price): decimal(17,2)
GlobalLimit 100
+- LocalLimit 100
   +- Project [ca_zip#1, sum(cs_sales_price)#2]
      +- Sort [ca_zip#1 ASC NULLS FIRST], true
         +- Aggregate [ca_zip#1], [ca_zip#1, sum(cs_sales_price#3) AS sum(cs_sales_price)#2]
            +- Filter ((((cs_bill_customer_sk#4 = c_customer_sk#5) AND (c_current_addr_sk#6 = ca_address_sk#7)) AND ((substr(ca_zip#1, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR ca_state#8 IN (CA,WA,GA)) OR (cast(cs_sales_price#3 as decimal(7,2)) > cast(cast(500 as decimal(3,0)) as decimal(7,2))))) AND (((cs_sold_date_sk#9 = d_date_sk#10) AND (d_qoy#11 = 2)) AND (d_year#12 = 2001)))
               +- Join Inner
                  :- Join Inner
                  :  :- Join Inner
                  :  :  :- SubqueryAlias spark_catalog.default.catalog_sales
                  :  :  :  +- Relation[cs_sold_date_sk#9,cs_sold_time_sk#13,cs_ship_date_sk#14,cs_bill_customer_sk#4,cs_bill_cdemo_sk#15,cs_bill_hdemo_sk#16,cs_bill_addr_sk#17,cs_ship_customer_sk#18,cs_ship_cdemo_sk#19,cs_ship_hdemo_sk#20,cs_ship_addr_sk#21,cs_call_center_sk#22,cs_catalog_page_sk#23,cs_ship_mode_sk#24,cs_warehouse_sk#25,cs_item_sk#26,cs_promo_sk#27,cs_order_number#28,cs_quantity#29,cs_wholesale_cost#30,cs_list_price#31,cs_sales_price#3,cs_ext_discount_amt#32,cs_ext_sales_price#33,... 10 more fields] parquet
                  :  :  +- SubqueryAlias spark_catalog.default.customer
                  :  :     +- Relation[c_customer_sk#5,c_customer_id#34,c_current_cdemo_sk#35,c_current_hdemo_sk#36,c_current_addr_sk#6,c_first_shipto_date_sk#37,c_first_sales_date_sk#38,c_salutation#39,c_first_name#40,c_last_name#41,c_preferred_cust_flag#42,c_birth_day#43,c_birth_month#44,c_birth_year#45,c_birth_country#46,c_login#47,c_email_address#48,c_last_review_date#49] parquet
                  :  +- SubqueryAlias spark_catalog.default.customer_address
                  :     +- Relation[ca_address_sk#7,ca_address_id#50,ca_street_number#51,ca_street_name#52,ca_street_type#53,ca_suite_number#54,ca_city#55,ca_county#56,ca_state#8,ca_zip#1,ca_country#57,ca_gmt_offset#58,ca_location_type#59] parquet
                  +- SubqueryAlias spark_catalog.default.date_dim
                     +- Relation[d_date_sk#10,d_date_id#60,d_date#61,d_month_seq#62,d_week_seq#63,d_quarter_seq#64,d_year#12,d_dow#65,d_moy#66,d_dom#67,d_qoy#11,d_fy_year#68,d_fy_quarter_seq#69,d_fy_week_seq#70,d_day_name#71,d_quarter_name#72,d_holiday#73,d_weekend#74,d_following_holiday#75,d_first_dom#76,d_last_dom#77,d_same_day_ly#78,d_same_day_lq#79,d_current_day#80,... 4 more fields] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Sort [ca_zip#1 ASC NULLS FIRST], true
      +- Aggregate [ca_zip#1], [ca_zip#1, MakeDecimal(sum(UnscaledValue(cs_sales_price#3)),17,2) AS sum(cs_sales_price)#2]
         +- Project [cs_sales_price#3, ca_zip#1]
            +- Join Inner, (cs_sold_date_sk#9 = d_date_sk#10)
               :- Project [cs_sold_date_sk#9, cs_sales_price#3, ca_zip#1]
               :  +- Join Inner, ((c_current_addr_sk#6 = ca_address_sk#7) AND ((substr(ca_zip#1, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR ca_state#8 IN (CA,WA,GA)) OR (cs_sales_price#3 > 500.00)))
               :     :- Project [cs_sold_date_sk#9, cs_sales_price#3, c_current_addr_sk#6]
               :     :  +- Join Inner, (cs_bill_customer_sk#4 = c_customer_sk#5)
               :     :     :- Project [cs_sold_date_sk#9, cs_bill_customer_sk#4, cs_sales_price#3]
               :     :     :  +- Filter (isnotnull(cs_bill_customer_sk#4) AND isnotnull(cs_sold_date_sk#9))
               :     :     :     +- Relation[cs_sold_date_sk#9,cs_sold_time_sk#13,cs_ship_date_sk#14,cs_bill_customer_sk#4,cs_bill_cdemo_sk#15,cs_bill_hdemo_sk#16,cs_bill_addr_sk#17,cs_ship_customer_sk#18,cs_ship_cdemo_sk#19,cs_ship_hdemo_sk#20,cs_ship_addr_sk#21,cs_call_center_sk#22,cs_catalog_page_sk#23,cs_ship_mode_sk#24,cs_warehouse_sk#25,cs_item_sk#26,cs_promo_sk#27,cs_order_number#28,cs_quantity#29,cs_wholesale_cost#30,cs_list_price#31,cs_sales_price#3,cs_ext_discount_amt#32,cs_ext_sales_price#33,... 10 more fields] parquet
               :     :     +- Project [c_customer_sk#5, c_current_addr_sk#6]
               :     :        +- Filter (isnotnull(c_customer_sk#5) AND isnotnull(c_current_addr_sk#6))
               :     :           +- Relation[c_customer_sk#5,c_customer_id#34,c_current_cdemo_sk#35,c_current_hdemo_sk#36,c_current_addr_sk#6,c_first_shipto_date_sk#37,c_first_sales_date_sk#38,c_salutation#39,c_first_name#40,c_last_name#41,c_preferred_cust_flag#42,c_birth_day#43,c_birth_month#44,c_birth_year#45,c_birth_country#46,c_login#47,c_email_address#48,c_last_review_date#49] parquet
               :     +- Project [ca_address_sk#7, ca_state#8, ca_zip#1]
               :        +- Filter isnotnull(ca_address_sk#7)
               :           +- Relation[ca_address_sk#7,ca_address_id#50,ca_street_number#51,ca_street_name#52,ca_street_type#53,ca_suite_number#54,ca_city#55,ca_county#56,ca_state#8,ca_zip#1,ca_country#57,ca_gmt_offset#58,ca_location_type#59] parquet
               +- Project [d_date_sk#10]
                  +- Filter ((((isnotnull(d_qoy#11) AND isnotnull(d_year#12)) AND (d_qoy#11 = 2)) AND (d_year#12 = 2001)) AND isnotnull(d_date_sk#10))
                     +- Relation[d_date_sk#10,d_date_id#60,d_date#61,d_month_seq#62,d_week_seq#63,d_quarter_seq#64,d_year#12,d_dow#65,d_moy#66,d_dom#67,d_qoy#11,d_fy_year#68,d_fy_quarter_seq#69,d_fy_week_seq#70,d_day_name#71,d_quarter_name#72,d_holiday#73,d_weekend#74,d_following_holiday#75,d_first_dom#76,d_last_dom#77,d_same_day_ly#78,d_same_day_lq#79,d_current_day#80,... 4 more fields] parquet

== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[ca_zip#1 ASC NULLS FIRST], output=[ca_zip#1,sum(cs_sales_price)#2])
+- *(5) HashAggregate(keys=[ca_zip#1], functions=[sum(UnscaledValue(cs_sales_price#3))], output=[ca_zip#1, sum(cs_sales_price)#2])
   +- Exchange hashpartitioning(ca_zip#1, 5), true, [id=#81]
      +- *(4) HashAggregate(keys=[ca_zip#1], functions=[partial_sum(UnscaledValue(cs_sales_price#3))], output=[ca_zip#1, sum#82])
         +- *(4) Project [cs_sales_price#3, ca_zip#1]
            +- *(4) BroadcastHashJoin [cs_sold_date_sk#9], [d_date_sk#10], Inner, BuildRight, false
               :- *(4) Project [cs_sold_date_sk#9, cs_sales_price#3, ca_zip#1]
               :  +- *(4) BroadcastHashJoin [c_current_addr_sk#6], [ca_address_sk#7], Inner, BuildRight, ((substr(ca_zip#1, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR ca_state#8 IN (CA,WA,GA)) OR (cs_sales_price#3 > 500.00)), false
               :     :- *(4) Project [cs_sold_date_sk#9, cs_sales_price#3, c_current_addr_sk#6]
               :     :  +- *(4) BroadcastHashJoin [cs_bill_customer_sk#4], [c_customer_sk#5], Inner, BuildRight, false
               :     :     :- *(4) Project [cs_sold_date_sk#9, cs_bill_customer_sk#4, cs_sales_price#3]
               :     :     :  +- *(4) Filter (isnotnull(cs_bill_customer_sk#4) AND isnotnull(cs_sold_date_sk#9))
               :     :     :     +- *(4) ColumnarToRow
               :     :     :        +- FileScan parquet default.catalog_sales[cs_sold_date_sk#9,cs_bill_customer_sk#4,cs_sales_price#3] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#4), isnotnull(cs_sold_date_sk#9)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_sales_price:decimal(7,2)>
               :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#83]
               :     :        +- *(1) Project [c_customer_sk#5, c_current_addr_sk#6]
               :     :           +- *(1) Filter (isnotnull(c_customer_sk#5) AND isnotnull(c_current_addr_sk#6))
               :     :              +- *(1) ColumnarToRow
               :     :                 +- FileScan parquet default.customer[c_customer_sk#5,c_current_addr_sk#6] Batched: true, DataFilters: [isnotnull(c_customer_sk#5), isnotnull(c_current_addr_sk#6)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>
               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#84]
               :        +- *(2) Project [ca_address_sk#7, ca_state#8, ca_zip#1]
               :           +- *(2) Filter isnotnull(ca_address_sk#7)
               :              +- *(2) ColumnarToRow
               :                 +- FileScan parquet default.customer_address[ca_address_sk#7,ca_state#8,ca_zip#1] Batched: true, DataFilters: [isnotnull(ca_address_sk#7)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string>
               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#85]
                  +- *(3) Project [d_date_sk#10]
                     +- *(3) Filter ((((isnotnull(d_qoy#11) AND isnotnull(d_year#12)) AND (d_qoy#11 = 2)) AND (d_year#12 = 2001)) AND isnotnull(d_date_sk#10))
                        +- *(3) ColumnarToRow
                           +- FileScan parquet default.date_dim[d_date_sk#10,d_year#12,d_qoy#11] Batched: true, DataFilters: [isnotnull(d_qoy#11), isnotnull(d_year#12), (d_qoy#11 = 2), (d_year#12 = 2001), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>
