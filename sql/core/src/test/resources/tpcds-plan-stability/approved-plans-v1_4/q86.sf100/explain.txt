== Parsed Logical Plan ==
'GlobalLimit 100
+- 'LocalLimit 100
   +- 'Sort ['lochierarchy DESC NULLS LAST, CASE WHEN ('lochierarchy = 0) THEN 'i_category END ASC NULLS FIRST, 'rank_within_parent ASC NULLS FIRST], true
      +- 'Aggregate ['ROLLUP('i_category, 'i_class)], ['sum('ws_net_paid) AS total_sum#1, 'i_category, 'i_class, ('grouping('i_category) + 'grouping('i_class)) AS lochierarchy#2, 'rank() windowspecdefinition(('grouping('i_category) + 'grouping('i_class)), CASE WHEN ('grouping('i_class) = 0) THEN 'i_category END, 'sum('ws_net_paid) DESC NULLS LAST, unspecifiedframe$()) AS rank_within_parent#3]
         +- 'Filter (((('d1.d_month_seq >= 1200) AND ('d1.d_month_seq <= (1200 + 11))) AND ('d1.d_date_sk = 'ws_sold_date_sk)) AND ('i_item_sk = 'ws_item_sk))
            +- 'Join Inner
               :- 'Join Inner
               :  :- 'UnresolvedRelation [web_sales]
               :  +- 'SubqueryAlias d1
               :     +- 'UnresolvedRelation [date_dim]
               +- 'UnresolvedRelation [item]

== Analyzed Logical Plan ==
total_sum: decimal(17,2), i_category: string, i_class: string, lochierarchy: tinyint, rank_within_parent: int
GlobalLimit 100
+- LocalLimit 100
   +- Sort [lochierarchy#2 DESC NULLS LAST, CASE WHEN (cast(lochierarchy#2 as int) = 0) THEN i_category#4 END ASC NULLS FIRST, rank_within_parent#3 ASC NULLS FIRST], true
      +- Project [total_sum#1, i_category#4, i_class#5, lochierarchy#2, rank_within_parent#3]
         +- Project [total_sum#1, i_category#4, i_class#5, lochierarchy#2, _w0#6, _w1#7, _w2#8, _w3#9, rank_within_parent#3, rank_within_parent#3]
            +- Window [rank(_w3#9) windowspecdefinition(_w1#7, _w2#8, _w3#9 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#3], [_w1#7, _w2#8], [_w3#9 DESC NULLS LAST]
               +- Aggregate [i_category#4, i_class#5, spark_grouping_id#10], [sum(ws_net_paid#11) AS total_sum#1, i_category#4, i_class#5, (cast((shiftright(spark_grouping_id#10, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#10, 0) & 1) as tinyint)) AS lochierarchy#2, sum(ws_net_paid#11) AS _w0#6, (cast((shiftright(spark_grouping_id#10, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#10, 0) & 1) as tinyint)) AS _w1#7, CASE WHEN (cast(cast((shiftright(spark_grouping_id#10, 0) & 1) as tinyint) as int) = 0) THEN i_category#4 END AS _w2#8, sum(ws_net_paid#11) AS _w3#9]
                  +- Expand [List(ws_sold_date_sk#12, ws_sold_time_sk#13, ws_ship_date_sk#14, ws_item_sk#15, ws_bill_customer_sk#16, ws_bill_cdemo_sk#17, ws_bill_hdemo_sk#18, ws_bill_addr_sk#19, ws_ship_customer_sk#20, ws_ship_cdemo_sk#21, ws_ship_hdemo_sk#22, ws_ship_addr_sk#23, ws_web_page_sk#24, ws_web_site_sk#25, ws_ship_mode_sk#26, ws_warehouse_sk#27, ws_promo_sk#28, ws_order_number#29, ws_quantity#30, ws_wholesale_cost#31, ws_list_price#32, ws_sales_price#33, ws_ext_discount_amt#34, ws_ext_sales_price#35, ws_ext_wholesale_cost#36, ws_ext_list_price#37, ws_ext_tax#38, ws_coupon_amt#39, ws_ext_ship_cost#40, ws_net_paid#11, ws_net_paid_inc_tax#41, ws_net_paid_inc_ship#42, ws_net_paid_inc_ship_tax#43, ws_net_profit#44, d_date_sk#45, d_date_id#46, d_date#47, d_month_seq#48, d_week_seq#49, d_quarter_seq#50, d_year#51, d_dow#52, d_moy#53, d_dom#54, d_qoy#55, d_fy_year#56, d_fy_quarter_seq#57, d_fy_week_seq#58, d_day_name#59, d_quarter_name#60, d_holiday#61, d_weekend#62, d_following_holiday#63, d_first_dom#64, d_last_dom#65, d_same_day_ly#66, d_same_day_lq#67, d_current_day#68, d_current_week#69, d_current_month#70, d_current_quarter#71, d_current_year#72, i_item_sk#73, i_item_id#74, i_rec_start_date#75, i_rec_end_date#76, i_item_desc#77, i_current_price#78, i_wholesale_cost#79, i_brand_id#80, i_brand#81, i_class_id#82, i_class#83, i_category_id#84, i_category#85, i_manufact_id#86, i_manufact#87, i_size#88, i_formulation#89, i_color#90, i_units#91, i_container#92, i_manager_id#93, i_product_name#94, i_category#95, i_class#96, 0), List(ws_sold_date_sk#12, ws_sold_time_sk#13, ws_ship_date_sk#14, ws_item_sk#15, ws_bill_customer_sk#16, ws_bill_cdemo_sk#17, ws_bill_hdemo_sk#18, ws_bill_addr_sk#19, ws_ship_customer_sk#20, ws_ship_cdemo_sk#21, ws_ship_hdemo_sk#22, ws_ship_addr_sk#23, ws_web_page_sk#24, ws_web_site_sk#25, ws_ship_mode_sk#26, ws_warehouse_sk#27, ws_promo_sk#28, ws_order_number#29, ws_quantity#30, ws_wholesale_cost#31, ws_list_price#32, ws_sales_price#33, ws_ext_discount_amt#34, ws_ext_sales_price#35, ws_ext_wholesale_cost#36, ws_ext_list_price#37, ws_ext_tax#38, ws_coupon_amt#39, ws_ext_ship_cost#40, ws_net_paid#11, ws_net_paid_inc_tax#41, ws_net_paid_inc_ship#42, ws_net_paid_inc_ship_tax#43, ws_net_profit#44, d_date_sk#45, d_date_id#46, d_date#47, d_month_seq#48, d_week_seq#49, d_quarter_seq#50, d_year#51, d_dow#52, d_moy#53, d_dom#54, d_qoy#55, d_fy_year#56, d_fy_quarter_seq#57, d_fy_week_seq#58, d_day_name#59, d_quarter_name#60, d_holiday#61, d_weekend#62, d_following_holiday#63, d_first_dom#64, d_last_dom#65, d_same_day_ly#66, d_same_day_lq#67, d_current_day#68, d_current_week#69, d_current_month#70, d_current_quarter#71, d_current_year#72, i_item_sk#73, i_item_id#74, i_rec_start_date#75, i_rec_end_date#76, i_item_desc#77, i_current_price#78, i_wholesale_cost#79, i_brand_id#80, i_brand#81, i_class_id#82, i_class#83, i_category_id#84, i_category#85, i_manufact_id#86, i_manufact#87, i_size#88, i_formulation#89, i_color#90, i_units#91, i_container#92, i_manager_id#93, i_product_name#94, i_category#95, null, 1), List(ws_sold_date_sk#12, ws_sold_time_sk#13, ws_ship_date_sk#14, ws_item_sk#15, ws_bill_customer_sk#16, ws_bill_cdemo_sk#17, ws_bill_hdemo_sk#18, ws_bill_addr_sk#19, ws_ship_customer_sk#20, ws_ship_cdemo_sk#21, ws_ship_hdemo_sk#22, ws_ship_addr_sk#23, ws_web_page_sk#24, ws_web_site_sk#25, ws_ship_mode_sk#26, ws_warehouse_sk#27, ws_promo_sk#28, ws_order_number#29, ws_quantity#30, ws_wholesale_cost#31, ws_list_price#32, ws_sales_price#33, ws_ext_discount_amt#34, ws_ext_sales_price#35, ws_ext_wholesale_cost#36, ws_ext_list_price#37, ws_ext_tax#38, ws_coupon_amt#39, ws_ext_ship_cost#40, ws_net_paid#11, ws_net_paid_inc_tax#41, ws_net_paid_inc_ship#42, ws_net_paid_inc_ship_tax#43, ws_net_profit#44, d_date_sk#45, d_date_id#46, d_date#47, d_month_seq#48, d_week_seq#49, d_quarter_seq#50, d_year#51, d_dow#52, d_moy#53, d_dom#54, d_qoy#55, d_fy_year#56, d_fy_quarter_seq#57, d_fy_week_seq#58, d_day_name#59, d_quarter_name#60, d_holiday#61, d_weekend#62, d_following_holiday#63, d_first_dom#64, d_last_dom#65, d_same_day_ly#66, d_same_day_lq#67, d_current_day#68, d_current_week#69, d_current_month#70, d_current_quarter#71, d_current_year#72, i_item_sk#73, i_item_id#74, i_rec_start_date#75, i_rec_end_date#76, i_item_desc#77, i_current_price#78, i_wholesale_cost#79, i_brand_id#80, i_brand#81, i_class_id#82, i_class#83, i_category_id#84, i_category#85, i_manufact_id#86, i_manufact#87, i_size#88, i_formulation#89, i_color#90, i_units#91, i_container#92, i_manager_id#93, i_product_name#94, null, null, 3)], [ws_sold_date_sk#12, ws_sold_time_sk#13, ws_ship_date_sk#14, ws_item_sk#15, ws_bill_customer_sk#16, ws_bill_cdemo_sk#17, ws_bill_hdemo_sk#18, ws_bill_addr_sk#19, ws_ship_customer_sk#20, ws_ship_cdemo_sk#21, ws_ship_hdemo_sk#22, ws_ship_addr_sk#23, ws_web_page_sk#24, ws_web_site_sk#25, ws_ship_mode_sk#26, ws_warehouse_sk#27, ws_promo_sk#28, ws_order_number#29, ws_quantity#30, ws_wholesale_cost#31, ws_list_price#32, ws_sales_price#33, ws_ext_discount_amt#34, ws_ext_sales_price#35, ... 63 more fields]
                     +- Project [ws_sold_date_sk#12, ws_sold_time_sk#13, ws_ship_date_sk#14, ws_item_sk#15, ws_bill_customer_sk#16, ws_bill_cdemo_sk#17, ws_bill_hdemo_sk#18, ws_bill_addr_sk#19, ws_ship_customer_sk#20, ws_ship_cdemo_sk#21, ws_ship_hdemo_sk#22, ws_ship_addr_sk#23, ws_web_page_sk#24, ws_web_site_sk#25, ws_ship_mode_sk#26, ws_warehouse_sk#27, ws_promo_sk#28, ws_order_number#29, ws_quantity#30, ws_wholesale_cost#31, ws_list_price#32, ws_sales_price#33, ws_ext_discount_amt#34, ws_ext_sales_price#35, ... 62 more fields]
                        +- Filter ((((d_month_seq#48 >= 1200) AND (d_month_seq#48 <= (1200 + 11))) AND (d_date_sk#45 = ws_sold_date_sk#12)) AND (i_item_sk#73 = ws_item_sk#15))
                           +- Join Inner
                              :- Join Inner
                              :  :- SubqueryAlias spark_catalog.default.web_sales
                              :  :  +- Relation[ws_sold_date_sk#12,ws_sold_time_sk#13,ws_ship_date_sk#14,ws_item_sk#15,ws_bill_customer_sk#16,ws_bill_cdemo_sk#17,ws_bill_hdemo_sk#18,ws_bill_addr_sk#19,ws_ship_customer_sk#20,ws_ship_cdemo_sk#21,ws_ship_hdemo_sk#22,ws_ship_addr_sk#23,ws_web_page_sk#24,ws_web_site_sk#25,ws_ship_mode_sk#26,ws_warehouse_sk#27,ws_promo_sk#28,ws_order_number#29,ws_quantity#30,ws_wholesale_cost#31,ws_list_price#32,ws_sales_price#33,ws_ext_discount_amt#34,ws_ext_sales_price#35,... 10 more fields] parquet
                              :  +- SubqueryAlias d1
                              :     +- SubqueryAlias spark_catalog.default.date_dim
                              :        +- Relation[d_date_sk#45,d_date_id#46,d_date#47,d_month_seq#48,d_week_seq#49,d_quarter_seq#50,d_year#51,d_dow#52,d_moy#53,d_dom#54,d_qoy#55,d_fy_year#56,d_fy_quarter_seq#57,d_fy_week_seq#58,d_day_name#59,d_quarter_name#60,d_holiday#61,d_weekend#62,d_following_holiday#63,d_first_dom#64,d_last_dom#65,d_same_day_ly#66,d_same_day_lq#67,d_current_day#68,... 4 more fields] parquet
                              +- SubqueryAlias spark_catalog.default.item
                                 +- Relation[i_item_sk#73,i_item_id#74,i_rec_start_date#75,i_rec_end_date#76,i_item_desc#77,i_current_price#78,i_wholesale_cost#79,i_brand_id#80,i_brand#81,i_class_id#82,i_class#83,i_category_id#84,i_category#85,i_manufact_id#86,i_manufact#87,i_size#88,i_formulation#89,i_color#90,i_units#91,i_container#92,i_manager_id#93,i_product_name#94] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Sort [lochierarchy#2 DESC NULLS LAST, CASE WHEN (cast(lochierarchy#2 as int) = 0) THEN i_category#4 END ASC NULLS FIRST, rank_within_parent#3 ASC NULLS FIRST], true
      +- Project [total_sum#1, i_category#4, i_class#5, lochierarchy#2, rank_within_parent#3]
         +- Window [rank(_w3#9) windowspecdefinition(_w1#7, _w2#8, _w3#9 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#3], [_w1#7, _w2#8], [_w3#9 DESC NULLS LAST]
            +- Aggregate [i_category#4, i_class#5, spark_grouping_id#10], [MakeDecimal(sum(UnscaledValue(ws_net_paid#11)),17,2) AS total_sum#1, i_category#4, i_class#5, (cast((shiftright(spark_grouping_id#10, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#10, 0) & 1) as tinyint)) AS lochierarchy#2, (cast((shiftright(spark_grouping_id#10, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#10, 0) & 1) as tinyint)) AS _w1#7, CASE WHEN (cast(cast((shiftright(spark_grouping_id#10, 0) & 1) as tinyint) as int) = 0) THEN i_category#4 END AS _w2#8, MakeDecimal(sum(UnscaledValue(ws_net_paid#11)),17,2) AS _w3#9]
               +- Expand [List(ws_net_paid#11, i_category#85, i_class#83, 0), List(ws_net_paid#11, i_category#85, null, 1), List(ws_net_paid#11, null, null, 3)], [ws_net_paid#11, i_category#4, i_class#5, spark_grouping_id#10]
                  +- Project [ws_net_paid#11, i_category#85, i_class#83]
                     +- Join Inner, (i_item_sk#73 = ws_item_sk#15)
                        :- Project [ws_item_sk#15, ws_net_paid#11]
                        :  +- Join Inner, (d_date_sk#45 = ws_sold_date_sk#12)
                        :     :- Project [ws_sold_date_sk#12, ws_item_sk#15, ws_net_paid#11]
                        :     :  +- Filter (isnotnull(ws_sold_date_sk#12) AND isnotnull(ws_item_sk#15))
                        :     :     +- Relation[ws_sold_date_sk#12,ws_sold_time_sk#13,ws_ship_date_sk#14,ws_item_sk#15,ws_bill_customer_sk#16,ws_bill_cdemo_sk#17,ws_bill_hdemo_sk#18,ws_bill_addr_sk#19,ws_ship_customer_sk#20,ws_ship_cdemo_sk#21,ws_ship_hdemo_sk#22,ws_ship_addr_sk#23,ws_web_page_sk#24,ws_web_site_sk#25,ws_ship_mode_sk#26,ws_warehouse_sk#27,ws_promo_sk#28,ws_order_number#29,ws_quantity#30,ws_wholesale_cost#31,ws_list_price#32,ws_sales_price#33,ws_ext_discount_amt#34,ws_ext_sales_price#35,... 10 more fields] parquet
                        :     +- Project [d_date_sk#45]
                        :        +- Filter (((isnotnull(d_month_seq#48) AND (d_month_seq#48 >= 1200)) AND (d_month_seq#48 <= 1211)) AND isnotnull(d_date_sk#45))
                        :           +- Relation[d_date_sk#45,d_date_id#46,d_date#47,d_month_seq#48,d_week_seq#49,d_quarter_seq#50,d_year#51,d_dow#52,d_moy#53,d_dom#54,d_qoy#55,d_fy_year#56,d_fy_quarter_seq#57,d_fy_week_seq#58,d_day_name#59,d_quarter_name#60,d_holiday#61,d_weekend#62,d_following_holiday#63,d_first_dom#64,d_last_dom#65,d_same_day_ly#66,d_same_day_lq#67,d_current_day#68,... 4 more fields] parquet
                        +- Project [i_item_sk#73, i_class#83, i_category#85]
                           +- Filter isnotnull(i_item_sk#73)
                              +- Relation[i_item_sk#73,i_item_id#74,i_rec_start_date#75,i_rec_end_date#76,i_item_desc#77,i_current_price#78,i_wholesale_cost#79,i_brand_id#80,i_brand#81,i_class_id#82,i_class#83,i_category_id#84,i_category#85,i_manufact_id#86,i_manufact#87,i_size#88,i_formulation#89,i_color#90,i_units#91,i_container#92,i_manager_id#93,i_product_name#94] parquet

== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[lochierarchy#2 DESC NULLS LAST,CASE WHEN (cast(lochierarchy#2 as int) = 0) THEN i_category#4 END ASC NULLS FIRST,rank_within_parent#3 ASC NULLS FIRST], output=[total_sum#1,i_category#4,i_class#5,lochierarchy#2,rank_within_parent#3])
+- *(6) Project [total_sum#1, i_category#4, i_class#5, lochierarchy#2, rank_within_parent#3]
   +- Window [rank(_w3#9) windowspecdefinition(_w1#7, _w2#8, _w3#9 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#3], [_w1#7, _w2#8], [_w3#9 DESC NULLS LAST]
      +- *(5) Sort [_w1#7 ASC NULLS FIRST, _w2#8 ASC NULLS FIRST, _w3#9 DESC NULLS LAST], false, 0
         +- Exchange hashpartitioning(_w1#7, _w2#8, 5), true, [id=#97]
            +- *(4) HashAggregate(keys=[i_category#4, i_class#5, spark_grouping_id#10], functions=[sum(UnscaledValue(ws_net_paid#11))], output=[total_sum#1, i_category#4, i_class#5, lochierarchy#2, _w1#7, _w2#8, _w3#9])
               +- Exchange hashpartitioning(i_category#4, i_class#5, spark_grouping_id#10, 5), true, [id=#98]
                  +- *(3) HashAggregate(keys=[i_category#4, i_class#5, spark_grouping_id#10], functions=[partial_sum(UnscaledValue(ws_net_paid#11))], output=[i_category#4, i_class#5, spark_grouping_id#10, sum#99])
                     +- *(3) Expand [List(ws_net_paid#11, i_category#85, i_class#83, 0), List(ws_net_paid#11, i_category#85, null, 1), List(ws_net_paid#11, null, null, 3)], [ws_net_paid#11, i_category#4, i_class#5, spark_grouping_id#10]
                        +- *(3) Project [ws_net_paid#11, i_category#85, i_class#83]
                           +- *(3) BroadcastHashJoin [ws_item_sk#15], [i_item_sk#73], Inner, BuildRight, false
                              :- *(3) Project [ws_item_sk#15, ws_net_paid#11]
                              :  +- *(3) BroadcastHashJoin [ws_sold_date_sk#12], [d_date_sk#45], Inner, BuildRight, false
                              :     :- *(3) Filter (isnotnull(ws_sold_date_sk#12) AND isnotnull(ws_item_sk#15))
                              :     :  +- *(3) ColumnarToRow
                              :     :     +- FileScan parquet default.web_sales[ws_sold_date_sk#12,ws_item_sk#15,ws_net_paid#11] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#12), isnotnull(ws_item_sk#15)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_item_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_net_paid:decimal(7,2)>
                              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#100]
                              :        +- *(1) Project [d_date_sk#45]
                              :           +- *(1) Filter (((isnotnull(d_month_seq#48) AND (d_month_seq#48 >= 1200)) AND (d_month_seq#48 <= 1211)) AND isnotnull(d_date_sk#45))
                              :              +- *(1) ColumnarToRow
                              :                 +- FileScan parquet default.date_dim[d_date_sk#45,d_month_seq#48] Batched: true, DataFilters: [isnotnull(d_month_seq#48), (d_month_seq#48 >= 1200), (d_month_seq#48 <= 1211), isnotnull(d..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#101]
                                 +- *(2) Filter isnotnull(i_item_sk#73)
                                    +- *(2) ColumnarToRow
                                       +- FileScan parquet default.item[i_item_sk#73,i_class#83,i_category#85] Batched: true, DataFilters: [isnotnull(i_item_sk#73)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>
