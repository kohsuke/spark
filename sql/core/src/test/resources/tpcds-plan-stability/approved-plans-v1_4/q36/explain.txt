== Parsed Logical Plan ==
'GlobalLimit 100
+- 'LocalLimit 100
   +- 'Sort ['lochierarchy DESC NULLS LAST, CASE WHEN ('lochierarchy = 0) THEN 'i_category END ASC NULLS FIRST, 'rank_within_parent ASC NULLS FIRST], true
      +- 'Aggregate ['ROLLUP('i_category, 'i_class)], [('sum('ss_net_profit) / 'sum('ss_ext_sales_price)) AS gross_margin#1, 'i_category, 'i_class, ('grouping('i_category) + 'grouping('i_class)) AS lochierarchy#2, 'rank() windowspecdefinition(('grouping('i_category) + 'grouping('i_class)), CASE WHEN ('grouping('i_class) = 0) THEN 'i_category END, ('sum('ss_net_profit) / 'sum('ss_ext_sales_price)) ASC NULLS FIRST, unspecifiedframe$()) AS rank_within_parent#3]
         +- 'Filter (((('d1.d_year = 2001) AND ('d1.d_date_sk = 'ss_sold_date_sk)) AND ('i_item_sk = 'ss_item_sk)) AND (('s_store_sk = 'ss_store_sk) AND 's_state IN (TN,TN,TN,TN,TN,TN,TN,TN)))
            +- 'Join Inner
               :- 'Join Inner
               :  :- 'Join Inner
               :  :  :- 'UnresolvedRelation [store_sales]
               :  :  +- 'SubqueryAlias d1
               :  :     +- 'UnresolvedRelation [date_dim]
               :  +- 'UnresolvedRelation [item]
               +- 'UnresolvedRelation [store]

== Analyzed Logical Plan ==
gross_margin: decimal(37,20), i_category: string, i_class: string, lochierarchy: tinyint, rank_within_parent: int
GlobalLimit 100
+- LocalLimit 100
   +- Sort [lochierarchy#2 DESC NULLS LAST, CASE WHEN (cast(lochierarchy#2 as int) = 0) THEN i_category#4 END ASC NULLS FIRST, rank_within_parent#3 ASC NULLS FIRST], true
      +- Project [gross_margin#1, i_category#4, i_class#5, lochierarchy#2, rank_within_parent#3]
         +- Project [gross_margin#1, i_category#4, i_class#5, lochierarchy#2, _w0#6, _w1#7, _w2#8, _w3#9, rank_within_parent#3, rank_within_parent#3]
            +- Window [rank(_w3#9) windowspecdefinition(_w1#7, _w2#8, _w3#9 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#3], [_w1#7, _w2#8], [_w3#9 ASC NULLS FIRST]
               +- Aggregate [i_category#4, i_class#5, spark_grouping_id#10], [CheckOverflow((promote_precision(cast(sum(ss_net_profit#11) as decimal(17,2))) / promote_precision(cast(sum(ss_ext_sales_price#12) as decimal(17,2)))), DecimalType(37,20), true) AS gross_margin#1, i_category#4, i_class#5, (cast((shiftright(spark_grouping_id#10, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#10, 0) & 1) as tinyint)) AS lochierarchy#2, CheckOverflow((promote_precision(cast(sum(ss_net_profit#11) as decimal(17,2))) / promote_precision(cast(sum(ss_ext_sales_price#12) as decimal(17,2)))), DecimalType(37,20), true) AS _w0#6, (cast((shiftright(spark_grouping_id#10, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#10, 0) & 1) as tinyint)) AS _w1#7, CASE WHEN (cast(cast((shiftright(spark_grouping_id#10, 0) & 1) as tinyint) as int) = 0) THEN i_category#4 END AS _w2#8, CheckOverflow((promote_precision(cast(sum(ss_net_profit#11) as decimal(17,2))) / promote_precision(cast(sum(ss_ext_sales_price#12) as decimal(17,2)))), DecimalType(37,20), true) AS _w3#9]
                  +- Expand [List(ss_sold_date_sk#13, ss_sold_time_sk#14, ss_item_sk#15, ss_customer_sk#16, ss_cdemo_sk#17, ss_hdemo_sk#18, ss_addr_sk#19, ss_store_sk#20, ss_promo_sk#21, ss_ticket_number#22, ss_quantity#23, ss_wholesale_cost#24, ss_list_price#25, ss_sales_price#26, ss_ext_discount_amt#27, ss_ext_sales_price#12, ss_ext_wholesale_cost#28, ss_ext_list_price#29, ss_ext_tax#30, ss_coupon_amt#31, ss_net_paid#32, ss_net_paid_inc_tax#33, ss_net_profit#11, d_date_sk#34, d_date_id#35, d_date#36, d_month_seq#37, d_week_seq#38, d_quarter_seq#39, d_year#40, d_dow#41, d_moy#42, d_dom#43, d_qoy#44, d_fy_year#45, d_fy_quarter_seq#46, d_fy_week_seq#47, d_day_name#48, d_quarter_name#49, d_holiday#50, d_weekend#51, d_following_holiday#52, d_first_dom#53, d_last_dom#54, d_same_day_ly#55, d_same_day_lq#56, d_current_day#57, d_current_week#58, d_current_month#59, d_current_quarter#60, d_current_year#61, i_item_sk#62, i_item_id#63, i_rec_start_date#64, i_rec_end_date#65, i_item_desc#66, i_current_price#67, i_wholesale_cost#68, i_brand_id#69, i_brand#70, i_class_id#71, i_class#72, i_category_id#73, i_category#74, i_manufact_id#75, i_manufact#76, i_size#77, i_formulation#78, i_color#79, i_units#80, i_container#81, i_manager_id#82, i_product_name#83, s_store_sk#84, s_store_id#85, s_rec_start_date#86, s_rec_end_date#87, s_closed_date_sk#88, s_store_name#89, s_number_employees#90, s_floor_space#91, s_hours#92, s_manager#93, s_market_id#94, s_geography_class#95, s_market_desc#96, s_market_manager#97, s_division_id#98, s_division_name#99, s_company_id#100, s_company_name#101, s_street_number#102, s_street_name#103, s_street_type#104, s_suite_number#105, s_city#106, s_county#107, s_state#108, s_zip#109, s_country#110, s_gmt_offset#111, s_tax_percentage#112, i_category#113, i_class#114, 0), List(ss_sold_date_sk#13, ss_sold_time_sk#14, ss_item_sk#15, ss_customer_sk#16, ss_cdemo_sk#17, ss_hdemo_sk#18, ss_addr_sk#19, ss_store_sk#20, ss_promo_sk#21, ss_ticket_number#22, ss_quantity#23, ss_wholesale_cost#24, ss_list_price#25, ss_sales_price#26, ss_ext_discount_amt#27, ss_ext_sales_price#12, ss_ext_wholesale_cost#28, ss_ext_list_price#29, ss_ext_tax#30, ss_coupon_amt#31, ss_net_paid#32, ss_net_paid_inc_tax#33, ss_net_profit#11, d_date_sk#34, d_date_id#35, d_date#36, d_month_seq#37, d_week_seq#38, d_quarter_seq#39, d_year#40, d_dow#41, d_moy#42, d_dom#43, d_qoy#44, d_fy_year#45, d_fy_quarter_seq#46, d_fy_week_seq#47, d_day_name#48, d_quarter_name#49, d_holiday#50, d_weekend#51, d_following_holiday#52, d_first_dom#53, d_last_dom#54, d_same_day_ly#55, d_same_day_lq#56, d_current_day#57, d_current_week#58, d_current_month#59, d_current_quarter#60, d_current_year#61, i_item_sk#62, i_item_id#63, i_rec_start_date#64, i_rec_end_date#65, i_item_desc#66, i_current_price#67, i_wholesale_cost#68, i_brand_id#69, i_brand#70, i_class_id#71, i_class#72, i_category_id#73, i_category#74, i_manufact_id#75, i_manufact#76, i_size#77, i_formulation#78, i_color#79, i_units#80, i_container#81, i_manager_id#82, i_product_name#83, s_store_sk#84, s_store_id#85, s_rec_start_date#86, s_rec_end_date#87, s_closed_date_sk#88, s_store_name#89, s_number_employees#90, s_floor_space#91, s_hours#92, s_manager#93, s_market_id#94, s_geography_class#95, s_market_desc#96, s_market_manager#97, s_division_id#98, s_division_name#99, s_company_id#100, s_company_name#101, s_street_number#102, s_street_name#103, s_street_type#104, s_suite_number#105, s_city#106, s_county#107, s_state#108, s_zip#109, s_country#110, s_gmt_offset#111, s_tax_percentage#112, i_category#113, null, 1), List(ss_sold_date_sk#13, ss_sold_time_sk#14, ss_item_sk#15, ss_customer_sk#16, ss_cdemo_sk#17, ss_hdemo_sk#18, ss_addr_sk#19, ss_store_sk#20, ss_promo_sk#21, ss_ticket_number#22, ss_quantity#23, ss_wholesale_cost#24, ss_list_price#25, ss_sales_price#26, ss_ext_discount_amt#27, ss_ext_sales_price#12, ss_ext_wholesale_cost#28, ss_ext_list_price#29, ss_ext_tax#30, ss_coupon_amt#31, ss_net_paid#32, ss_net_paid_inc_tax#33, ss_net_profit#11, d_date_sk#34, d_date_id#35, d_date#36, d_month_seq#37, d_week_seq#38, d_quarter_seq#39, d_year#40, d_dow#41, d_moy#42, d_dom#43, d_qoy#44, d_fy_year#45, d_fy_quarter_seq#46, d_fy_week_seq#47, d_day_name#48, d_quarter_name#49, d_holiday#50, d_weekend#51, d_following_holiday#52, d_first_dom#53, d_last_dom#54, d_same_day_ly#55, d_same_day_lq#56, d_current_day#57, d_current_week#58, d_current_month#59, d_current_quarter#60, d_current_year#61, i_item_sk#62, i_item_id#63, i_rec_start_date#64, i_rec_end_date#65, i_item_desc#66, i_current_price#67, i_wholesale_cost#68, i_brand_id#69, i_brand#70, i_class_id#71, i_class#72, i_category_id#73, i_category#74, i_manufact_id#75, i_manufact#76, i_size#77, i_formulation#78, i_color#79, i_units#80, i_container#81, i_manager_id#82, i_product_name#83, s_store_sk#84, s_store_id#85, s_rec_start_date#86, s_rec_end_date#87, s_closed_date_sk#88, s_store_name#89, s_number_employees#90, s_floor_space#91, s_hours#92, s_manager#93, s_market_id#94, s_geography_class#95, s_market_desc#96, s_market_manager#97, s_division_id#98, s_division_name#99, s_company_id#100, s_company_name#101, s_street_number#102, s_street_name#103, s_street_type#104, s_suite_number#105, s_city#106, s_county#107, s_state#108, s_zip#109, s_country#110, s_gmt_offset#111, s_tax_percentage#112, null, null, 3)], [ss_sold_date_sk#13, ss_sold_time_sk#14, ss_item_sk#15, ss_customer_sk#16, ss_cdemo_sk#17, ss_hdemo_sk#18, ss_addr_sk#19, ss_store_sk#20, ss_promo_sk#21, ss_ticket_number#22, ss_quantity#23, ss_wholesale_cost#24, ss_list_price#25, ss_sales_price#26, ss_ext_discount_amt#27, ss_ext_sales_price#12, ss_ext_wholesale_cost#28, ss_ext_list_price#29, ss_ext_tax#30, ss_coupon_amt#31, ss_net_paid#32, ss_net_paid_inc_tax#33, ss_net_profit#11, d_date_sk#34, ... 81 more fields]
                     +- Project [ss_sold_date_sk#13, ss_sold_time_sk#14, ss_item_sk#15, ss_customer_sk#16, ss_cdemo_sk#17, ss_hdemo_sk#18, ss_addr_sk#19, ss_store_sk#20, ss_promo_sk#21, ss_ticket_number#22, ss_quantity#23, ss_wholesale_cost#24, ss_list_price#25, ss_sales_price#26, ss_ext_discount_amt#27, ss_ext_sales_price#12, ss_ext_wholesale_cost#28, ss_ext_list_price#29, ss_ext_tax#30, ss_coupon_amt#31, ss_net_paid#32, ss_net_paid_inc_tax#33, ss_net_profit#11, d_date_sk#34, ... 80 more fields]
                        +- Filter ((((d_year#40 = 2001) AND (d_date_sk#34 = ss_sold_date_sk#13)) AND (i_item_sk#62 = ss_item_sk#15)) AND ((s_store_sk#84 = ss_store_sk#20) AND s_state#108 IN (TN,TN,TN,TN,TN,TN,TN,TN)))
                           +- Join Inner
                              :- Join Inner
                              :  :- Join Inner
                              :  :  :- SubqueryAlias spark_catalog.default.store_sales
                              :  :  :  +- Relation[ss_sold_date_sk#13,ss_sold_time_sk#14,ss_item_sk#15,ss_customer_sk#16,ss_cdemo_sk#17,ss_hdemo_sk#18,ss_addr_sk#19,ss_store_sk#20,ss_promo_sk#21,ss_ticket_number#22,ss_quantity#23,ss_wholesale_cost#24,ss_list_price#25,ss_sales_price#26,ss_ext_discount_amt#27,ss_ext_sales_price#12,ss_ext_wholesale_cost#28,ss_ext_list_price#29,ss_ext_tax#30,ss_coupon_amt#31,ss_net_paid#32,ss_net_paid_inc_tax#33,ss_net_profit#11] parquet
                              :  :  +- SubqueryAlias d1
                              :  :     +- SubqueryAlias spark_catalog.default.date_dim
                              :  :        +- Relation[d_date_sk#34,d_date_id#35,d_date#36,d_month_seq#37,d_week_seq#38,d_quarter_seq#39,d_year#40,d_dow#41,d_moy#42,d_dom#43,d_qoy#44,d_fy_year#45,d_fy_quarter_seq#46,d_fy_week_seq#47,d_day_name#48,d_quarter_name#49,d_holiday#50,d_weekend#51,d_following_holiday#52,d_first_dom#53,d_last_dom#54,d_same_day_ly#55,d_same_day_lq#56,d_current_day#57,... 4 more fields] parquet
                              :  +- SubqueryAlias spark_catalog.default.item
                              :     +- Relation[i_item_sk#62,i_item_id#63,i_rec_start_date#64,i_rec_end_date#65,i_item_desc#66,i_current_price#67,i_wholesale_cost#68,i_brand_id#69,i_brand#70,i_class_id#71,i_class#72,i_category_id#73,i_category#74,i_manufact_id#75,i_manufact#76,i_size#77,i_formulation#78,i_color#79,i_units#80,i_container#81,i_manager_id#82,i_product_name#83] parquet
                              +- SubqueryAlias spark_catalog.default.store
                                 +- Relation[s_store_sk#84,s_store_id#85,s_rec_start_date#86,s_rec_end_date#87,s_closed_date_sk#88,s_store_name#89,s_number_employees#90,s_floor_space#91,s_hours#92,s_manager#93,s_market_id#94,s_geography_class#95,s_market_desc#96,s_market_manager#97,s_division_id#98,s_division_name#99,s_company_id#100,s_company_name#101,s_street_number#102,s_street_name#103,s_street_type#104,s_suite_number#105,s_city#106,s_county#107,... 5 more fields] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Sort [lochierarchy#2 DESC NULLS LAST, CASE WHEN (cast(lochierarchy#2 as int) = 0) THEN i_category#4 END ASC NULLS FIRST, rank_within_parent#3 ASC NULLS FIRST], true
      +- Project [gross_margin#1, i_category#4, i_class#5, lochierarchy#2, rank_within_parent#3]
         +- Window [rank(_w3#9) windowspecdefinition(_w1#7, _w2#8, _w3#9 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#3], [_w1#7, _w2#8], [_w3#9 ASC NULLS FIRST]
            +- Aggregate [i_category#4, i_class#5, spark_grouping_id#10], [CheckOverflow((promote_precision(MakeDecimal(sum(UnscaledValue(ss_net_profit#11)),17,2)) / promote_precision(MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#12)),17,2))), DecimalType(37,20), true) AS gross_margin#1, i_category#4, i_class#5, (cast((shiftright(spark_grouping_id#10, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#10, 0) & 1) as tinyint)) AS lochierarchy#2, (cast((shiftright(spark_grouping_id#10, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#10, 0) & 1) as tinyint)) AS _w1#7, CASE WHEN (cast(cast((shiftright(spark_grouping_id#10, 0) & 1) as tinyint) as int) = 0) THEN i_category#4 END AS _w2#8, CheckOverflow((promote_precision(MakeDecimal(sum(UnscaledValue(ss_net_profit#11)),17,2)) / promote_precision(MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#12)),17,2))), DecimalType(37,20), true) AS _w3#9]
               +- Expand [List(ss_ext_sales_price#12, ss_net_profit#11, i_category#74, i_class#72, 0), List(ss_ext_sales_price#12, ss_net_profit#11, i_category#74, null, 1), List(ss_ext_sales_price#12, ss_net_profit#11, null, null, 3)], [ss_ext_sales_price#12, ss_net_profit#11, i_category#4, i_class#5, spark_grouping_id#10]
                  +- Project [ss_ext_sales_price#12, ss_net_profit#11, i_category#74, i_class#72]
                     +- Join Inner, (s_store_sk#84 = ss_store_sk#20)
                        :- Project [ss_store_sk#20, ss_ext_sales_price#12, ss_net_profit#11, i_class#72, i_category#74]
                        :  +- Join Inner, (i_item_sk#62 = ss_item_sk#15)
                        :     :- Project [ss_item_sk#15, ss_store_sk#20, ss_ext_sales_price#12, ss_net_profit#11]
                        :     :  +- Join Inner, (d_date_sk#34 = ss_sold_date_sk#13)
                        :     :     :- Project [ss_sold_date_sk#13, ss_item_sk#15, ss_store_sk#20, ss_ext_sales_price#12, ss_net_profit#11]
                        :     :     :  +- Filter ((isnotnull(ss_sold_date_sk#13) AND isnotnull(ss_item_sk#15)) AND isnotnull(ss_store_sk#20))
                        :     :     :     +- Relation[ss_sold_date_sk#13,ss_sold_time_sk#14,ss_item_sk#15,ss_customer_sk#16,ss_cdemo_sk#17,ss_hdemo_sk#18,ss_addr_sk#19,ss_store_sk#20,ss_promo_sk#21,ss_ticket_number#22,ss_quantity#23,ss_wholesale_cost#24,ss_list_price#25,ss_sales_price#26,ss_ext_discount_amt#27,ss_ext_sales_price#12,ss_ext_wholesale_cost#28,ss_ext_list_price#29,ss_ext_tax#30,ss_coupon_amt#31,ss_net_paid#32,ss_net_paid_inc_tax#33,ss_net_profit#11] parquet
                        :     :     +- Project [d_date_sk#34]
                        :     :        +- Filter ((isnotnull(d_year#40) AND (d_year#40 = 2001)) AND isnotnull(d_date_sk#34))
                        :     :           +- Relation[d_date_sk#34,d_date_id#35,d_date#36,d_month_seq#37,d_week_seq#38,d_quarter_seq#39,d_year#40,d_dow#41,d_moy#42,d_dom#43,d_qoy#44,d_fy_year#45,d_fy_quarter_seq#46,d_fy_week_seq#47,d_day_name#48,d_quarter_name#49,d_holiday#50,d_weekend#51,d_following_holiday#52,d_first_dom#53,d_last_dom#54,d_same_day_ly#55,d_same_day_lq#56,d_current_day#57,... 4 more fields] parquet
                        :     +- Project [i_item_sk#62, i_class#72, i_category#74]
                        :        +- Filter isnotnull(i_item_sk#62)
                        :           +- Relation[i_item_sk#62,i_item_id#63,i_rec_start_date#64,i_rec_end_date#65,i_item_desc#66,i_current_price#67,i_wholesale_cost#68,i_brand_id#69,i_brand#70,i_class_id#71,i_class#72,i_category_id#73,i_category#74,i_manufact_id#75,i_manufact#76,i_size#77,i_formulation#78,i_color#79,i_units#80,i_container#81,i_manager_id#82,i_product_name#83] parquet
                        +- Project [s_store_sk#84]
                           +- Filter ((isnotnull(s_state#108) AND (s_state#108 = TN)) AND isnotnull(s_store_sk#84))
                              +- Relation[s_store_sk#84,s_store_id#85,s_rec_start_date#86,s_rec_end_date#87,s_closed_date_sk#88,s_store_name#89,s_number_employees#90,s_floor_space#91,s_hours#92,s_manager#93,s_market_id#94,s_geography_class#95,s_market_desc#96,s_market_manager#97,s_division_id#98,s_division_name#99,s_company_id#100,s_company_name#101,s_street_number#102,s_street_name#103,s_street_type#104,s_suite_number#105,s_city#106,s_county#107,... 5 more fields] parquet

== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[lochierarchy#2 DESC NULLS LAST,CASE WHEN (cast(lochierarchy#2 as int) = 0) THEN i_category#4 END ASC NULLS FIRST,rank_within_parent#3 ASC NULLS FIRST], output=[gross_margin#1,i_category#4,i_class#5,lochierarchy#2,rank_within_parent#3])
+- *(7) Project [gross_margin#1, i_category#4, i_class#5, lochierarchy#2, rank_within_parent#3]
   +- Window [rank(_w3#9) windowspecdefinition(_w1#7, _w2#8, _w3#9 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#3], [_w1#7, _w2#8], [_w3#9 ASC NULLS FIRST]
      +- *(6) Sort [_w1#7 ASC NULLS FIRST, _w2#8 ASC NULLS FIRST, _w3#9 ASC NULLS FIRST], false, 0
         +- Exchange hashpartitioning(_w1#7, _w2#8, 5), true, [id=#115]
            +- *(5) HashAggregate(keys=[i_category#4, i_class#5, spark_grouping_id#10], functions=[sum(UnscaledValue(ss_net_profit#11)), sum(UnscaledValue(ss_ext_sales_price#12))], output=[gross_margin#1, i_category#4, i_class#5, lochierarchy#2, _w1#7, _w2#8, _w3#9])
               +- Exchange hashpartitioning(i_category#4, i_class#5, spark_grouping_id#10, 5), true, [id=#116]
                  +- *(4) HashAggregate(keys=[i_category#4, i_class#5, spark_grouping_id#10], functions=[partial_sum(UnscaledValue(ss_net_profit#11)), partial_sum(UnscaledValue(ss_ext_sales_price#12))], output=[i_category#4, i_class#5, spark_grouping_id#10, sum#117, sum#118])
                     +- *(4) Expand [List(ss_ext_sales_price#12, ss_net_profit#11, i_category#74, i_class#72, 0), List(ss_ext_sales_price#12, ss_net_profit#11, i_category#74, null, 1), List(ss_ext_sales_price#12, ss_net_profit#11, null, null, 3)], [ss_ext_sales_price#12, ss_net_profit#11, i_category#4, i_class#5, spark_grouping_id#10]
                        +- *(4) Project [ss_ext_sales_price#12, ss_net_profit#11, i_category#74, i_class#72]
                           +- *(4) BroadcastHashJoin [ss_store_sk#20], [s_store_sk#84], Inner, BuildRight, false
                              :- *(4) Project [ss_store_sk#20, ss_ext_sales_price#12, ss_net_profit#11, i_class#72, i_category#74]
                              :  +- *(4) BroadcastHashJoin [ss_item_sk#15], [i_item_sk#62], Inner, BuildRight, false
                              :     :- *(4) Project [ss_item_sk#15, ss_store_sk#20, ss_ext_sales_price#12, ss_net_profit#11]
                              :     :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#13], [d_date_sk#34], Inner, BuildRight, false
                              :     :     :- *(4) Project [ss_sold_date_sk#13, ss_item_sk#15, ss_store_sk#20, ss_ext_sales_price#12, ss_net_profit#11]
                              :     :     :  +- *(4) Filter ((isnotnull(ss_sold_date_sk#13) AND isnotnull(ss_item_sk#15)) AND isnotnull(ss_store_sk#20))
                              :     :     :     +- *(4) ColumnarToRow
                              :     :     :        +- FileScan parquet default.store_sales[ss_sold_date_sk#13,ss_item_sk#15,ss_store_sk#20,ss_ext_sales_price#12,ss_net_profit#11] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#13), isnotnull(ss_item_sk#15), isnotnull(ss_store_sk#20)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_...
                              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#119]
                              :     :        +- *(1) Project [d_date_sk#34]
                              :     :           +- *(1) Filter ((isnotnull(d_year#40) AND (d_year#40 = 2001)) AND isnotnull(d_date_sk#34))
                              :     :              +- *(1) ColumnarToRow
                              :     :                 +- FileScan parquet default.date_dim[d_date_sk#34,d_year#40] Batched: true, DataFilters: [isnotnull(d_year#40), (d_year#40 = 2001), isnotnull(d_date_sk#34)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#120]
                              :        +- *(2) Project [i_item_sk#62, i_class#72, i_category#74]
                              :           +- *(2) Filter isnotnull(i_item_sk#62)
                              :              +- *(2) ColumnarToRow
                              :                 +- FileScan parquet default.item[i_item_sk#62,i_class#72,i_category#74] Batched: true, DataFilters: [isnotnull(i_item_sk#62)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>
                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#121]
                                 +- *(3) Project [s_store_sk#84]
                                    +- *(3) Filter ((isnotnull(s_state#108) AND (s_state#108 = TN)) AND isnotnull(s_store_sk#84))
                                       +- *(3) ColumnarToRow
                                          +- FileScan parquet default.store[s_store_sk#84,s_state#108] Batched: true, DataFilters: [isnotnull(s_state#108), (s_state#108 = TN), isnotnull(s_store_sk#84)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>
