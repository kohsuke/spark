== Parsed Logical Plan ==
CTE [frequent_ss_items, max_store_sales, best_ss_customer]
:  :- 'SubqueryAlias frequent_ss_items
:  :  +- 'UnresolvedHaving ('count(1) > 4)
:  :     +- 'Aggregate ['substr('i_item_desc, 1, 30), 'i_item_sk, 'd_date], ['substr('i_item_desc, 1, 30) AS itemdesc#1, 'i_item_sk AS item_sk#2, 'd_date AS solddate#3, 'count(1) AS cnt#4]
:  :        +- 'Filter ((('ss_sold_date_sk = 'd_date_sk) AND ('ss_item_sk = 'i_item_sk)) AND 'd_year IN (2000,(2000 + 1),(2000 + 2),(2000 + 3)))
:  :           +- 'Join Inner
:  :              :- 'Join Inner
:  :              :  :- 'UnresolvedRelation [store_sales]
:  :              :  +- 'UnresolvedRelation [date_dim]
:  :              +- 'UnresolvedRelation [item]
:  :- 'SubqueryAlias max_store_sales
:  :  +- 'Project ['max('csales) AS tpcds_cmax#5]
:  :     +- 'SubqueryAlias x
:  :        +- 'Aggregate ['c_customer_sk], ['c_customer_sk, 'sum(('ss_quantity * 'ss_sales_price)) AS csales#6]
:  :           +- 'Filter ((('ss_customer_sk = 'c_customer_sk) AND ('ss_sold_date_sk = 'd_date_sk)) AND 'd_year IN (2000,(2000 + 1),(2000 + 2),(2000 + 3)))
:  :              +- 'Join Inner
:  :                 :- 'Join Inner
:  :                 :  :- 'UnresolvedRelation [store_sales]
:  :                 :  +- 'UnresolvedRelation [customer]
:  :                 +- 'UnresolvedRelation [date_dim]
:  +- 'SubqueryAlias best_ss_customer
:     +- 'UnresolvedHaving ('sum(('ss_quantity * 'ss_sales_price)) > ((50 / 100.0) * scalar-subquery#7 []))
:        :  +- 'Project [*]
:        :     +- 'UnresolvedRelation [max_store_sales]
:        +- 'Aggregate ['c_customer_sk], ['c_customer_sk, 'sum(('ss_quantity * 'ss_sales_price)) AS ssales#8]
:           +- 'Filter ('ss_customer_sk = 'c_customer_sk)
:              +- 'Join Inner
:                 :- 'UnresolvedRelation [store_sales]
:                 +- 'UnresolvedRelation [customer]
+- 'GlobalLimit 100
   +- 'LocalLimit 100
      +- 'Sort ['c_last_name ASC NULLS FIRST, 'c_first_name ASC NULLS FIRST, 'sales ASC NULLS FIRST], true
         +- 'Project ['c_last_name, 'c_first_name, 'sales]
            +- 'SubqueryAlias y
               +- 'Union false, false
                  :- 'Aggregate ['c_last_name, 'c_first_name], ['c_last_name, 'c_first_name, 'sum(('cs_quantity * 'cs_list_price)) AS sales#9]
                  :  +- 'Filter (((('d_year = 2000) AND ('d_moy = 2)) AND ('cs_sold_date_sk = 'd_date_sk)) AND (('cs_item_sk IN (list#10 []) AND 'cs_bill_customer_sk IN (list#11 [])) AND ('cs_bill_customer_sk = 'c_customer_sk)))
                  :     :  :- 'Project ['item_sk]
                  :     :  :  +- 'UnresolvedRelation [frequent_ss_items]
                  :     :  +- 'Project ['c_customer_sk]
                  :     :     +- 'UnresolvedRelation [best_ss_customer]
                  :     +- 'Join Inner
                  :        :- 'Join Inner
                  :        :  :- 'UnresolvedRelation [catalog_sales]
                  :        :  +- 'UnresolvedRelation [customer]
                  :        +- 'UnresolvedRelation [date_dim]
                  +- 'Aggregate ['c_last_name, 'c_first_name], ['c_last_name, 'c_first_name, 'sum(('ws_quantity * 'ws_list_price)) AS sales#12]
                     +- 'Filter (((('d_year = 2000) AND ('d_moy = 2)) AND ('ws_sold_date_sk = 'd_date_sk)) AND (('ws_item_sk IN (list#13 []) AND 'ws_bill_customer_sk IN (list#14 [])) AND ('ws_bill_customer_sk = 'c_customer_sk)))
                        :  :- 'Project ['item_sk]
                        :  :  +- 'UnresolvedRelation [frequent_ss_items]
                        :  +- 'Project ['c_customer_sk]
                        :     +- 'UnresolvedRelation [best_ss_customer]
                        +- 'Join Inner
                           :- 'Join Inner
                           :  :- 'UnresolvedRelation [web_sales]
                           :  +- 'UnresolvedRelation [customer]
                           +- 'UnresolvedRelation [date_dim]

== Analyzed Logical Plan ==
c_last_name: string, c_first_name: string, sales: decimal(28,2)
GlobalLimit 100
+- LocalLimit 100
   +- Sort [c_last_name#15 ASC NULLS FIRST, c_first_name#16 ASC NULLS FIRST, sales#9 ASC NULLS FIRST], true
      +- Project [c_last_name#15, c_first_name#16, sales#9]
         +- SubqueryAlias y
            +- Union false, false
               :- Aggregate [c_last_name#15, c_first_name#16], [c_last_name#15, c_first_name#16, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#17 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#18 as decimal(12,2)))), DecimalType(18,2), true)) AS sales#9]
               :  +- Filter ((((d_year#19 = 2000) AND (d_moy#20 = 2)) AND (cs_sold_date_sk#21 = d_date_sk#22)) AND ((cs_item_sk#23 IN (list#10 []) AND cs_bill_customer_sk#24 IN (list#11 [])) AND (cs_bill_customer_sk#24 = c_customer_sk#25)))
               :     :  :- Project [item_sk#2]
               :     :  :  +- SubqueryAlias frequent_ss_items
               :     :  :     +- Project [itemdesc#1, item_sk#2, solddate#3, cnt#26]
               :     :  :        +- Filter (count(1)#27 > cast(4 as bigint))
               :     :  :           +- Aggregate [substr(i_item_desc#28, 1, 30), i_item_sk#29, d_date#30], [substr(i_item_desc#28, 1, 30) AS itemdesc#1, i_item_sk#29 AS item_sk#2, d_date#30 AS solddate#3, count(1) AS cnt#26, count(1) AS count(1)#27]
               :     :  :              +- Filter (((ss_sold_date_sk#31 = d_date_sk#22) AND (ss_item_sk#32 = i_item_sk#29)) AND d_year#19 IN (2000,(2000 + 1),(2000 + 2),(2000 + 3)))
               :     :  :                 +- Join Inner
               :     :  :                    :- Join Inner
               :     :  :                    :  :- SubqueryAlias spark_catalog.default.store_sales
               :     :  :                    :  :  +- Relation[ss_sold_date_sk#31,ss_sold_time_sk#33,ss_item_sk#32,ss_customer_sk#34,ss_cdemo_sk#35,ss_hdemo_sk#36,ss_addr_sk#37,ss_store_sk#38,ss_promo_sk#39,ss_ticket_number#40,ss_quantity#41,ss_wholesale_cost#42,ss_list_price#43,ss_sales_price#44,ss_ext_discount_amt#45,ss_ext_sales_price#46,ss_ext_wholesale_cost#47,ss_ext_list_price#48,ss_ext_tax#49,ss_coupon_amt#50,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
               :     :  :                    :  +- SubqueryAlias spark_catalog.default.date_dim
               :     :  :                    :     +- Relation[d_date_sk#22,d_date_id#54,d_date#30,d_month_seq#55,d_week_seq#56,d_quarter_seq#57,d_year#19,d_dow#58,d_moy#20,d_dom#59,d_qoy#60,d_fy_year#61,d_fy_quarter_seq#62,d_fy_week_seq#63,d_day_name#64,d_quarter_name#65,d_holiday#66,d_weekend#67,d_following_holiday#68,d_first_dom#69,d_last_dom#70,d_same_day_ly#71,d_same_day_lq#72,d_current_day#73,... 4 more fields] parquet
               :     :  :                    +- SubqueryAlias spark_catalog.default.item
               :     :  :                       +- Relation[i_item_sk#29,i_item_id#74,i_rec_start_date#75,i_rec_end_date#76,i_item_desc#28,i_current_price#77,i_wholesale_cost#78,i_brand_id#79,i_brand#80,i_class_id#81,i_class#82,i_category_id#83,i_category#84,i_manufact_id#85,i_manufact#86,i_size#87,i_formulation#88,i_color#89,i_units#90,i_container#91,i_manager_id#92,i_product_name#93] parquet
               :     :  +- Project [c_customer_sk#25]
               :     :     +- SubqueryAlias best_ss_customer
               :     :        +- Project [c_customer_sk#25, ssales#8]
               :     :           +- Filter (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#94 as decimal(38,8)) > cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cast(50 as decimal(2,0)) as decimal(4,1))) / promote_precision(cast(100.0 as decimal(4,1)))), DecimalType(9,6), true) as decimal(32,6))) * promote_precision(cast(scalar-subquery#7 [] as decimal(32,6)))), DecimalType(38,8), true) as decimal(38,8)))
               :     :              :  +- Project [tpcds_cmax#5]
               :     :              :     +- SubqueryAlias max_store_sales
               :     :              :        +- Aggregate [max(csales#6) AS tpcds_cmax#5]
               :     :              :           +- SubqueryAlias x
               :     :              :              +- Aggregate [c_customer_sk#25], [c_customer_sk#25, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true)) AS csales#6]
               :     :              :                 +- Filter (((ss_customer_sk#34 = c_customer_sk#25) AND (ss_sold_date_sk#31 = d_date_sk#22)) AND d_year#19 IN (2000,(2000 + 1),(2000 + 2),(2000 + 3)))
               :     :              :                    +- Join Inner
               :     :              :                       :- Join Inner
               :     :              :                       :  :- SubqueryAlias spark_catalog.default.store_sales
               :     :              :                       :  :  +- Relation[ss_sold_date_sk#31,ss_sold_time_sk#33,ss_item_sk#32,ss_customer_sk#34,ss_cdemo_sk#35,ss_hdemo_sk#36,ss_addr_sk#37,ss_store_sk#38,ss_promo_sk#39,ss_ticket_number#40,ss_quantity#41,ss_wholesale_cost#42,ss_list_price#43,ss_sales_price#44,ss_ext_discount_amt#45,ss_ext_sales_price#46,ss_ext_wholesale_cost#47,ss_ext_list_price#48,ss_ext_tax#49,ss_coupon_amt#50,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
               :     :              :                       :  +- SubqueryAlias spark_catalog.default.customer
               :     :              :                       :     +- Relation[c_customer_sk#25,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#98,c_first_shipto_date_sk#99,c_first_sales_date_sk#100,c_salutation#101,c_first_name#16,c_last_name#15,c_preferred_cust_flag#102,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet
               :     :              :                       +- SubqueryAlias spark_catalog.default.date_dim
               :     :              :                          +- Relation[d_date_sk#22,d_date_id#54,d_date#30,d_month_seq#55,d_week_seq#56,d_quarter_seq#57,d_year#19,d_dow#58,d_moy#20,d_dom#59,d_qoy#60,d_fy_year#61,d_fy_quarter_seq#62,d_fy_week_seq#63,d_day_name#64,d_quarter_name#65,d_holiday#66,d_weekend#67,d_following_holiday#68,d_first_dom#69,d_last_dom#70,d_same_day_ly#71,d_same_day_lq#72,d_current_day#73,... 4 more fields] parquet
               :     :              +- Aggregate [c_customer_sk#25], [c_customer_sk#25, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true)) AS ssales#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true)) AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#94]
               :     :                 +- Filter (ss_customer_sk#34 = c_customer_sk#25)
               :     :                    +- Join Inner
               :     :                       :- SubqueryAlias spark_catalog.default.store_sales
               :     :                       :  +- Relation[ss_sold_date_sk#31,ss_sold_time_sk#33,ss_item_sk#32,ss_customer_sk#34,ss_cdemo_sk#35,ss_hdemo_sk#36,ss_addr_sk#37,ss_store_sk#38,ss_promo_sk#39,ss_ticket_number#40,ss_quantity#41,ss_wholesale_cost#42,ss_list_price#43,ss_sales_price#44,ss_ext_discount_amt#45,ss_ext_sales_price#46,ss_ext_wholesale_cost#47,ss_ext_list_price#48,ss_ext_tax#49,ss_coupon_amt#50,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
               :     :                       +- SubqueryAlias spark_catalog.default.customer
               :     :                          +- Relation[c_customer_sk#25,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#98,c_first_shipto_date_sk#99,c_first_sales_date_sk#100,c_salutation#101,c_first_name#16,c_last_name#15,c_preferred_cust_flag#102,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet
               :     +- Join Inner
               :        :- Join Inner
               :        :  :- SubqueryAlias spark_catalog.default.catalog_sales
               :        :  :  +- Relation[cs_sold_date_sk#21,cs_sold_time_sk#110,cs_ship_date_sk#111,cs_bill_customer_sk#24,cs_bill_cdemo_sk#112,cs_bill_hdemo_sk#113,cs_bill_addr_sk#114,cs_ship_customer_sk#115,cs_ship_cdemo_sk#116,cs_ship_hdemo_sk#117,cs_ship_addr_sk#118,cs_call_center_sk#119,cs_catalog_page_sk#120,cs_ship_mode_sk#121,cs_warehouse_sk#122,cs_item_sk#23,cs_promo_sk#123,cs_order_number#124,cs_quantity#17,cs_wholesale_cost#125,cs_list_price#18,cs_sales_price#126,cs_ext_discount_amt#127,cs_ext_sales_price#128,... 10 more fields] parquet
               :        :  +- SubqueryAlias spark_catalog.default.customer
               :        :     +- Relation[c_customer_sk#25,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#98,c_first_shipto_date_sk#99,c_first_sales_date_sk#100,c_salutation#101,c_first_name#16,c_last_name#15,c_preferred_cust_flag#102,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet
               :        +- SubqueryAlias spark_catalog.default.date_dim
               :           +- Relation[d_date_sk#22,d_date_id#54,d_date#30,d_month_seq#55,d_week_seq#56,d_quarter_seq#57,d_year#19,d_dow#58,d_moy#20,d_dom#59,d_qoy#60,d_fy_year#61,d_fy_quarter_seq#62,d_fy_week_seq#63,d_day_name#64,d_quarter_name#65,d_holiday#66,d_weekend#67,d_following_holiday#68,d_first_dom#69,d_last_dom#70,d_same_day_ly#71,d_same_day_lq#72,d_current_day#73,... 4 more fields] parquet
               +- Project [c_last_name#15 AS c_last_name#129, c_first_name#16 AS c_first_name#130, sales#12 AS sales#131]
                  +- Aggregate [c_last_name#15, c_first_name#16], [c_last_name#15, c_first_name#16, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#132 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#133 as decimal(12,2)))), DecimalType(18,2), true)) AS sales#12]
                     +- Filter ((((d_year#19 = 2000) AND (d_moy#20 = 2)) AND (ws_sold_date_sk#134 = d_date_sk#22)) AND ((ws_item_sk#135 IN (list#13 []) AND ws_bill_customer_sk#136 IN (list#14 [])) AND (ws_bill_customer_sk#136 = c_customer_sk#25)))
                        :  :- Project [item_sk#2]
                        :  :  +- SubqueryAlias frequent_ss_items
                        :  :     +- Project [itemdesc#1, item_sk#2, solddate#3, cnt#26]
                        :  :        +- Filter (count(1)#137 > cast(4 as bigint))
                        :  :           +- Aggregate [substr(i_item_desc#28, 1, 30), i_item_sk#29, d_date#30], [substr(i_item_desc#28, 1, 30) AS itemdesc#1, i_item_sk#29 AS item_sk#2, d_date#30 AS solddate#3, count(1) AS cnt#26, count(1) AS count(1)#137]
                        :  :              +- Filter (((ss_sold_date_sk#31 = d_date_sk#22) AND (ss_item_sk#32 = i_item_sk#29)) AND d_year#19 IN (2000,(2000 + 1),(2000 + 2),(2000 + 3)))
                        :  :                 +- Join Inner
                        :  :                    :- Join Inner
                        :  :                    :  :- SubqueryAlias spark_catalog.default.store_sales
                        :  :                    :  :  +- Relation[ss_sold_date_sk#31,ss_sold_time_sk#33,ss_item_sk#32,ss_customer_sk#34,ss_cdemo_sk#35,ss_hdemo_sk#36,ss_addr_sk#37,ss_store_sk#38,ss_promo_sk#39,ss_ticket_number#40,ss_quantity#41,ss_wholesale_cost#42,ss_list_price#43,ss_sales_price#44,ss_ext_discount_amt#45,ss_ext_sales_price#46,ss_ext_wholesale_cost#47,ss_ext_list_price#48,ss_ext_tax#49,ss_coupon_amt#50,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
                        :  :                    :  +- SubqueryAlias spark_catalog.default.date_dim
                        :  :                    :     +- Relation[d_date_sk#22,d_date_id#54,d_date#30,d_month_seq#55,d_week_seq#56,d_quarter_seq#57,d_year#19,d_dow#58,d_moy#20,d_dom#59,d_qoy#60,d_fy_year#61,d_fy_quarter_seq#62,d_fy_week_seq#63,d_day_name#64,d_quarter_name#65,d_holiday#66,d_weekend#67,d_following_holiday#68,d_first_dom#69,d_last_dom#70,d_same_day_ly#71,d_same_day_lq#72,d_current_day#73,... 4 more fields] parquet
                        :  :                    +- SubqueryAlias spark_catalog.default.item
                        :  :                       +- Relation[i_item_sk#29,i_item_id#74,i_rec_start_date#75,i_rec_end_date#76,i_item_desc#28,i_current_price#77,i_wholesale_cost#78,i_brand_id#79,i_brand#80,i_class_id#81,i_class#82,i_category_id#83,i_category#84,i_manufact_id#85,i_manufact#86,i_size#87,i_formulation#88,i_color#89,i_units#90,i_container#91,i_manager_id#92,i_product_name#93] parquet
                        :  +- Project [c_customer_sk#25]
                        :     +- SubqueryAlias best_ss_customer
                        :        +- Project [c_customer_sk#25, ssales#8]
                        :           +- Filter (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#138 as decimal(38,8)) > cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cast(50 as decimal(2,0)) as decimal(4,1))) / promote_precision(cast(100.0 as decimal(4,1)))), DecimalType(9,6), true) as decimal(32,6))) * promote_precision(cast(scalar-subquery#7 [] as decimal(32,6)))), DecimalType(38,8), true) as decimal(38,8)))
                        :              :  +- Project [tpcds_cmax#5]
                        :              :     +- SubqueryAlias max_store_sales
                        :              :        +- Aggregate [max(csales#6) AS tpcds_cmax#5]
                        :              :           +- SubqueryAlias x
                        :              :              +- Aggregate [c_customer_sk#25], [c_customer_sk#25, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true)) AS csales#6]
                        :              :                 +- Filter (((ss_customer_sk#34 = c_customer_sk#25) AND (ss_sold_date_sk#31 = d_date_sk#22)) AND d_year#19 IN (2000,(2000 + 1),(2000 + 2),(2000 + 3)))
                        :              :                    +- Join Inner
                        :              :                       :- Join Inner
                        :              :                       :  :- SubqueryAlias spark_catalog.default.store_sales
                        :              :                       :  :  +- Relation[ss_sold_date_sk#31,ss_sold_time_sk#33,ss_item_sk#32,ss_customer_sk#34,ss_cdemo_sk#35,ss_hdemo_sk#36,ss_addr_sk#37,ss_store_sk#38,ss_promo_sk#39,ss_ticket_number#40,ss_quantity#41,ss_wholesale_cost#42,ss_list_price#43,ss_sales_price#44,ss_ext_discount_amt#45,ss_ext_sales_price#46,ss_ext_wholesale_cost#47,ss_ext_list_price#48,ss_ext_tax#49,ss_coupon_amt#50,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
                        :              :                       :  +- SubqueryAlias spark_catalog.default.customer
                        :              :                       :     +- Relation[c_customer_sk#25,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#98,c_first_shipto_date_sk#99,c_first_sales_date_sk#100,c_salutation#101,c_first_name#16,c_last_name#15,c_preferred_cust_flag#102,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet
                        :              :                       +- SubqueryAlias spark_catalog.default.date_dim
                        :              :                          +- Relation[d_date_sk#22,d_date_id#54,d_date#30,d_month_seq#55,d_week_seq#56,d_quarter_seq#57,d_year#19,d_dow#58,d_moy#20,d_dom#59,d_qoy#60,d_fy_year#61,d_fy_quarter_seq#62,d_fy_week_seq#63,d_day_name#64,d_quarter_name#65,d_holiday#66,d_weekend#67,d_following_holiday#68,d_first_dom#69,d_last_dom#70,d_same_day_ly#71,d_same_day_lq#72,d_current_day#73,... 4 more fields] parquet
                        :              +- Aggregate [c_customer_sk#25], [c_customer_sk#25, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true)) AS ssales#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true)) AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#138]
                        :                 +- Filter (ss_customer_sk#34 = c_customer_sk#25)
                        :                    +- Join Inner
                        :                       :- SubqueryAlias spark_catalog.default.store_sales
                        :                       :  +- Relation[ss_sold_date_sk#31,ss_sold_time_sk#33,ss_item_sk#32,ss_customer_sk#34,ss_cdemo_sk#35,ss_hdemo_sk#36,ss_addr_sk#37,ss_store_sk#38,ss_promo_sk#39,ss_ticket_number#40,ss_quantity#41,ss_wholesale_cost#42,ss_list_price#43,ss_sales_price#44,ss_ext_discount_amt#45,ss_ext_sales_price#46,ss_ext_wholesale_cost#47,ss_ext_list_price#48,ss_ext_tax#49,ss_coupon_amt#50,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
                        :                       +- SubqueryAlias spark_catalog.default.customer
                        :                          +- Relation[c_customer_sk#25,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#98,c_first_shipto_date_sk#99,c_first_sales_date_sk#100,c_salutation#101,c_first_name#16,c_last_name#15,c_preferred_cust_flag#102,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet
                        +- Join Inner
                           :- Join Inner
                           :  :- SubqueryAlias spark_catalog.default.web_sales
                           :  :  +- Relation[ws_sold_date_sk#134,ws_sold_time_sk#139,ws_ship_date_sk#140,ws_item_sk#135,ws_bill_customer_sk#136,ws_bill_cdemo_sk#141,ws_bill_hdemo_sk#142,ws_bill_addr_sk#143,ws_ship_customer_sk#144,ws_ship_cdemo_sk#145,ws_ship_hdemo_sk#146,ws_ship_addr_sk#147,ws_web_page_sk#148,ws_web_site_sk#149,ws_ship_mode_sk#150,ws_warehouse_sk#151,ws_promo_sk#152,ws_order_number#153,ws_quantity#132,ws_wholesale_cost#154,ws_list_price#133,ws_sales_price#155,ws_ext_discount_amt#156,ws_ext_sales_price#157,... 10 more fields] parquet
                           :  +- SubqueryAlias spark_catalog.default.customer
                           :     +- Relation[c_customer_sk#25,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#98,c_first_shipto_date_sk#99,c_first_sales_date_sk#100,c_salutation#101,c_first_name#16,c_last_name#15,c_preferred_cust_flag#102,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet
                           +- SubqueryAlias spark_catalog.default.date_dim
                              +- Relation[d_date_sk#22,d_date_id#54,d_date#30,d_month_seq#55,d_week_seq#56,d_quarter_seq#57,d_year#19,d_dow#58,d_moy#20,d_dom#59,d_qoy#60,d_fy_year#61,d_fy_quarter_seq#62,d_fy_week_seq#63,d_day_name#64,d_quarter_name#65,d_holiday#66,d_weekend#67,d_following_holiday#68,d_first_dom#69,d_last_dom#70,d_same_day_ly#71,d_same_day_lq#72,d_current_day#73,... 4 more fields] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Sort [c_last_name#15 ASC NULLS FIRST, c_first_name#16 ASC NULLS FIRST, sales#9 ASC NULLS FIRST], true
      +- Union false, false
         :- Aggregate [c_last_name#15, c_first_name#16], [c_last_name#15, c_first_name#16, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#17 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#18 as decimal(12,2)))), DecimalType(18,2), true)) AS sales#9]
         :  +- Project [cs_quantity#17, cs_list_price#18, c_first_name#16, c_last_name#15]
         :     +- Join Inner, (cs_sold_date_sk#21 = d_date_sk#22)
         :        :- Project [cs_sold_date_sk#21, cs_quantity#17, cs_list_price#18, c_first_name#16, c_last_name#15]
         :        :  +- Join Inner, (cs_bill_customer_sk#24 = c_customer_sk#25)
         :        :     :- Join LeftSemi, (cs_bill_customer_sk#24 = c_customer_sk#25)
         :        :     :  :- Project [cs_sold_date_sk#21, cs_bill_customer_sk#24, cs_quantity#17, cs_list_price#18]
         :        :     :  :  +- Join LeftSemi, (cs_item_sk#23 = item_sk#2)
         :        :     :  :     :- Project [cs_sold_date_sk#21, cs_bill_customer_sk#24, cs_item_sk#23, cs_quantity#17, cs_list_price#18]
         :        :     :  :     :  +- Filter (isnotnull(cs_bill_customer_sk#24) AND isnotnull(cs_sold_date_sk#21))
         :        :     :  :     :     +- Relation[cs_sold_date_sk#21,cs_sold_time_sk#110,cs_ship_date_sk#111,cs_bill_customer_sk#24,cs_bill_cdemo_sk#112,cs_bill_hdemo_sk#113,cs_bill_addr_sk#114,cs_ship_customer_sk#115,cs_ship_cdemo_sk#116,cs_ship_hdemo_sk#117,cs_ship_addr_sk#118,cs_call_center_sk#119,cs_catalog_page_sk#120,cs_ship_mode_sk#121,cs_warehouse_sk#122,cs_item_sk#23,cs_promo_sk#123,cs_order_number#124,cs_quantity#17,cs_wholesale_cost#125,cs_list_price#18,cs_sales_price#126,cs_ext_discount_amt#127,cs_ext_sales_price#128,... 10 more fields] parquet
         :        :     :  :     +- Project [item_sk#2]
         :        :     :  :        +- Filter (count(1)#27 > 4)
         :        :     :  :           +- Aggregate [substr(i_item_desc#28, 1, 30), i_item_sk#29, d_date#30], [i_item_sk#29 AS item_sk#2, count(1) AS count(1)#27]
         :        :     :  :              +- Project [d_date#30, i_item_sk#29, i_item_desc#28]
         :        :     :  :                 +- Join Inner, (ss_item_sk#32 = i_item_sk#29)
         :        :     :  :                    :- Project [ss_item_sk#32, d_date#30]
         :        :     :  :                    :  +- Join Inner, (ss_sold_date_sk#31 = d_date_sk#22)
         :        :     :  :                    :     :- Project [ss_sold_date_sk#31, ss_item_sk#32]
         :        :     :  :                    :     :  +- Filter (isnotnull(ss_sold_date_sk#31) AND isnotnull(ss_item_sk#32))
         :        :     :  :                    :     :     +- Relation[ss_sold_date_sk#31,ss_sold_time_sk#33,ss_item_sk#32,ss_customer_sk#34,ss_cdemo_sk#35,ss_hdemo_sk#36,ss_addr_sk#37,ss_store_sk#38,ss_promo_sk#39,ss_ticket_number#40,ss_quantity#41,ss_wholesale_cost#42,ss_list_price#43,ss_sales_price#44,ss_ext_discount_amt#45,ss_ext_sales_price#46,ss_ext_wholesale_cost#47,ss_ext_list_price#48,ss_ext_tax#49,ss_coupon_amt#50,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
         :        :     :  :                    :     +- Project [d_date_sk#22, d_date#30]
         :        :     :  :                    :        +- Filter (d_year#19 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#22))
         :        :     :  :                    :           +- Relation[d_date_sk#22,d_date_id#54,d_date#30,d_month_seq#55,d_week_seq#56,d_quarter_seq#57,d_year#19,d_dow#58,d_moy#20,d_dom#59,d_qoy#60,d_fy_year#61,d_fy_quarter_seq#62,d_fy_week_seq#63,d_day_name#64,d_quarter_name#65,d_holiday#66,d_weekend#67,d_following_holiday#68,d_first_dom#69,d_last_dom#70,d_same_day_ly#71,d_same_day_lq#72,d_current_day#73,... 4 more fields] parquet
         :        :     :  :                    +- Project [i_item_sk#29, i_item_desc#28]
         :        :     :  :                       +- Filter isnotnull(i_item_sk#29)
         :        :     :  :                          +- Relation[i_item_sk#29,i_item_id#74,i_rec_start_date#75,i_rec_end_date#76,i_item_desc#28,i_current_price#77,i_wholesale_cost#78,i_brand_id#79,i_brand#80,i_class_id#81,i_class#82,i_category_id#83,i_category#84,i_manufact_id#85,i_manufact#86,i_size#87,i_formulation#88,i_color#89,i_units#90,i_container#91,i_manager_id#92,i_product_name#93] parquet
         :        :     :  +- Project [c_customer_sk#25]
         :        :     :     +- Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#94) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#94 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(scalar-subquery#7 [] as decimal(32,6)))), DecimalType(38,8), true)))
         :        :     :        :  +- Aggregate [max(csales#6) AS tpcds_cmax#5]
         :        :     :        :     +- Aggregate [c_customer_sk#25], [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true)) AS csales#6]
         :        :     :        :        +- Project [ss_quantity#41, ss_sales_price#44, c_customer_sk#25]
         :        :     :        :           +- Join Inner, (ss_sold_date_sk#31 = d_date_sk#22)
         :        :     :        :              :- Project [ss_sold_date_sk#31, ss_quantity#41, ss_sales_price#44, c_customer_sk#25]
         :        :     :        :              :  +- Join Inner, (ss_customer_sk#34 = c_customer_sk#25)
         :        :     :        :              :     :- Project [ss_sold_date_sk#31, ss_customer_sk#34, ss_quantity#41, ss_sales_price#44]
         :        :     :        :              :     :  +- Filter (isnotnull(ss_customer_sk#34) AND isnotnull(ss_sold_date_sk#31))
         :        :     :        :              :     :     +- Relation[ss_sold_date_sk#31,ss_sold_time_sk#33,ss_item_sk#32,ss_customer_sk#34,ss_cdemo_sk#35,ss_hdemo_sk#36,ss_addr_sk#37,ss_store_sk#38,ss_promo_sk#39,ss_ticket_number#40,ss_quantity#41,ss_wholesale_cost#42,ss_list_price#43,ss_sales_price#44,ss_ext_discount_amt#45,ss_ext_sales_price#46,ss_ext_wholesale_cost#47,ss_ext_list_price#48,ss_ext_tax#49,ss_coupon_amt#50,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
         :        :     :        :              :     +- Project [c_customer_sk#25]
         :        :     :        :              :        +- Filter isnotnull(c_customer_sk#25)
         :        :     :        :              :           +- Relation[c_customer_sk#25,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#98,c_first_shipto_date_sk#99,c_first_sales_date_sk#100,c_salutation#101,c_first_name#16,c_last_name#15,c_preferred_cust_flag#102,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet
         :        :     :        :              +- Project [d_date_sk#22]
         :        :     :        :                 +- Filter (d_year#19 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#22))
         :        :     :        :                    +- Relation[d_date_sk#22,d_date_id#54,d_date#30,d_month_seq#55,d_week_seq#56,d_quarter_seq#57,d_year#19,d_dow#58,d_moy#20,d_dom#59,d_qoy#60,d_fy_year#61,d_fy_quarter_seq#62,d_fy_week_seq#63,d_day_name#64,d_quarter_name#65,d_holiday#66,d_weekend#67,d_following_holiday#68,d_first_dom#69,d_last_dom#70,d_same_day_ly#71,d_same_day_lq#72,d_current_day#73,... 4 more fields] parquet
         :        :     :        +- Aggregate [c_customer_sk#25], [c_customer_sk#25, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true)) AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#94]
         :        :     :           +- Project [ss_quantity#41, ss_sales_price#44, c_customer_sk#25]
         :        :     :              +- Join Inner, (ss_customer_sk#34 = c_customer_sk#25)
         :        :     :                 :- Project [ss_customer_sk#34, ss_quantity#41, ss_sales_price#44]
         :        :     :                 :  +- Filter isnotnull(ss_customer_sk#34)
         :        :     :                 :     +- Relation[ss_sold_date_sk#31,ss_sold_time_sk#33,ss_item_sk#32,ss_customer_sk#34,ss_cdemo_sk#35,ss_hdemo_sk#36,ss_addr_sk#37,ss_store_sk#38,ss_promo_sk#39,ss_ticket_number#40,ss_quantity#41,ss_wholesale_cost#42,ss_list_price#43,ss_sales_price#44,ss_ext_discount_amt#45,ss_ext_sales_price#46,ss_ext_wholesale_cost#47,ss_ext_list_price#48,ss_ext_tax#49,ss_coupon_amt#50,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
         :        :     :                 +- Project [c_customer_sk#25]
         :        :     :                    +- Filter isnotnull(c_customer_sk#25)
         :        :     :                       +- Relation[c_customer_sk#25,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#98,c_first_shipto_date_sk#99,c_first_sales_date_sk#100,c_salutation#101,c_first_name#16,c_last_name#15,c_preferred_cust_flag#102,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet
         :        :     +- Join LeftSemi, (c_customer_sk#25 = c_customer_sk#25#158)
         :        :        :- Project [c_customer_sk#25, c_first_name#16, c_last_name#15]
         :        :        :  +- Filter isnotnull(c_customer_sk#25)
         :        :        :     +- Relation[c_customer_sk#25,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#98,c_first_shipto_date_sk#99,c_first_sales_date_sk#100,c_salutation#101,c_first_name#16,c_last_name#15,c_preferred_cust_flag#102,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet
         :        :        +- Project [c_customer_sk#25 AS c_customer_sk#25#158]
         :        :           +- Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#94) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#94 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(scalar-subquery#7 [] as decimal(32,6)))), DecimalType(38,8), true)))
         :        :              :  +- Aggregate [max(csales#6) AS tpcds_cmax#5]
         :        :              :     +- Aggregate [c_customer_sk#25], [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true)) AS csales#6]
         :        :              :        +- Project [ss_quantity#41, ss_sales_price#44, c_customer_sk#25]
         :        :              :           +- Join Inner, (ss_sold_date_sk#31 = d_date_sk#22)
         :        :              :              :- Project [ss_sold_date_sk#31, ss_quantity#41, ss_sales_price#44, c_customer_sk#25]
         :        :              :              :  +- Join Inner, (ss_customer_sk#34 = c_customer_sk#25)
         :        :              :              :     :- Project [ss_sold_date_sk#31, ss_customer_sk#34, ss_quantity#41, ss_sales_price#44]
         :        :              :              :     :  +- Filter (isnotnull(ss_customer_sk#34) AND isnotnull(ss_sold_date_sk#31))
         :        :              :              :     :     +- Relation[ss_sold_date_sk#31,ss_sold_time_sk#33,ss_item_sk#32,ss_customer_sk#34,ss_cdemo_sk#35,ss_hdemo_sk#36,ss_addr_sk#37,ss_store_sk#38,ss_promo_sk#39,ss_ticket_number#40,ss_quantity#41,ss_wholesale_cost#42,ss_list_price#43,ss_sales_price#44,ss_ext_discount_amt#45,ss_ext_sales_price#46,ss_ext_wholesale_cost#47,ss_ext_list_price#48,ss_ext_tax#49,ss_coupon_amt#50,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
         :        :              :              :     +- Project [c_customer_sk#25]
         :        :              :              :        +- Filter isnotnull(c_customer_sk#25)
         :        :              :              :           +- Relation[c_customer_sk#25,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#98,c_first_shipto_date_sk#99,c_first_sales_date_sk#100,c_salutation#101,c_first_name#16,c_last_name#15,c_preferred_cust_flag#102,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet
         :        :              :              +- Project [d_date_sk#22]
         :        :              :                 +- Filter (d_year#19 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#22))
         :        :              :                    +- Relation[d_date_sk#22,d_date_id#54,d_date#30,d_month_seq#55,d_week_seq#56,d_quarter_seq#57,d_year#19,d_dow#58,d_moy#20,d_dom#59,d_qoy#60,d_fy_year#61,d_fy_quarter_seq#62,d_fy_week_seq#63,d_day_name#64,d_quarter_name#65,d_holiday#66,d_weekend#67,d_following_holiday#68,d_first_dom#69,d_last_dom#70,d_same_day_ly#71,d_same_day_lq#72,d_current_day#73,... 4 more fields] parquet
         :        :              +- Aggregate [c_customer_sk#25], [c_customer_sk#25, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true)) AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#94]
         :        :                 +- Project [ss_quantity#41, ss_sales_price#44, c_customer_sk#25]
         :        :                    +- Join Inner, (ss_customer_sk#34 = c_customer_sk#25)
         :        :                       :- Project [ss_customer_sk#34, ss_quantity#41, ss_sales_price#44]
         :        :                       :  +- Filter isnotnull(ss_customer_sk#34)
         :        :                       :     +- Relation[ss_sold_date_sk#31,ss_sold_time_sk#33,ss_item_sk#32,ss_customer_sk#34,ss_cdemo_sk#35,ss_hdemo_sk#36,ss_addr_sk#37,ss_store_sk#38,ss_promo_sk#39,ss_ticket_number#40,ss_quantity#41,ss_wholesale_cost#42,ss_list_price#43,ss_sales_price#44,ss_ext_discount_amt#45,ss_ext_sales_price#46,ss_ext_wholesale_cost#47,ss_ext_list_price#48,ss_ext_tax#49,ss_coupon_amt#50,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
         :        :                       +- Project [c_customer_sk#25]
         :        :                          +- Filter isnotnull(c_customer_sk#25)
         :        :                             +- Relation[c_customer_sk#25,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#98,c_first_shipto_date_sk#99,c_first_sales_date_sk#100,c_salutation#101,c_first_name#16,c_last_name#15,c_preferred_cust_flag#102,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet
         :        +- Project [d_date_sk#22]
         :           +- Filter ((((isnotnull(d_year#19) AND isnotnull(d_moy#20)) AND (d_year#19 = 2000)) AND (d_moy#20 = 2)) AND isnotnull(d_date_sk#22))
         :              +- Relation[d_date_sk#22,d_date_id#54,d_date#30,d_month_seq#55,d_week_seq#56,d_quarter_seq#57,d_year#19,d_dow#58,d_moy#20,d_dom#59,d_qoy#60,d_fy_year#61,d_fy_quarter_seq#62,d_fy_week_seq#63,d_day_name#64,d_quarter_name#65,d_holiday#66,d_weekend#67,d_following_holiday#68,d_first_dom#69,d_last_dom#70,d_same_day_ly#71,d_same_day_lq#72,d_current_day#73,... 4 more fields] parquet
         +- Aggregate [c_last_name#15, c_first_name#16], [c_last_name#15, c_first_name#16, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#132 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#133 as decimal(12,2)))), DecimalType(18,2), true)) AS sales#131]
            +- Project [ws_quantity#132, ws_list_price#133, c_first_name#16, c_last_name#15]
               +- Join Inner, (ws_sold_date_sk#134 = d_date_sk#22)
                  :- Project [ws_sold_date_sk#134, ws_quantity#132, ws_list_price#133, c_first_name#16, c_last_name#15]
                  :  +- Join Inner, (ws_bill_customer_sk#136 = c_customer_sk#25)
                  :     :- Join LeftSemi, (ws_bill_customer_sk#136 = c_customer_sk#25)
                  :     :  :- Project [ws_sold_date_sk#134, ws_bill_customer_sk#136, ws_quantity#132, ws_list_price#133]
                  :     :  :  +- Join LeftSemi, (ws_item_sk#135 = item_sk#2)
                  :     :  :     :- Project [ws_sold_date_sk#134, ws_item_sk#135, ws_bill_customer_sk#136, ws_quantity#132, ws_list_price#133]
                  :     :  :     :  +- Filter (isnotnull(ws_bill_customer_sk#136) AND isnotnull(ws_sold_date_sk#134))
                  :     :  :     :     +- Relation[ws_sold_date_sk#134,ws_sold_time_sk#139,ws_ship_date_sk#140,ws_item_sk#135,ws_bill_customer_sk#136,ws_bill_cdemo_sk#141,ws_bill_hdemo_sk#142,ws_bill_addr_sk#143,ws_ship_customer_sk#144,ws_ship_cdemo_sk#145,ws_ship_hdemo_sk#146,ws_ship_addr_sk#147,ws_web_page_sk#148,ws_web_site_sk#149,ws_ship_mode_sk#150,ws_warehouse_sk#151,ws_promo_sk#152,ws_order_number#153,ws_quantity#132,ws_wholesale_cost#154,ws_list_price#133,ws_sales_price#155,ws_ext_discount_amt#156,ws_ext_sales_price#157,... 10 more fields] parquet
                  :     :  :     +- Project [item_sk#2]
                  :     :  :        +- Filter (count(1)#137 > 4)
                  :     :  :           +- Aggregate [substr(i_item_desc#28, 1, 30), i_item_sk#29, d_date#30], [i_item_sk#29 AS item_sk#2, count(1) AS count(1)#137]
                  :     :  :              +- Project [d_date#30, i_item_sk#29, i_item_desc#28]
                  :     :  :                 +- Join Inner, (ss_item_sk#32 = i_item_sk#29)
                  :     :  :                    :- Project [ss_item_sk#32, d_date#30]
                  :     :  :                    :  +- Join Inner, (ss_sold_date_sk#31 = d_date_sk#22)
                  :     :  :                    :     :- Project [ss_sold_date_sk#31, ss_item_sk#32]
                  :     :  :                    :     :  +- Filter (isnotnull(ss_sold_date_sk#31) AND isnotnull(ss_item_sk#32))
                  :     :  :                    :     :     +- Relation[ss_sold_date_sk#31,ss_sold_time_sk#33,ss_item_sk#32,ss_customer_sk#34,ss_cdemo_sk#35,ss_hdemo_sk#36,ss_addr_sk#37,ss_store_sk#38,ss_promo_sk#39,ss_ticket_number#40,ss_quantity#41,ss_wholesale_cost#42,ss_list_price#43,ss_sales_price#44,ss_ext_discount_amt#45,ss_ext_sales_price#46,ss_ext_wholesale_cost#47,ss_ext_list_price#48,ss_ext_tax#49,ss_coupon_amt#50,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
                  :     :  :                    :     +- Project [d_date_sk#22, d_date#30]
                  :     :  :                    :        +- Filter (d_year#19 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#22))
                  :     :  :                    :           +- Relation[d_date_sk#22,d_date_id#54,d_date#30,d_month_seq#55,d_week_seq#56,d_quarter_seq#57,d_year#19,d_dow#58,d_moy#20,d_dom#59,d_qoy#60,d_fy_year#61,d_fy_quarter_seq#62,d_fy_week_seq#63,d_day_name#64,d_quarter_name#65,d_holiday#66,d_weekend#67,d_following_holiday#68,d_first_dom#69,d_last_dom#70,d_same_day_ly#71,d_same_day_lq#72,d_current_day#73,... 4 more fields] parquet
                  :     :  :                    +- Project [i_item_sk#29, i_item_desc#28]
                  :     :  :                       +- Filter isnotnull(i_item_sk#29)
                  :     :  :                          +- Relation[i_item_sk#29,i_item_id#74,i_rec_start_date#75,i_rec_end_date#76,i_item_desc#28,i_current_price#77,i_wholesale_cost#78,i_brand_id#79,i_brand#80,i_class_id#81,i_class#82,i_category_id#83,i_category#84,i_manufact_id#85,i_manufact#86,i_size#87,i_formulation#88,i_color#89,i_units#90,i_container#91,i_manager_id#92,i_product_name#93] parquet
                  :     :  +- Project [c_customer_sk#25]
                  :     :     +- Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#138) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#138 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(scalar-subquery#7 [] as decimal(32,6)))), DecimalType(38,8), true)))
                  :     :        :  +- Aggregate [max(csales#6) AS tpcds_cmax#5]
                  :     :        :     +- Aggregate [c_customer_sk#25], [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true)) AS csales#6]
                  :     :        :        +- Project [ss_quantity#41, ss_sales_price#44, c_customer_sk#25]
                  :     :        :           +- Join Inner, (ss_sold_date_sk#31 = d_date_sk#22)
                  :     :        :              :- Project [ss_sold_date_sk#31, ss_quantity#41, ss_sales_price#44, c_customer_sk#25]
                  :     :        :              :  +- Join Inner, (ss_customer_sk#34 = c_customer_sk#25)
                  :     :        :              :     :- Project [ss_sold_date_sk#31, ss_customer_sk#34, ss_quantity#41, ss_sales_price#44]
                  :     :        :              :     :  +- Filter (isnotnull(ss_customer_sk#34) AND isnotnull(ss_sold_date_sk#31))
                  :     :        :              :     :     +- Relation[ss_sold_date_sk#31,ss_sold_time_sk#33,ss_item_sk#32,ss_customer_sk#34,ss_cdemo_sk#35,ss_hdemo_sk#36,ss_addr_sk#37,ss_store_sk#38,ss_promo_sk#39,ss_ticket_number#40,ss_quantity#41,ss_wholesale_cost#42,ss_list_price#43,ss_sales_price#44,ss_ext_discount_amt#45,ss_ext_sales_price#46,ss_ext_wholesale_cost#47,ss_ext_list_price#48,ss_ext_tax#49,ss_coupon_amt#50,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
                  :     :        :              :     +- Project [c_customer_sk#25]
                  :     :        :              :        +- Filter isnotnull(c_customer_sk#25)
                  :     :        :              :           +- Relation[c_customer_sk#25,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#98,c_first_shipto_date_sk#99,c_first_sales_date_sk#100,c_salutation#101,c_first_name#16,c_last_name#15,c_preferred_cust_flag#102,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet
                  :     :        :              +- Project [d_date_sk#22]
                  :     :        :                 +- Filter (d_year#19 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#22))
                  :     :        :                    +- Relation[d_date_sk#22,d_date_id#54,d_date#30,d_month_seq#55,d_week_seq#56,d_quarter_seq#57,d_year#19,d_dow#58,d_moy#20,d_dom#59,d_qoy#60,d_fy_year#61,d_fy_quarter_seq#62,d_fy_week_seq#63,d_day_name#64,d_quarter_name#65,d_holiday#66,d_weekend#67,d_following_holiday#68,d_first_dom#69,d_last_dom#70,d_same_day_ly#71,d_same_day_lq#72,d_current_day#73,... 4 more fields] parquet
                  :     :        +- Aggregate [c_customer_sk#25], [c_customer_sk#25, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true)) AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#138]
                  :     :           +- Project [ss_quantity#41, ss_sales_price#44, c_customer_sk#25]
                  :     :              +- Join Inner, (ss_customer_sk#34 = c_customer_sk#25)
                  :     :                 :- Project [ss_customer_sk#34, ss_quantity#41, ss_sales_price#44]
                  :     :                 :  +- Filter isnotnull(ss_customer_sk#34)
                  :     :                 :     +- Relation[ss_sold_date_sk#31,ss_sold_time_sk#33,ss_item_sk#32,ss_customer_sk#34,ss_cdemo_sk#35,ss_hdemo_sk#36,ss_addr_sk#37,ss_store_sk#38,ss_promo_sk#39,ss_ticket_number#40,ss_quantity#41,ss_wholesale_cost#42,ss_list_price#43,ss_sales_price#44,ss_ext_discount_amt#45,ss_ext_sales_price#46,ss_ext_wholesale_cost#47,ss_ext_list_price#48,ss_ext_tax#49,ss_coupon_amt#50,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
                  :     :                 +- Project [c_customer_sk#25]
                  :     :                    +- Filter isnotnull(c_customer_sk#25)
                  :     :                       +- Relation[c_customer_sk#25,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#98,c_first_shipto_date_sk#99,c_first_sales_date_sk#100,c_salutation#101,c_first_name#16,c_last_name#15,c_preferred_cust_flag#102,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet
                  :     +- Join LeftSemi, (c_customer_sk#25 = c_customer_sk#25#159)
                  :        :- Project [c_customer_sk#25, c_first_name#16, c_last_name#15]
                  :        :  +- Filter isnotnull(c_customer_sk#25)
                  :        :     +- Relation[c_customer_sk#25,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#98,c_first_shipto_date_sk#99,c_first_sales_date_sk#100,c_salutation#101,c_first_name#16,c_last_name#15,c_preferred_cust_flag#102,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet
                  :        +- Project [c_customer_sk#25 AS c_customer_sk#25#159]
                  :           +- Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#138) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#138 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(scalar-subquery#7 [] as decimal(32,6)))), DecimalType(38,8), true)))
                  :              :  +- Aggregate [max(csales#6) AS tpcds_cmax#5]
                  :              :     +- Aggregate [c_customer_sk#25], [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true)) AS csales#6]
                  :              :        +- Project [ss_quantity#41, ss_sales_price#44, c_customer_sk#25]
                  :              :           +- Join Inner, (ss_sold_date_sk#31 = d_date_sk#22)
                  :              :              :- Project [ss_sold_date_sk#31, ss_quantity#41, ss_sales_price#44, c_customer_sk#25]
                  :              :              :  +- Join Inner, (ss_customer_sk#34 = c_customer_sk#25)
                  :              :              :     :- Project [ss_sold_date_sk#31, ss_customer_sk#34, ss_quantity#41, ss_sales_price#44]
                  :              :              :     :  +- Filter (isnotnull(ss_customer_sk#34) AND isnotnull(ss_sold_date_sk#31))
                  :              :              :     :     +- Relation[ss_sold_date_sk#31,ss_sold_time_sk#33,ss_item_sk#32,ss_customer_sk#34,ss_cdemo_sk#35,ss_hdemo_sk#36,ss_addr_sk#37,ss_store_sk#38,ss_promo_sk#39,ss_ticket_number#40,ss_quantity#41,ss_wholesale_cost#42,ss_list_price#43,ss_sales_price#44,ss_ext_discount_amt#45,ss_ext_sales_price#46,ss_ext_wholesale_cost#47,ss_ext_list_price#48,ss_ext_tax#49,ss_coupon_amt#50,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
                  :              :              :     +- Project [c_customer_sk#25]
                  :              :              :        +- Filter isnotnull(c_customer_sk#25)
                  :              :              :           +- Relation[c_customer_sk#25,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#98,c_first_shipto_date_sk#99,c_first_sales_date_sk#100,c_salutation#101,c_first_name#16,c_last_name#15,c_preferred_cust_flag#102,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet
                  :              :              +- Project [d_date_sk#22]
                  :              :                 +- Filter (d_year#19 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#22))
                  :              :                    +- Relation[d_date_sk#22,d_date_id#54,d_date#30,d_month_seq#55,d_week_seq#56,d_quarter_seq#57,d_year#19,d_dow#58,d_moy#20,d_dom#59,d_qoy#60,d_fy_year#61,d_fy_quarter_seq#62,d_fy_week_seq#63,d_day_name#64,d_quarter_name#65,d_holiday#66,d_weekend#67,d_following_holiday#68,d_first_dom#69,d_last_dom#70,d_same_day_ly#71,d_same_day_lq#72,d_current_day#73,... 4 more fields] parquet
                  :              +- Aggregate [c_customer_sk#25], [c_customer_sk#25, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true)) AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#138]
                  :                 +- Project [ss_quantity#41, ss_sales_price#44, c_customer_sk#25]
                  :                    +- Join Inner, (ss_customer_sk#34 = c_customer_sk#25)
                  :                       :- Project [ss_customer_sk#34, ss_quantity#41, ss_sales_price#44]
                  :                       :  +- Filter isnotnull(ss_customer_sk#34)
                  :                       :     +- Relation[ss_sold_date_sk#31,ss_sold_time_sk#33,ss_item_sk#32,ss_customer_sk#34,ss_cdemo_sk#35,ss_hdemo_sk#36,ss_addr_sk#37,ss_store_sk#38,ss_promo_sk#39,ss_ticket_number#40,ss_quantity#41,ss_wholesale_cost#42,ss_list_price#43,ss_sales_price#44,ss_ext_discount_amt#45,ss_ext_sales_price#46,ss_ext_wholesale_cost#47,ss_ext_list_price#48,ss_ext_tax#49,ss_coupon_amt#50,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
                  :                       +- Project [c_customer_sk#25]
                  :                          +- Filter isnotnull(c_customer_sk#25)
                  :                             +- Relation[c_customer_sk#25,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#98,c_first_shipto_date_sk#99,c_first_sales_date_sk#100,c_salutation#101,c_first_name#16,c_last_name#15,c_preferred_cust_flag#102,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet
                  +- Project [d_date_sk#22]
                     +- Filter ((((isnotnull(d_year#19) AND isnotnull(d_moy#20)) AND (d_year#19 = 2000)) AND (d_moy#20 = 2)) AND isnotnull(d_date_sk#22))
                        +- Relation[d_date_sk#22,d_date_id#54,d_date#30,d_month_seq#55,d_week_seq#56,d_quarter_seq#57,d_year#19,d_dow#58,d_moy#20,d_dom#59,d_qoy#60,d_fy_year#61,d_fy_quarter_seq#62,d_fy_week_seq#63,d_day_name#64,d_quarter_name#65,d_holiday#66,d_weekend#67,d_following_holiday#68,d_first_dom#69,d_last_dom#70,d_same_day_ly#71,d_same_day_lq#72,d_current_day#73,... 4 more fields] parquet

== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[c_last_name#15 ASC NULLS FIRST,c_first_name#16 ASC NULLS FIRST,sales#9 ASC NULLS FIRST], output=[c_last_name#15,c_first_name#16,sales#9])
+- Union
   :- *(14) HashAggregate(keys=[c_last_name#15, c_first_name#16], functions=[sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#17 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#18 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_last_name#15, c_first_name#16, sales#9])
   :  +- Exchange hashpartitioning(c_last_name#15, c_first_name#16, 5), true, [id=#160]
   :     +- *(13) HashAggregate(keys=[c_last_name#15, c_first_name#16], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#17 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#18 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_last_name#15, c_first_name#16, sum#161, isEmpty#162])
   :        +- *(13) Project [cs_quantity#17, cs_list_price#18, c_first_name#16, c_last_name#15]
   :           +- *(13) BroadcastHashJoin [cs_sold_date_sk#21], [d_date_sk#22], Inner, BuildRight, false
   :              :- *(13) Project [cs_sold_date_sk#21, cs_quantity#17, cs_list_price#18, c_first_name#16, c_last_name#15]
   :              :  +- *(13) BroadcastHashJoin [cs_bill_customer_sk#24], [c_customer_sk#25], Inner, BuildRight, false
   :              :     :- *(13) BroadcastHashJoin [cs_bill_customer_sk#24], [c_customer_sk#25], LeftSemi, BuildRight, false
   :              :     :  :- *(13) Project [cs_sold_date_sk#21, cs_bill_customer_sk#24, cs_quantity#17, cs_list_price#18]
   :              :     :  :  +- *(13) BroadcastHashJoin [cs_item_sk#23], [item_sk#2], LeftSemi, BuildRight, false
   :              :     :  :     :- *(13) Filter (isnotnull(cs_bill_customer_sk#24) AND isnotnull(cs_sold_date_sk#21))
   :              :     :  :     :  +- *(13) ColumnarToRow
   :              :     :  :     :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#21,cs_bill_customer_sk#24,cs_item_sk#23,cs_quantity#17,cs_list_price#18] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#24), isnotnull(cs_sold_date_sk#21)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:d...
   :              :     :  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#163]
   :              :     :  :        +- *(4) Project [item_sk#2]
   :              :     :  :           +- *(4) Filter (count(1)#27 > 4)
   :              :     :  :              +- *(4) HashAggregate(keys=[substr(i_item_desc#28, 1, 30)#164, i_item_sk#29, d_date#30], functions=[count(1)], output=[item_sk#2, count(1)#27])
   :              :     :  :                 +- Exchange hashpartitioning(substr(i_item_desc#28, 1, 30)#164, i_item_sk#29, d_date#30, 5), true, [id=#165]
   :              :     :  :                    +- *(3) HashAggregate(keys=[substr(i_item_desc#28, 1, 30) AS substr(i_item_desc#28, 1, 30)#164, i_item_sk#29, d_date#30], functions=[partial_count(1)], output=[substr(i_item_desc#28, 1, 30)#164, i_item_sk#29, d_date#30, count#166])
   :              :     :  :                       +- *(3) Project [d_date#30, i_item_sk#29, i_item_desc#28]
   :              :     :  :                          +- *(3) BroadcastHashJoin [ss_item_sk#32], [i_item_sk#29], Inner, BuildRight, false
   :              :     :  :                             :- *(3) Project [ss_item_sk#32, d_date#30]
   :              :     :  :                             :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#31], [d_date_sk#22], Inner, BuildRight, false
   :              :     :  :                             :     :- *(3) Filter (isnotnull(ss_sold_date_sk#31) AND isnotnull(ss_item_sk#32))
   :              :     :  :                             :     :  +- *(3) ColumnarToRow
   :              :     :  :                             :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#31,ss_item_sk#32] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#31), isnotnull(ss_item_sk#32)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>
   :              :     :  :                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#167]
   :              :     :  :                             :        +- *(1) Project [d_date_sk#22, d_date#30]
   :              :     :  :                             :           +- *(1) Filter (d_year#19 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#22))
   :              :     :  :                             :              +- *(1) ColumnarToRow
   :              :     :  :                             :                 +- FileScan parquet default.date_dim[d_date_sk#22,d_date#30,d_year#19] Batched: true, DataFilters: [d_year#19 IN (2000,2001,2002,2003), isnotnull(d_date_sk#22)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>
   :              :     :  :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#168]
   :              :     :  :                                +- *(2) Filter isnotnull(i_item_sk#29)
   :              :     :  :                                   +- *(2) ColumnarToRow
   :              :     :  :                                      +- FileScan parquet default.item[i_item_sk#29,i_item_desc#28] Batched: true, DataFilters: [isnotnull(i_item_sk#29)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>
   :              :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#169]
   :              :     :     +- *(7) Project [c_customer_sk#25]
   :              :     :        +- *(7) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#94) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#94 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#7, [id=#170] as decimal(32,6)))), DecimalType(38,8), true)))
   :              :     :           :  +- Subquery scalar-subquery#7, [id=#170]
   :              :     :           :     +- *(5) HashAggregate(keys=[], functions=[max(csales#6)], output=[tpcds_cmax#5])
   :              :     :           :        +- Exchange SinglePartition, true, [id=#171]
   :              :     :           :           +- *(4) HashAggregate(keys=[], functions=[partial_max(csales#6)], output=[max#172])
   :              :     :           :              +- *(4) HashAggregate(keys=[c_customer_sk#25], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#6])
   :              :     :           :                 +- Exchange hashpartitioning(c_customer_sk#25, 5), true, [id=#173]
   :              :     :           :                    +- *(3) HashAggregate(keys=[c_customer_sk#25], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#25, sum#174, isEmpty#175])
   :              :     :           :                       +- *(3) Project [ss_quantity#41, ss_sales_price#44, c_customer_sk#25]
   :              :     :           :                          +- *(3) BroadcastHashJoin [ss_sold_date_sk#31], [d_date_sk#22], Inner, BuildRight, false
   :              :     :           :                             :- *(3) Project [ss_sold_date_sk#31, ss_quantity#41, ss_sales_price#44, c_customer_sk#25]
   :              :     :           :                             :  +- *(3) BroadcastHashJoin [ss_customer_sk#34], [c_customer_sk#25], Inner, BuildRight, false
   :              :     :           :                             :     :- *(3) Filter (isnotnull(ss_customer_sk#34) AND isnotnull(ss_sold_date_sk#31))
   :              :     :           :                             :     :  +- *(3) ColumnarToRow
   :              :     :           :                             :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#31,ss_customer_sk#34,ss_quantity#41,ss_sales_price#44] Batched: true, DataFilters: [isnotnull(ss_customer_sk#34), isnotnull(ss_sold_date_sk#31)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
   :              :     :           :                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#176]
   :              :     :           :                             :        +- *(1) Filter isnotnull(c_customer_sk#25)
   :              :     :           :                             :           +- *(1) ColumnarToRow
   :              :     :           :                             :              +- FileScan parquet default.customer[c_customer_sk#25] Batched: true, DataFilters: [isnotnull(c_customer_sk#25)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
   :              :     :           :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#177]
   :              :     :           :                                +- *(2) Project [d_date_sk#22]
   :              :     :           :                                   +- *(2) Filter (d_year#19 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#22))
   :              :     :           :                                      +- *(2) ColumnarToRow
   :              :     :           :                                         +- FileScan parquet default.date_dim[d_date_sk#22,d_year#19] Batched: true, DataFilters: [d_year#19 IN (2000,2001,2002,2003), isnotnull(d_date_sk#22)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
   :              :     :           +- *(7) HashAggregate(keys=[c_customer_sk#25], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#25, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#94])
   :              :     :              +- Exchange hashpartitioning(c_customer_sk#25, 5), true, [id=#178]
   :              :     :                 +- *(6) HashAggregate(keys=[c_customer_sk#25], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#25, sum#179, isEmpty#180])
   :              :     :                    +- *(6) Project [ss_quantity#41, ss_sales_price#44, c_customer_sk#25]
   :              :     :                       +- *(6) BroadcastHashJoin [ss_customer_sk#34], [c_customer_sk#25], Inner, BuildRight, false
   :              :     :                          :- *(6) Filter isnotnull(ss_customer_sk#34)
   :              :     :                          :  +- *(6) ColumnarToRow
   :              :     :                          :     +- FileScan parquet default.store_sales[ss_customer_sk#34,ss_quantity#41,ss_sales_price#44] Batched: true, DataFilters: [isnotnull(ss_customer_sk#34)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
   :              :     :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#181]
   :              :     :                             +- *(5) Filter isnotnull(c_customer_sk#25)
   :              :     :                                +- *(5) ColumnarToRow
   :              :     :                                   +- FileScan parquet default.customer[c_customer_sk#25] Batched: true, DataFilters: [isnotnull(c_customer_sk#25)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
   :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#182]
   :              :        +- *(11) BroadcastHashJoin [c_customer_sk#25], [c_customer_sk#25#158], LeftSemi, BuildRight, false
   :              :           :- *(11) Filter isnotnull(c_customer_sk#25)
   :              :           :  +- *(11) ColumnarToRow
   :              :           :     +- FileScan parquet default.customer[c_customer_sk#25,c_first_name#16,c_last_name#15] Batched: true, DataFilters: [isnotnull(c_customer_sk#25)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>
   :              :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#183]
   :              :              +- *(10) Project [c_customer_sk#25 AS c_customer_sk#25#158]
   :              :                 +- *(10) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#94) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#94 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#7, [id=#170] as decimal(32,6)))), DecimalType(38,8), true)))
   :              :                    :  +- ReusedSubquery Subquery scalar-subquery#7, [id=#170]
   :              :                    +- *(10) HashAggregate(keys=[c_customer_sk#25], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#25, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#94])
   :              :                       +- ReusedExchange [c_customer_sk#25, sum#179, isEmpty#180], Exchange hashpartitioning(c_customer_sk#25, 5), true, [id=#178]
   :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#184]
   :                 +- *(12) Project [d_date_sk#22]
   :                    +- *(12) Filter ((((isnotnull(d_year#19) AND isnotnull(d_moy#20)) AND (d_year#19 = 2000)) AND (d_moy#20 = 2)) AND isnotnull(d_date_sk#22))
   :                       +- *(12) ColumnarToRow
   :                          +- FileScan parquet default.date_dim[d_date_sk#22,d_year#19,d_moy#20] Batched: true, DataFilters: [isnotnull(d_year#19), isnotnull(d_moy#20), (d_year#19 = 2000), (d_moy#20 = 2), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
   +- *(28) HashAggregate(keys=[c_last_name#15, c_first_name#16], functions=[sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#132 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#133 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_last_name#15, c_first_name#16, sales#131])
      +- Exchange hashpartitioning(c_last_name#15, c_first_name#16, 5), true, [id=#185]
         +- *(27) HashAggregate(keys=[c_last_name#15, c_first_name#16], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#132 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#133 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_last_name#15, c_first_name#16, sum#186, isEmpty#187])
            +- *(27) Project [ws_quantity#132, ws_list_price#133, c_first_name#16, c_last_name#15]
               +- *(27) BroadcastHashJoin [ws_sold_date_sk#134], [d_date_sk#22], Inner, BuildRight, false
                  :- *(27) Project [ws_sold_date_sk#134, ws_quantity#132, ws_list_price#133, c_first_name#16, c_last_name#15]
                  :  +- *(27) BroadcastHashJoin [ws_bill_customer_sk#136], [c_customer_sk#25], Inner, BuildRight, false
                  :     :- *(27) BroadcastHashJoin [ws_bill_customer_sk#136], [c_customer_sk#25], LeftSemi, BuildRight, false
                  :     :  :- *(27) Project [ws_sold_date_sk#134, ws_bill_customer_sk#136, ws_quantity#132, ws_list_price#133]
                  :     :  :  +- *(27) BroadcastHashJoin [ws_item_sk#135], [item_sk#2], LeftSemi, BuildRight, false
                  :     :  :     :- *(27) Filter (isnotnull(ws_bill_customer_sk#136) AND isnotnull(ws_sold_date_sk#134))
                  :     :  :     :  +- *(27) ColumnarToRow
                  :     :  :     :     +- FileScan parquet default.web_sales[ws_sold_date_sk#134,ws_item_sk#135,ws_bill_customer_sk#136,ws_quantity#132,ws_list_price#133] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#136), isnotnull(ws_sold_date_sk#134)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:d...
                  :     :  :     +- ReusedExchange [item_sk#2], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#163]
                  :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#188]
                  :     :     +- *(21) Project [c_customer_sk#25]
                  :     :        +- *(21) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#138) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#138 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#7, [id=#170] as decimal(32,6)))), DecimalType(38,8), true)))
                  :     :           :  +- ReusedSubquery Subquery scalar-subquery#7, [id=#170]
                  :     :           +- *(21) HashAggregate(keys=[c_customer_sk#25], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#25, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#138])
                  :     :              +- ReusedExchange [c_customer_sk#25, sum#189, isEmpty#190], Exchange hashpartitioning(c_customer_sk#25, 5), true, [id=#178]
                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#191]
                  :        +- *(25) BroadcastHashJoin [c_customer_sk#25], [c_customer_sk#25#159], LeftSemi, BuildRight, false
                  :           :- *(25) Filter isnotnull(c_customer_sk#25)
                  :           :  +- *(25) ColumnarToRow
                  :           :     +- FileScan parquet default.customer[c_customer_sk#25,c_first_name#16,c_last_name#15] Batched: true, DataFilters: [isnotnull(c_customer_sk#25)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>
                  :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#192]
                  :              +- *(24) Project [c_customer_sk#25 AS c_customer_sk#25#159]
                  :                 +- *(24) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#138) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#138 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#7, [id=#170] as decimal(32,6)))), DecimalType(38,8), true)))
                  :                    :  +- ReusedSubquery Subquery scalar-subquery#7, [id=#170]
                  :                    +- *(24) HashAggregate(keys=[c_customer_sk#25], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#25, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#41 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#44 as decimal(12,2)))), DecimalType(18,2), true))#138])
                  :                       +- ReusedExchange [c_customer_sk#25, sum#189, isEmpty#190], Exchange hashpartitioning(c_customer_sk#25, 5), true, [id=#178]
                  +- ReusedExchange [d_date_sk#22], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#184]
