== Parsed Logical Plan ==
CTE [customer_total_return]
:  +- 'SubqueryAlias customer_total_return
:     +- 'Aggregate ['sr_customer_sk, 'sr_store_sk], ['sr_customer_sk AS ctr_customer_sk#1, 'sr_store_sk AS ctr_store_sk#2, 'sum('sr_return_amt) AS ctr_total_return#3]
:        +- 'Filter (('sr_returned_date_sk = 'd_date_sk) AND ('d_year = 2000))
:           +- 'Join Inner
:              :- 'UnresolvedRelation [store_returns]
:              +- 'UnresolvedRelation [date_dim]
+- 'GlobalLimit 100
   +- 'LocalLimit 100
      +- 'Sort ['c_customer_id ASC NULLS FIRST], true
         +- 'Project ['c_customer_id]
            +- 'Filter ((('ctr1.ctr_total_return > scalar-subquery#4 []) AND ('s_store_sk = 'ctr1.ctr_store_sk)) AND (('s_state = TN) AND ('ctr1.ctr_customer_sk = 'c_customer_sk)))
               :  +- 'Project [unresolvedalias(('avg('ctr_total_return) * 1.2), None)]
               :     +- 'Filter ('ctr1.ctr_store_sk = 'ctr2.ctr_store_sk)
               :        +- 'SubqueryAlias ctr2
               :           +- 'UnresolvedRelation [customer_total_return]
               +- 'Join Inner
                  :- 'Join Inner
                  :  :- 'SubqueryAlias ctr1
                  :  :  +- 'UnresolvedRelation [customer_total_return]
                  :  +- 'UnresolvedRelation [store]
                  +- 'UnresolvedRelation [customer]

== Analyzed Logical Plan ==
c_customer_id: string
GlobalLimit 100
+- LocalLimit 100
   +- Sort [c_customer_id#5 ASC NULLS FIRST], true
      +- Project [c_customer_id#5]
         +- Filter (((cast(ctr_total_return#3 as decimal(24,7)) > cast(scalar-subquery#4 [ctr_store_sk#6] as decimal(24,7))) AND (cast(s_store_sk#7 as bigint) = ctr_store_sk#6)) AND ((s_state#8 = TN) AND (ctr_customer_sk#9 = cast(c_customer_sk#10 as bigint))))
            :  +- Aggregate [CheckOverflow((promote_precision(cast(avg(ctr_total_return#3) as decimal(21,6))) * promote_precision(cast(1.2 as decimal(21,6)))), DecimalType(24,7), true) AS (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#11]
            :     +- Filter (outer(ctr_store_sk#6) = ctr_store_sk#6)
            :        +- SubqueryAlias ctr2
            :           +- SubqueryAlias customer_total_return
            :              +- Aggregate [sr_customer_sk#12, sr_store_sk#13], [sr_customer_sk#12 AS ctr_customer_sk#9, sr_store_sk#13 AS ctr_store_sk#6, sum(sr_return_amt#14) AS ctr_total_return#3]
            :                 +- Filter ((sr_returned_date_sk#15 = cast(d_date_sk#16 as bigint)) AND (d_year#17 = 2000))
            :                    +- Join Inner
            :                       :- SubqueryAlias spark_catalog.default.store_returns
            :                       :  +- Relation[sr_returned_date_sk#15,sr_return_time_sk#18,sr_item_sk#19,sr_customer_sk#12,sr_cdemo_sk#20,sr_hdemo_sk#21,sr_addr_sk#22,sr_store_sk#13,sr_reason_sk#23,sr_ticket_number#24,sr_return_quantity#25,sr_return_amt#14,sr_return_tax#26,sr_return_amt_inc_tax#27,sr_fee#28,sr_return_ship_cost#29,sr_refunded_cash#30,sr_reversed_charge#31,sr_store_credit#32,sr_net_loss#33] parquet
            :                       +- SubqueryAlias spark_catalog.default.date_dim
            :                          +- Relation[d_date_sk#16,d_date_id#34,d_date#35,d_month_seq#36,d_week_seq#37,d_quarter_seq#38,d_year#17,d_dow#39,d_moy#40,d_dom#41,d_qoy#42,d_fy_year#43,d_fy_quarter_seq#44,d_fy_week_seq#45,d_day_name#46,d_quarter_name#47,d_holiday#48,d_weekend#49,d_following_holiday#50,d_first_dom#51,d_last_dom#52,d_same_day_ly#53,d_same_day_lq#54,d_current_day#55,... 4 more fields] parquet
            +- Join Inner
               :- Join Inner
               :  :- SubqueryAlias ctr1
               :  :  +- SubqueryAlias customer_total_return
               :  :     +- Aggregate [sr_customer_sk#12, sr_store_sk#13], [sr_customer_sk#12 AS ctr_customer_sk#9, sr_store_sk#13 AS ctr_store_sk#6, sum(sr_return_amt#14) AS ctr_total_return#3]
               :  :        +- Filter ((sr_returned_date_sk#15 = cast(d_date_sk#16 as bigint)) AND (d_year#17 = 2000))
               :  :           +- Join Inner
               :  :              :- SubqueryAlias spark_catalog.default.store_returns
               :  :              :  +- Relation[sr_returned_date_sk#15,sr_return_time_sk#18,sr_item_sk#19,sr_customer_sk#12,sr_cdemo_sk#20,sr_hdemo_sk#21,sr_addr_sk#22,sr_store_sk#13,sr_reason_sk#23,sr_ticket_number#24,sr_return_quantity#25,sr_return_amt#14,sr_return_tax#26,sr_return_amt_inc_tax#27,sr_fee#28,sr_return_ship_cost#29,sr_refunded_cash#30,sr_reversed_charge#31,sr_store_credit#32,sr_net_loss#33] parquet
               :  :              +- SubqueryAlias spark_catalog.default.date_dim
               :  :                 +- Relation[d_date_sk#16,d_date_id#34,d_date#35,d_month_seq#36,d_week_seq#37,d_quarter_seq#38,d_year#17,d_dow#39,d_moy#40,d_dom#41,d_qoy#42,d_fy_year#43,d_fy_quarter_seq#44,d_fy_week_seq#45,d_day_name#46,d_quarter_name#47,d_holiday#48,d_weekend#49,d_following_holiday#50,d_first_dom#51,d_last_dom#52,d_same_day_ly#53,d_same_day_lq#54,d_current_day#55,... 4 more fields] parquet
               :  +- SubqueryAlias spark_catalog.default.store
               :     +- Relation[s_store_sk#7,s_store_id#56,s_rec_start_date#57,s_rec_end_date#58,s_closed_date_sk#59,s_store_name#60,s_number_employees#61,s_floor_space#62,s_hours#63,s_manager#64,s_market_id#65,s_geography_class#66,s_market_desc#67,s_market_manager#68,s_division_id#69,s_division_name#70,s_company_id#71,s_company_name#72,s_street_number#73,s_street_name#74,s_street_type#75,s_suite_number#76,s_city#77,s_county#78,... 5 more fields] parquet
               +- SubqueryAlias spark_catalog.default.customer
                  +- Relation[c_customer_sk#10,c_customer_id#5,c_current_cdemo_sk#79,c_current_hdemo_sk#80,c_current_addr_sk#81,c_first_shipto_date_sk#82,c_first_sales_date_sk#83,c_salutation#84,c_first_name#85,c_last_name#86,c_preferred_cust_flag#87,c_birth_day#88,c_birth_month#89,c_birth_year#90,c_birth_country#91,c_login#92,c_email_address#93,c_last_review_date#94] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Sort [c_customer_id#5 ASC NULLS FIRST], true
      +- Project [c_customer_id#5]
         +- Join Inner, (ctr_customer_sk#9 = cast(c_customer_sk#10 as bigint))
            :- Project [ctr_customer_sk#9]
            :  +- Join Inner, (cast(s_store_sk#7 as bigint) = ctr_store_sk#6)
            :     :- Project [ctr_customer_sk#9, ctr_store_sk#6]
            :     :  +- Join Inner, ((cast(ctr_total_return#3 as decimal(24,7)) > (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#11) AND (ctr_store_sk#6 = ctr_store_sk#6#95))
            :     :     :- Filter isnotnull(ctr_total_return#3)
            :     :     :  +- Aggregate [sr_customer_sk#12, sr_store_sk#13], [sr_customer_sk#12 AS ctr_customer_sk#9, sr_store_sk#13 AS ctr_store_sk#6, MakeDecimal(sum(UnscaledValue(sr_return_amt#14)),17,2) AS ctr_total_return#3]
            :     :     :     +- Project [sr_customer_sk#12, sr_store_sk#13, sr_return_amt#14]
            :     :     :        +- Join Inner, (sr_returned_date_sk#15 = cast(d_date_sk#16 as bigint))
            :     :     :           :- Project [sr_returned_date_sk#15, sr_customer_sk#12, sr_store_sk#13, sr_return_amt#14]
            :     :     :           :  +- Filter ((isnotnull(sr_returned_date_sk#15) AND isnotnull(sr_store_sk#13)) AND isnotnull(sr_customer_sk#12))
            :     :     :           :     +- Relation[sr_returned_date_sk#15,sr_return_time_sk#18,sr_item_sk#19,sr_customer_sk#12,sr_cdemo_sk#20,sr_hdemo_sk#21,sr_addr_sk#22,sr_store_sk#13,sr_reason_sk#23,sr_ticket_number#24,sr_return_quantity#25,sr_return_amt#14,sr_return_tax#26,sr_return_amt_inc_tax#27,sr_fee#28,sr_return_ship_cost#29,sr_refunded_cash#30,sr_reversed_charge#31,sr_store_credit#32,sr_net_loss#33] parquet
            :     :     :           +- Project [d_date_sk#16]
            :     :     :              +- Filter ((isnotnull(d_year#17) AND (d_year#17 = 2000)) AND isnotnull(d_date_sk#16))
            :     :     :                 +- Relation[d_date_sk#16,d_date_id#34,d_date#35,d_month_seq#36,d_week_seq#37,d_quarter_seq#38,d_year#17,d_dow#39,d_moy#40,d_dom#41,d_qoy#42,d_fy_year#43,d_fy_quarter_seq#44,d_fy_week_seq#45,d_day_name#46,d_quarter_name#47,d_holiday#48,d_weekend#49,d_following_holiday#50,d_first_dom#51,d_last_dom#52,d_same_day_ly#53,d_same_day_lq#54,d_current_day#55,... 4 more fields] parquet
            :     :     +- Filter isnotnull((CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#11)
            :     :        +- Aggregate [ctr_store_sk#6], [CheckOverflow((promote_precision(avg(ctr_total_return#3)) * 1.200000), DecimalType(24,7), true) AS (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#11, ctr_store_sk#6 AS ctr_store_sk#6#95]
            :     :           +- Aggregate [sr_customer_sk#12, sr_store_sk#13], [sr_store_sk#13 AS ctr_store_sk#6, MakeDecimal(sum(UnscaledValue(sr_return_amt#14)),17,2) AS ctr_total_return#3]
            :     :              +- Project [sr_customer_sk#12, sr_store_sk#13, sr_return_amt#14]
            :     :                 +- Join Inner, (sr_returned_date_sk#15 = cast(d_date_sk#16 as bigint))
            :     :                    :- Project [sr_returned_date_sk#15, sr_customer_sk#12, sr_store_sk#13, sr_return_amt#14]
            :     :                    :  +- Filter (isnotnull(sr_returned_date_sk#15) AND isnotnull(sr_store_sk#13))
            :     :                    :     +- Relation[sr_returned_date_sk#15,sr_return_time_sk#18,sr_item_sk#19,sr_customer_sk#12,sr_cdemo_sk#20,sr_hdemo_sk#21,sr_addr_sk#22,sr_store_sk#13,sr_reason_sk#23,sr_ticket_number#24,sr_return_quantity#25,sr_return_amt#14,sr_return_tax#26,sr_return_amt_inc_tax#27,sr_fee#28,sr_return_ship_cost#29,sr_refunded_cash#30,sr_reversed_charge#31,sr_store_credit#32,sr_net_loss#33] parquet
            :     :                    +- Project [d_date_sk#16]
            :     :                       +- Filter ((isnotnull(d_year#17) AND (d_year#17 = 2000)) AND isnotnull(d_date_sk#16))
            :     :                          +- Relation[d_date_sk#16,d_date_id#34,d_date#35,d_month_seq#36,d_week_seq#37,d_quarter_seq#38,d_year#17,d_dow#39,d_moy#40,d_dom#41,d_qoy#42,d_fy_year#43,d_fy_quarter_seq#44,d_fy_week_seq#45,d_day_name#46,d_quarter_name#47,d_holiday#48,d_weekend#49,d_following_holiday#50,d_first_dom#51,d_last_dom#52,d_same_day_ly#53,d_same_day_lq#54,d_current_day#55,... 4 more fields] parquet
            :     +- Project [s_store_sk#7]
            :        +- Filter ((isnotnull(s_state#8) AND (s_state#8 = TN)) AND isnotnull(s_store_sk#7))
            :           +- Relation[s_store_sk#7,s_store_id#56,s_rec_start_date#57,s_rec_end_date#58,s_closed_date_sk#59,s_store_name#60,s_number_employees#61,s_floor_space#62,s_hours#63,s_manager#64,s_market_id#65,s_geography_class#66,s_market_desc#67,s_market_manager#68,s_division_id#69,s_division_name#70,s_company_id#71,s_company_name#72,s_street_number#73,s_street_name#74,s_street_type#75,s_suite_number#76,s_city#77,s_county#78,... 5 more fields] parquet
            +- Project [c_customer_sk#10, c_customer_id#5]
               +- Filter isnotnull(c_customer_sk#10)
                  +- Relation[c_customer_sk#10,c_customer_id#5,c_current_cdemo_sk#79,c_current_hdemo_sk#80,c_current_addr_sk#81,c_first_shipto_date_sk#82,c_first_sales_date_sk#83,c_salutation#84,c_first_name#85,c_last_name#86,c_preferred_cust_flag#87,c_birth_day#88,c_birth_month#89,c_birth_year#90,c_birth_country#91,c_login#92,c_email_address#93,c_last_review_date#94] parquet

== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#5 ASC NULLS FIRST], output=[c_customer_id#5])
+- *(12) Project [c_customer_id#5]
   +- *(12) SortMergeJoin [ctr_customer_sk#9], [cast(c_customer_sk#10 as bigint)], Inner
      :- *(9) Sort [ctr_customer_sk#9 ASC NULLS FIRST], false, 0
      :  +- Exchange hashpartitioning(ctr_customer_sk#9, 5), true, [id=#96]
      :     +- *(8) Project [ctr_customer_sk#9]
      :        +- *(8) BroadcastHashJoin [ctr_store_sk#6], [cast(s_store_sk#7 as bigint)], Inner, BuildRight, false
      :           :- *(8) Project [ctr_customer_sk#9, ctr_store_sk#6]
      :           :  +- *(8) BroadcastHashJoin [ctr_store_sk#6], [ctr_store_sk#6#95], Inner, BuildRight, (cast(ctr_total_return#3 as decimal(24,7)) > (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#11), false
      :           :     :- *(8) Filter isnotnull(ctr_total_return#3)
      :           :     :  +- *(8) HashAggregate(keys=[sr_customer_sk#12, sr_store_sk#13], functions=[sum(UnscaledValue(sr_return_amt#14))], output=[ctr_customer_sk#9, ctr_store_sk#6, ctr_total_return#3])
      :           :     :     +- Exchange hashpartitioning(sr_customer_sk#12, sr_store_sk#13, 5), true, [id=#97]
      :           :     :        +- *(2) HashAggregate(keys=[sr_customer_sk#12, sr_store_sk#13], functions=[partial_sum(UnscaledValue(sr_return_amt#14))], output=[sr_customer_sk#12, sr_store_sk#13, sum#98])
      :           :     :           +- *(2) Project [sr_customer_sk#12, sr_store_sk#13, sr_return_amt#14]
      :           :     :              +- *(2) BroadcastHashJoin [sr_returned_date_sk#15], [cast(d_date_sk#16 as bigint)], Inner, BuildRight, false
      :           :     :                 :- *(2) Filter ((isnotnull(sr_returned_date_sk#15) AND isnotnull(sr_store_sk#13)) AND isnotnull(sr_customer_sk#12))
      :           :     :                 :  +- *(2) ColumnarToRow
      :           :     :                 :     +- FileScan parquet default.store_returns[sr_returned_date_sk#15,sr_customer_sk#12,sr_store_sk#13,sr_return_amt#14] Batched: true, DataFilters: [isnotnull(sr_returned_date_sk#15), isnotnull(sr_store_sk#13), isnotnull(sr_customer_sk#99..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)], ReadSchema: struct<sr_returned_date_sk:bigint,sr_customer_sk:bigint,sr_store_sk:bigint,sr_return_amt:decimal(...
      :           :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#100]
      :           :     :                    +- *(1) Project [d_date_sk#16]
      :           :     :                       +- *(1) Filter ((isnotnull(d_year#17) AND (d_year#17 = 2000)) AND isnotnull(d_date_sk#16))
      :           :     :                          +- *(1) ColumnarToRow
      :           :     :                             +- FileScan parquet default.date_dim[d_date_sk#16,d_year#17] Batched: true, DataFilters: [isnotnull(d_year#17), (d_year#17 = 2000), isnotnull(d_date_sk#16)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :           :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [id=#101]
      :           :        +- *(6) Filter isnotnull((CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#11)
      :           :           +- *(6) HashAggregate(keys=[ctr_store_sk#6], functions=[avg(ctr_total_return#3)], output=[(CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#11, ctr_store_sk#6#95])
      :           :              +- Exchange hashpartitioning(ctr_store_sk#6, 5), true, [id=#102]
      :           :                 +- *(5) HashAggregate(keys=[ctr_store_sk#6], functions=[partial_avg(ctr_total_return#3)], output=[ctr_store_sk#6, sum#103, count#104])
      :           :                    +- *(5) HashAggregate(keys=[sr_customer_sk#12, sr_store_sk#13], functions=[sum(UnscaledValue(sr_return_amt#14))], output=[ctr_store_sk#6, ctr_total_return#3])
      :           :                       +- Exchange hashpartitioning(sr_customer_sk#12, sr_store_sk#13, 5), true, [id=#105]
      :           :                          +- *(4) HashAggregate(keys=[sr_customer_sk#12, sr_store_sk#13], functions=[partial_sum(UnscaledValue(sr_return_amt#14))], output=[sr_customer_sk#12, sr_store_sk#13, sum#106])
      :           :                             +- *(4) Project [sr_customer_sk#12, sr_store_sk#13, sr_return_amt#14]
      :           :                                +- *(4) BroadcastHashJoin [sr_returned_date_sk#15], [cast(d_date_sk#16 as bigint)], Inner, BuildRight, false
      :           :                                   :- *(4) Filter (isnotnull(sr_returned_date_sk#15) AND isnotnull(sr_store_sk#13))
      :           :                                   :  +- *(4) ColumnarToRow
      :           :                                   :     +- FileScan parquet default.store_returns[sr_returned_date_sk#15,sr_customer_sk#12,sr_store_sk#13,sr_return_amt#14] Batched: true, DataFilters: [isnotnull(sr_returned_date_sk#15), isnotnull(sr_store_sk#13)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk)], ReadSchema: struct<sr_returned_date_sk:bigint,sr_customer_sk:bigint,sr_store_sk:bigint,sr_return_amt:decimal(...
      :           :                                   +- ReusedExchange [d_date_sk#16], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#100]
      :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#107]
      :              +- *(7) Project [s_store_sk#7]
      :                 +- *(7) Filter ((isnotnull(s_state#8) AND (s_state#8 = TN)) AND isnotnull(s_store_sk#7))
      :                    +- *(7) ColumnarToRow
      :                       +- FileScan parquet default.store[s_store_sk#7,s_state#8] Batched: true, DataFilters: [isnotnull(s_state#8), (s_state#8 = TN), isnotnull(s_store_sk#7)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>
      +- *(11) Sort [cast(c_customer_sk#10 as bigint) ASC NULLS FIRST], false, 0
         +- Exchange hashpartitioning(cast(c_customer_sk#10 as bigint), 5), true, [id=#108]
            +- *(10) Filter isnotnull(c_customer_sk#10)
               +- *(10) ColumnarToRow
                  +- FileScan parquet default.customer[c_customer_sk#10,c_customer_id#5] Batched: true, DataFilters: [isnotnull(c_customer_sk#10)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string>
