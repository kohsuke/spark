== Parsed Logical Plan ==
'GlobalLimit 100
+- 'LocalLimit 100
   +- 'Sort ['count('ws_order_number) ASC NULLS FIRST], true
      +- 'Project ['count('ws_order_number) AS order count #1, 'sum('ws_ext_ship_cost) AS total shipping cost #2, 'sum('ws_net_profit) AS total net profit #3]
         +- 'Filter ((((('d_date >= 1999-02-01) AND ('d_date <= (cast(1999-02-01 as date) + 60 days))) AND ('ws1.ws_ship_date_sk = 'd_date_sk)) AND (('ws1.ws_ship_addr_sk = 'ca_address_sk) AND ('ca_state = IL))) AND ((('ws1.ws_web_site_sk = 'web_site_sk) AND ('web_company_name = pri)) AND (exists#4 [] AND NOT exists#5 [])))
            :  :- 'Project [*]
            :  :  +- 'Filter (('ws1.ws_order_number = 'ws2.ws_order_number) AND NOT ('ws1.ws_warehouse_sk = 'ws2.ws_warehouse_sk))
            :  :     +- 'SubqueryAlias ws2
            :  :        +- 'UnresolvedRelation [web_sales]
            :  +- 'Project [*]
            :     +- 'Filter ('ws1.ws_order_number = 'wr1.wr_order_number)
            :        +- 'SubqueryAlias wr1
            :           +- 'UnresolvedRelation [web_returns]
            +- 'Join Inner
               :- 'Join Inner
               :  :- 'Join Inner
               :  :  :- 'SubqueryAlias ws1
               :  :  :  +- 'UnresolvedRelation [web_sales]
               :  :  +- 'UnresolvedRelation [date_dim]
               :  +- 'UnresolvedRelation [customer_address]
               +- 'UnresolvedRelation [web_site]

== Analyzed Logical Plan ==
order count : bigint, total shipping cost : decimal(17,2), total net profit : decimal(17,2)
GlobalLimit 100
+- LocalLimit 100
   +- Project [order count #6, total shipping cost #2, total net profit #3]
      +- Sort [order count #6 ASC NULLS FIRST], true
         +- Aggregate [count(distinct ws_order_number#7) AS order count #6, sum(ws_ext_ship_cost#8) AS total shipping cost #2, sum(ws_net_profit#9) AS total net profit #3]
            +- Filter (((((d_date#10 >= cast(1999-02-01 as date)) AND (d_date#10 <= cast(1999-02-01 as date) + 60 days)) AND (ws_ship_date_sk#11 = d_date_sk#12)) AND ((ws_ship_addr_sk#13 = ca_address_sk#14) AND (ca_state#15 = IL))) AND (((ws_web_site_sk#16 = web_site_sk#17) AND (web_company_name#18 = pri)) AND (exists#4 [ws_order_number#7 && ws_warehouse_sk#19] AND NOT exists#5 [ws_order_number#7])))
               :  :- Project [ws_sold_date_sk#20, ws_sold_time_sk#21, ws_ship_date_sk#11, ws_item_sk#22, ws_bill_customer_sk#23, ws_bill_cdemo_sk#24, ws_bill_hdemo_sk#25, ws_bill_addr_sk#26, ws_ship_customer_sk#27, ws_ship_cdemo_sk#28, ws_ship_hdemo_sk#29, ws_ship_addr_sk#13, ws_web_page_sk#30, ws_web_site_sk#16, ws_ship_mode_sk#31, ws_warehouse_sk#19, ws_promo_sk#32, ws_order_number#7, ws_quantity#33, ws_wholesale_cost#34, ws_list_price#35, ws_sales_price#36, ws_ext_discount_amt#37, ws_ext_sales_price#38, ... 10 more fields]
               :  :  +- Filter ((outer(ws_order_number#7) = ws_order_number#7) AND NOT (outer(ws_warehouse_sk#19) = ws_warehouse_sk#19))
               :  :     +- SubqueryAlias ws2
               :  :        +- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.web_sales
               :  :           +- Relation[ws_sold_date_sk#20,ws_sold_time_sk#21,ws_ship_date_sk#11,ws_item_sk#22,ws_bill_customer_sk#23,ws_bill_cdemo_sk#24,ws_bill_hdemo_sk#25,ws_bill_addr_sk#26,ws_ship_customer_sk#27,ws_ship_cdemo_sk#28,ws_ship_hdemo_sk#29,ws_ship_addr_sk#13,ws_web_page_sk#30,ws_web_site_sk#16,ws_ship_mode_sk#31,ws_warehouse_sk#19,ws_promo_sk#32,ws_order_number#7,ws_quantity#33,ws_wholesale_cost#34,ws_list_price#35,ws_sales_price#36,ws_ext_discount_amt#37,ws_ext_sales_price#38,... 10 more fields] parquet
               :  +- Project [wr_returned_date_sk#39, wr_returned_time_sk#40, wr_item_sk#41, wr_refunded_customer_sk#42, wr_refunded_cdemo_sk#43, wr_refunded_hdemo_sk#44, wr_refunded_addr_sk#45, wr_returning_customer_sk#46, wr_returning_cdemo_sk#47, wr_returning_hdemo_sk#48, wr_returning_addr_sk#49, wr_web_page_sk#50, wr_reason_sk#51, wr_order_number#52, wr_return_quantity#53, wr_return_amt#54, wr_return_tax#55, wr_return_amt_inc_tax#56, wr_fee#57, wr_return_ship_cost#58, wr_refunded_cash#59, wr_reversed_charge#60, wr_account_credit#61, wr_net_loss#62]
               :     +- Filter (cast(outer(ws_order_number#7) as bigint) = wr_order_number#52)
               :        +- SubqueryAlias wr1
               :           +- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.web_returns
               :              +- Relation[wr_returned_date_sk#39,wr_returned_time_sk#40,wr_item_sk#41,wr_refunded_customer_sk#42,wr_refunded_cdemo_sk#43,wr_refunded_hdemo_sk#44,wr_refunded_addr_sk#45,wr_returning_customer_sk#46,wr_returning_cdemo_sk#47,wr_returning_hdemo_sk#48,wr_returning_addr_sk#49,wr_web_page_sk#50,wr_reason_sk#51,wr_order_number#52,wr_return_quantity#53,wr_return_amt#54,wr_return_tax#55,wr_return_amt_inc_tax#56,wr_fee#57,wr_return_ship_cost#58,wr_refunded_cash#59,wr_reversed_charge#60,wr_account_credit#61,wr_net_loss#62] parquet
               +- Join Inner
                  :- Join Inner
                  :  :- Join Inner
                  :  :  :- SubqueryAlias ws1
                  :  :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.web_sales
                  :  :  :     +- Relation[ws_sold_date_sk#20,ws_sold_time_sk#21,ws_ship_date_sk#11,ws_item_sk#22,ws_bill_customer_sk#23,ws_bill_cdemo_sk#24,ws_bill_hdemo_sk#25,ws_bill_addr_sk#26,ws_ship_customer_sk#27,ws_ship_cdemo_sk#28,ws_ship_hdemo_sk#29,ws_ship_addr_sk#13,ws_web_page_sk#30,ws_web_site_sk#16,ws_ship_mode_sk#31,ws_warehouse_sk#19,ws_promo_sk#32,ws_order_number#7,ws_quantity#33,ws_wholesale_cost#34,ws_list_price#35,ws_sales_price#36,ws_ext_discount_amt#37,ws_ext_sales_price#38,... 10 more fields] parquet
                  :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.date_dim
                  :  :     +- Relation[d_date_sk#12,d_date_id#63,d_date#10,d_month_seq#64,d_week_seq#65,d_quarter_seq#66,d_year#67,d_dow#68,d_moy#69,d_dom#70,d_qoy#71,d_fy_year#72,d_fy_quarter_seq#73,d_fy_week_seq#74,d_day_name#75,d_quarter_name#76,d_holiday#77,d_weekend#78,d_following_holiday#79,d_first_dom#80,d_last_dom#81,d_same_day_ly#82,d_same_day_lq#83,d_current_day#84,... 4 more fields] parquet
                  :  +- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.customer_address
                  :     +- Relation[ca_address_sk#14,ca_address_id#85,ca_street_number#86,ca_street_name#87,ca_street_type#88,ca_suite_number#89,ca_city#90,ca_county#91,ca_state#15,ca_zip#92,ca_country#93,ca_gmt_offset#94,ca_location_type#95] parquet
                  +- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.web_site
                     +- Relation[web_site_sk#17,web_site_id#96,web_rec_start_date#97,web_rec_end_date#98,web_name#99,web_open_date_sk#100,web_close_date_sk#101,web_class#102,web_manager#103,web_mkt_id#104,web_mkt_class#105,web_mkt_desc#106,web_market_manager#107,web_company_id#108,web_company_name#18,web_street_number#109,web_street_name#110,web_street_type#111,web_suite_number#112,web_city#113,web_county#114,web_state#115,web_zip#116,web_country#117,... 2 more fields] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Sort [order count #6 ASC NULLS FIRST], true
      +- Aggregate [count(distinct ws_order_number#7) AS order count #6, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#8)),17,2) AS total shipping cost #2, MakeDecimal(sum(UnscaledValue(ws_net_profit#9)),17,2) AS total net profit #3]
         +- Project [ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
            +- Join Inner, (ws_web_site_sk#16 = web_site_sk#17)
               :- Project [ws_web_site_sk#16, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
               :  +- Join Inner, (ws_ship_addr_sk#13 = ca_address_sk#14)
               :     :- Project [ws_ship_addr_sk#13, ws_web_site_sk#16, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
               :     :  +- Join Inner, (ws_ship_date_sk#11 = d_date_sk#12)
               :     :     :- Join LeftAnti, (cast(ws_order_number#7 as bigint) = wr_order_number#52)
               :     :     :  :- Project [ws_ship_date_sk#11, ws_ship_addr_sk#13, ws_web_site_sk#16, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
               :     :     :  :  +- Join LeftSemi, ((ws_order_number#7 = ws_order_number#7#118) AND NOT (ws_warehouse_sk#19 = ws_warehouse_sk#19#119))
               :     :     :  :     :- Project [ws_ship_date_sk#11, ws_ship_addr_sk#13, ws_web_site_sk#16, ws_warehouse_sk#19, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
               :     :     :  :     :  +- Filter ((isnotnull(ws_ship_date_sk#11) AND isnotnull(ws_ship_addr_sk#13)) AND isnotnull(ws_web_site_sk#16))
               :     :     :  :     :     +- Relation[ws_sold_date_sk#20,ws_sold_time_sk#21,ws_ship_date_sk#11,ws_item_sk#22,ws_bill_customer_sk#23,ws_bill_cdemo_sk#24,ws_bill_hdemo_sk#25,ws_bill_addr_sk#26,ws_ship_customer_sk#27,ws_ship_cdemo_sk#28,ws_ship_hdemo_sk#29,ws_ship_addr_sk#13,ws_web_page_sk#30,ws_web_site_sk#16,ws_ship_mode_sk#31,ws_warehouse_sk#19,ws_promo_sk#32,ws_order_number#7,ws_quantity#33,ws_wholesale_cost#34,ws_list_price#35,ws_sales_price#36,ws_ext_discount_amt#37,ws_ext_sales_price#38,... 10 more fields] parquet
               :     :     :  :     +- Project [ws_warehouse_sk#19 AS ws_warehouse_sk#19#119, ws_order_number#7 AS ws_order_number#7#118]
               :     :     :  :        +- Relation[ws_sold_date_sk#20,ws_sold_time_sk#21,ws_ship_date_sk#11,ws_item_sk#22,ws_bill_customer_sk#23,ws_bill_cdemo_sk#24,ws_bill_hdemo_sk#25,ws_bill_addr_sk#26,ws_ship_customer_sk#27,ws_ship_cdemo_sk#28,ws_ship_hdemo_sk#29,ws_ship_addr_sk#13,ws_web_page_sk#30,ws_web_site_sk#16,ws_ship_mode_sk#31,ws_warehouse_sk#19,ws_promo_sk#32,ws_order_number#7,ws_quantity#33,ws_wholesale_cost#34,ws_list_price#35,ws_sales_price#36,ws_ext_discount_amt#37,ws_ext_sales_price#38,... 10 more fields] parquet
               :     :     :  +- Project [wr_order_number#52]
               :     :     :     +- Relation[wr_returned_date_sk#39,wr_returned_time_sk#40,wr_item_sk#41,wr_refunded_customer_sk#42,wr_refunded_cdemo_sk#43,wr_refunded_hdemo_sk#44,wr_refunded_addr_sk#45,wr_returning_customer_sk#46,wr_returning_cdemo_sk#47,wr_returning_hdemo_sk#48,wr_returning_addr_sk#49,wr_web_page_sk#50,wr_reason_sk#51,wr_order_number#52,wr_return_quantity#53,wr_return_amt#54,wr_return_tax#55,wr_return_amt_inc_tax#56,wr_fee#57,wr_return_ship_cost#58,wr_refunded_cash#59,wr_reversed_charge#60,wr_account_credit#61,wr_net_loss#62] parquet
               :     :     +- Project [d_date_sk#12]
               :     :        +- Filter (((isnotnull(d_date#10) AND (d_date#10 >= 10623)) AND (d_date#10 <= 10683)) AND isnotnull(d_date_sk#12))
               :     :           +- Relation[d_date_sk#12,d_date_id#63,d_date#10,d_month_seq#64,d_week_seq#65,d_quarter_seq#66,d_year#67,d_dow#68,d_moy#69,d_dom#70,d_qoy#71,d_fy_year#72,d_fy_quarter_seq#73,d_fy_week_seq#74,d_day_name#75,d_quarter_name#76,d_holiday#77,d_weekend#78,d_following_holiday#79,d_first_dom#80,d_last_dom#81,d_same_day_ly#82,d_same_day_lq#83,d_current_day#84,... 4 more fields] parquet
               :     +- Project [ca_address_sk#14]
               :        +- Filter ((isnotnull(ca_state#15) AND (ca_state#15 = IL)) AND isnotnull(ca_address_sk#14))
               :           +- Relation[ca_address_sk#14,ca_address_id#85,ca_street_number#86,ca_street_name#87,ca_street_type#88,ca_suite_number#89,ca_city#90,ca_county#91,ca_state#15,ca_zip#92,ca_country#93,ca_gmt_offset#94,ca_location_type#95] parquet
               +- Project [web_site_sk#17]
                  +- Filter ((isnotnull(web_company_name#18) AND (web_company_name#18 = pri)) AND isnotnull(web_site_sk#17))
                     +- Relation[web_site_sk#17,web_site_id#96,web_rec_start_date#97,web_rec_end_date#98,web_name#99,web_open_date_sk#100,web_close_date_sk#101,web_class#102,web_manager#103,web_mkt_id#104,web_mkt_class#105,web_mkt_desc#106,web_market_manager#107,web_company_id#108,web_company_name#18,web_street_number#109,web_street_name#110,web_street_type#111,web_suite_number#112,web_city#113,web_county#114,web_state#115,web_zip#116,web_country#117,... 2 more fields] parquet

== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[order count #6 ASC NULLS FIRST], output=[order count #6,total shipping cost #2,total net profit #3])
+- *(8) HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_ship_cost#8)), sum(UnscaledValue(ws_net_profit#9)), count(distinct ws_order_number#7)], output=[order count #6, total shipping cost #2, total net profit #3])
   +- Exchange SinglePartition, true, [id=#120]
      +- *(7) HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#8)), merge_sum(UnscaledValue(ws_net_profit#9)), partial_count(distinct ws_order_number#7)], output=[sum#121, sum#122, count#123])
         +- *(7) HashAggregate(keys=[ws_order_number#7], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#8)), merge_sum(UnscaledValue(ws_net_profit#9))], output=[ws_order_number#7, sum#121, sum#122])
            +- Exchange hashpartitioning(ws_order_number#7, 5), true, [id=#124]
               +- *(6) HashAggregate(keys=[ws_order_number#7], functions=[partial_sum(UnscaledValue(ws_ext_ship_cost#8)), partial_sum(UnscaledValue(ws_net_profit#9))], output=[ws_order_number#7, sum#121, sum#122])
                  +- *(6) Project [ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
                     +- *(6) BroadcastHashJoin [ws_web_site_sk#16], [web_site_sk#17], Inner, BuildRight, false
                        :- *(6) Project [ws_web_site_sk#16, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
                        :  +- *(6) BroadcastHashJoin [ws_ship_addr_sk#13], [ca_address_sk#14], Inner, BuildRight, false
                        :     :- *(6) Project [ws_ship_addr_sk#13, ws_web_site_sk#16, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
                        :     :  +- *(6) BroadcastHashJoin [ws_ship_date_sk#11], [d_date_sk#12], Inner, BuildRight, false
                        :     :     :- *(6) BroadcastHashJoin [cast(ws_order_number#7 as bigint)], [wr_order_number#52], LeftAnti, BuildRight, false
                        :     :     :  :- *(6) Project [ws_ship_date_sk#11, ws_ship_addr_sk#13, ws_web_site_sk#16, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
                        :     :     :  :  +- *(6) BroadcastHashJoin [ws_order_number#7], [ws_order_number#7#118], LeftSemi, BuildRight, NOT (ws_warehouse_sk#19 = ws_warehouse_sk#19#119), false
                        :     :     :  :     :- *(6) Project [ws_ship_date_sk#11, ws_ship_addr_sk#13, ws_web_site_sk#16, ws_warehouse_sk#19, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
                        :     :     :  :     :  +- *(6) Filter ((isnotnull(ws_ship_date_sk#11) AND isnotnull(ws_ship_addr_sk#13)) AND isnotnull(ws_web_site_sk#16))
                        :     :     :  :     :     +- *(6) ColumnarToRow
                        :     :     :  :     :        +- FileScan parquet tpcds_sf1_parquet_stats.web_sales[ws_ship_date_sk#11,ws_ship_addr_sk#13,ws_web_site_sk#16,ws_warehouse_sk#19,ws_order_number#7,ws_ext_ship_cost#8,ws_net_profit#9] Batched: true, DataFilters: [isnotnull(ws_ship_date_sk#11), isnotnull(ws_ship_addr_sk#13), isnotnull(ws_web_site_sk#16)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_warehouse_sk:int,ws_order_nu...
                        :     :     :  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#125]
                        :     :     :  :        +- *(1) Project [ws_warehouse_sk#19 AS ws_warehouse_sk#19#119, ws_order_number#7 AS ws_order_number#7#118]
                        :     :     :  :           +- *(1) ColumnarToRow
                        :     :     :  :              +- FileScan parquet tpcds_sf1_parquet_stats.web_sales[ws_warehouse_sk#19,ws_order_number#7] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>
                        :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#126]
                        :     :     :     +- *(2) ColumnarToRow
                        :     :     :        +- FileScan parquet tpcds_sf1_parquet_stats.web_returns[wr_order_number#52] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<wr_order_number:bigint>
                        :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#127]
                        :     :        +- *(3) Project [d_date_sk#12]
                        :     :           +- *(3) Filter (((isnotnull(d_date#10) AND (d_date#10 >= 10623)) AND (d_date#10 <= 10683)) AND isnotnull(d_date_sk#12))
                        :     :              +- *(3) ColumnarToRow
                        :     :                 +- FileScan parquet tpcds_sf1_parquet_stats.date_dim[d_date_sk#12,d_date#10] Batched: true, DataFilters: [isnotnull(d_date#10), (d_date#10 >= 10623), (d_date#10 <= 10683), isnotnull(d_date_sk#12)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>
                        :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#128]
                        :        +- *(4) Project [ca_address_sk#14]
                        :           +- *(4) Filter ((isnotnull(ca_state#15) AND (ca_state#15 = IL)) AND isnotnull(ca_address_sk#14))
                        :              +- *(4) ColumnarToRow
                        :                 +- FileScan parquet tpcds_sf1_parquet_stats.customer_address[ca_address_sk#14,ca_state#15] Batched: true, DataFilters: [isnotnull(ca_state#15), (ca_state#15 = IL), isnotnull(ca_address_sk#14)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#129]
                           +- *(5) Project [web_site_sk#17]
                              +- *(5) Filter ((isnotnull(web_company_name#18) AND (web_company_name#18 = pri)) AND isnotnull(web_site_sk#17))
                                 +- *(5) ColumnarToRow
                                    +- FileScan parquet tpcds_sf1_parquet_stats.web_site[web_site_sk#17,web_company_name#18] Batched: true, DataFilters: [isnotnull(web_company_name#18), (web_company_name#18 = pri), isnotnull(web_site_sk#17)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>
