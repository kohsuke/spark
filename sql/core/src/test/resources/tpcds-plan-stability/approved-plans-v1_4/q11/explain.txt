== Physical Plan ==
TakeOrderedAndProject (73)
+- * Project (72)
   +- * BroadcastHashJoin Inner BuildRight (71)
      :- * Project (57)
      :  +- * BroadcastHashJoin Inner BuildRight (56)
      :     :- * Project (37)
      :     :  +- * BroadcastHashJoin Inner BuildRight (36)
      :     :     :- * Filter (19)
      :     :     :  +- * HashAggregate (18)
      :     :     :     +- Exchange (17)
      :     :     :        +- * HashAggregate (16)
      :     :     :           +- * Project (15)
      :     :     :              +- * BroadcastHashJoin Inner BuildRight (14)
      :     :     :                 :- * Project (9)
      :     :     :                 :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :     :                 :     :- * Filter (3)
      :     :     :                 :     :  +- * ColumnarToRow (2)
      :     :     :                 :     :     +- Scan parquet default.customer (1)
      :     :     :                 :     +- BroadcastExchange (7)
      :     :     :                 :        +- * Filter (6)
      :     :     :                 :           +- * ColumnarToRow (5)
      :     :     :                 :              +- Scan parquet default.store_sales (4)
      :     :     :                 +- BroadcastExchange (13)
      :     :     :                    +- * Filter (12)
      :     :     :                       +- * ColumnarToRow (11)
      :     :     :                          +- Scan parquet default.date_dim (10)
      :     :     +- BroadcastExchange (35)
      :     :        +- * HashAggregate (34)
      :     :           +- Exchange (33)
      :     :              +- * HashAggregate (32)
      :     :                 +- * Project (31)
      :     :                    +- * BroadcastHashJoin Inner BuildRight (30)
      :     :                       :- * Project (25)
      :     :                       :  +- * BroadcastHashJoin Inner BuildRight (24)
      :     :                       :     :- * Filter (22)
      :     :                       :     :  +- * ColumnarToRow (21)
      :     :                       :     :     +- Scan parquet default.customer (20)
      :     :                       :     +- ReusedExchange (23)
      :     :                       +- BroadcastExchange (29)
      :     :                          +- * Filter (28)
      :     :                             +- * ColumnarToRow (27)
      :     :                                +- Scan parquet default.date_dim (26)
      :     +- BroadcastExchange (55)
      :        +- * Project (54)
      :           +- * Filter (53)
      :              +- * HashAggregate (52)
      :                 +- Exchange (51)
      :                    +- * HashAggregate (50)
      :                       +- * Project (49)
      :                          +- * BroadcastHashJoin Inner BuildRight (48)
      :                             :- * Project (46)
      :                             :  +- * BroadcastHashJoin Inner BuildRight (45)
      :                             :     :- * Filter (40)
      :                             :     :  +- * ColumnarToRow (39)
      :                             :     :     +- Scan parquet default.customer (38)
      :                             :     +- BroadcastExchange (44)
      :                             :        +- * Filter (43)
      :                             :           +- * ColumnarToRow (42)
      :                             :              +- Scan parquet default.web_sales (41)
      :                             +- ReusedExchange (47)
      +- BroadcastExchange (70)
         +- * HashAggregate (69)
            +- Exchange (68)
               +- * HashAggregate (67)
                  +- * Project (66)
                     +- * BroadcastHashJoin Inner BuildRight (65)
                        :- * Project (63)
                        :  +- * BroadcastHashJoin Inner BuildRight (62)
                        :     :- * Filter (60)
                        :     :  +- * ColumnarToRow (59)
                        :     :     +- Scan parquet default.customer (58)
                        :     +- ReusedExchange (61)
                        +- ReusedExchange (64)


(1) Scan parquet default.customer
Output [8]: [c_customer_sk#x, c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(2) ColumnarToRow [codegen id : 3]
Input [8]: [c_customer_sk#x, c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x]

(3) Filter [codegen id : 3]
Input [8]: [c_customer_sk#x, c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x]
Condition : (isnotnull(c_customer_sk#x) AND isnotnull(c_customer_id#x))

(4) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#x, ss_customer_sk#x, ss_ext_discount_amt#x, ss_ext_list_price#x]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#x, ss_customer_sk#x, ss_ext_discount_amt#x, ss_ext_list_price#x]

(6) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#x, ss_customer_sk#x, ss_ext_discount_amt#x, ss_ext_list_price#x]
Condition : (isnotnull(ss_customer_sk#x) AND isnotnull(ss_sold_date_sk#x))

(7) BroadcastExchange
Input [4]: [ss_sold_date_sk#x, ss_customer_sk#x, ss_ext_discount_amt#x, ss_ext_list_price#x]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#x]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#x]
Right keys [1]: [ss_customer_sk#x]
Join condition: None

(9) Project [codegen id : 3]
Output [10]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ss_sold_date_sk#x, ss_ext_discount_amt#x, ss_ext_list_price#x]
Input [12]: [c_customer_sk#x, c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ss_sold_date_sk#x, ss_customer_sk#x, ss_ext_discount_amt#x, ss_ext_list_price#x]

(10) Scan parquet default.date_dim
Output [2]: [d_date_sk#x, d_year#x]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#x, d_year#x]

(12) Filter [codegen id : 2]
Input [2]: [d_date_sk#x, d_year#x]
Condition : ((isnotnull(d_year#x) AND (d_year#x = 2001)) AND isnotnull(d_date_sk#x))

(13) BroadcastExchange
Input [2]: [d_date_sk#x, d_year#x]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#x]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#x]
Right keys [1]: [d_date_sk#x]
Join condition: None

(15) Project [codegen id : 3]
Output [10]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ss_ext_discount_amt#x, ss_ext_list_price#x, d_year#x]
Input [12]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ss_sold_date_sk#x, ss_ext_discount_amt#x, ss_ext_list_price#x, d_date_sk#x, d_year#x]

(16) HashAggregate [codegen id : 3]
Input [10]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ss_ext_discount_amt#x, ss_ext_list_price#x, d_year#x]
Keys [8]: [c_customer_id#x, c_first_name#x, c_last_name#x, d_year#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#x as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#x as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#xL]
Results [9]: [c_customer_id#x, c_first_name#x, c_last_name#x, d_year#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, sum#xL]

(17) Exchange
Input [9]: [c_customer_id#x, c_first_name#x, c_last_name#x, d_year#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, sum#xL]
Arguments: hashpartitioning(c_customer_id#x, c_first_name#x, c_last_name#x, d_year#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, 5), true, [id=#x]

(18) HashAggregate [codegen id : 16]
Input [9]: [c_customer_id#x, c_first_name#x, c_last_name#x, d_year#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, sum#xL]
Keys [8]: [c_customer_id#x, c_first_name#x, c_last_name#x, d_year#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#x as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#x as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#x as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#x as decimal(8,2)))), DecimalType(8,2), true)))#xL]
Results [2]: [c_customer_id#x AS customer_id#x, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#x as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#x as decimal(8,2)))), DecimalType(8,2), true)))#xL,18,2) AS year_total#x]

(19) Filter [codegen id : 16]
Input [2]: [customer_id#x, year_total#x]
Condition : (isnotnull(year_total#x) AND (year_total#x > 0.00))

(20) Scan parquet default.customer
Output [8]: [c_customer_sk#x, c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(21) ColumnarToRow [codegen id : 6]
Input [8]: [c_customer_sk#x, c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x]

(22) Filter [codegen id : 6]
Input [8]: [c_customer_sk#x, c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x]
Condition : (isnotnull(c_customer_sk#x) AND isnotnull(c_customer_id#x))

(23) ReusedExchange [Reuses operator id: 7]
Output [4]: [ss_sold_date_sk#x, ss_customer_sk#x, ss_ext_discount_amt#x, ss_ext_list_price#x]

(24) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#x]
Right keys [1]: [ss_customer_sk#x]
Join condition: None

(25) Project [codegen id : 6]
Output [10]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ss_sold_date_sk#x, ss_ext_discount_amt#x, ss_ext_list_price#x]
Input [12]: [c_customer_sk#x, c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ss_sold_date_sk#x, ss_customer_sk#x, ss_ext_discount_amt#x, ss_ext_list_price#x]

(26) Scan parquet default.date_dim
Output [2]: [d_date_sk#x, d_year#x]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(27) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#x, d_year#x]

(28) Filter [codegen id : 5]
Input [2]: [d_date_sk#x, d_year#x]
Condition : ((isnotnull(d_year#x) AND (d_year#x = 2002)) AND isnotnull(d_date_sk#x))

(29) BroadcastExchange
Input [2]: [d_date_sk#x, d_year#x]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#x]

(30) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#x]
Right keys [1]: [d_date_sk#x]
Join condition: None

(31) Project [codegen id : 6]
Output [10]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ss_ext_discount_amt#x, ss_ext_list_price#x, d_year#x]
Input [12]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ss_sold_date_sk#x, ss_ext_discount_amt#x, ss_ext_list_price#x, d_date_sk#x, d_year#x]

(32) HashAggregate [codegen id : 6]
Input [10]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ss_ext_discount_amt#x, ss_ext_list_price#x, d_year#x]
Keys [8]: [c_customer_id#x, c_first_name#x, c_last_name#x, d_year#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#x as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#x as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#xL]
Results [9]: [c_customer_id#x, c_first_name#x, c_last_name#x, d_year#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, sum#xL]

(33) Exchange
Input [9]: [c_customer_id#x, c_first_name#x, c_last_name#x, d_year#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, sum#xL]
Arguments: hashpartitioning(c_customer_id#x, c_first_name#x, c_last_name#x, d_year#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, 5), true, [id=#x]

(34) HashAggregate [codegen id : 7]
Input [9]: [c_customer_id#x, c_first_name#x, c_last_name#x, d_year#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, sum#xL]
Keys [8]: [c_customer_id#x, c_first_name#x, c_last_name#x, d_year#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#x as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#x as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#x as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#x as decimal(8,2)))), DecimalType(8,2), true)))#xL]
Results [3]: [c_customer_id#x AS customer_id#x, c_preferred_cust_flag#x AS customer_preferred_cust_flag#x, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#x as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#x as decimal(8,2)))), DecimalType(8,2), true)))#xL,18,2) AS year_total#x]

(35) BroadcastExchange
Input [3]: [customer_id#x, customer_preferred_cust_flag#x, year_total#x]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#x]

(36) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#x]
Right keys [1]: [customer_id#x]
Join condition: None

(37) Project [codegen id : 16]
Output [4]: [customer_id#x, year_total#x, customer_preferred_cust_flag#x, year_total#x]
Input [5]: [customer_id#x, year_total#x, customer_id#x, customer_preferred_cust_flag#x, year_total#x]

(38) Scan parquet default.customer
Output [8]: [c_customer_sk#x, c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(39) ColumnarToRow [codegen id : 10]
Input [8]: [c_customer_sk#x, c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x]

(40) Filter [codegen id : 10]
Input [8]: [c_customer_sk#x, c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x]
Condition : (isnotnull(c_customer_sk#x) AND isnotnull(c_customer_id#x))

(41) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#x, ws_bill_customer_sk#x, ws_ext_discount_amt#x, ws_ext_list_price#x]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(42) ColumnarToRow [codegen id : 8]
Input [4]: [ws_sold_date_sk#x, ws_bill_customer_sk#x, ws_ext_discount_amt#x, ws_ext_list_price#x]

(43) Filter [codegen id : 8]
Input [4]: [ws_sold_date_sk#x, ws_bill_customer_sk#x, ws_ext_discount_amt#x, ws_ext_list_price#x]
Condition : (isnotnull(ws_bill_customer_sk#x) AND isnotnull(ws_sold_date_sk#x))

(44) BroadcastExchange
Input [4]: [ws_sold_date_sk#x, ws_bill_customer_sk#x, ws_ext_discount_amt#x, ws_ext_list_price#x]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#x]

(45) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#x]
Right keys [1]: [ws_bill_customer_sk#x]
Join condition: None

(46) Project [codegen id : 10]
Output [10]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ws_sold_date_sk#x, ws_ext_discount_amt#x, ws_ext_list_price#x]
Input [12]: [c_customer_sk#x, c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ws_sold_date_sk#x, ws_bill_customer_sk#x, ws_ext_discount_amt#x, ws_ext_list_price#x]

(47) ReusedExchange [Reuses operator id: 13]
Output [2]: [d_date_sk#x, d_year#x]

(48) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#x]
Right keys [1]: [d_date_sk#x]
Join condition: None

(49) Project [codegen id : 10]
Output [10]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ws_ext_discount_amt#x, ws_ext_list_price#x, d_year#x]
Input [12]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ws_sold_date_sk#x, ws_ext_discount_amt#x, ws_ext_list_price#x, d_date_sk#x, d_year#x]

(50) HashAggregate [codegen id : 10]
Input [10]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ws_ext_discount_amt#x, ws_ext_list_price#x, d_year#x]
Keys [8]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, d_year#x]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#x as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#x as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#xL]
Results [9]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, d_year#x, sum#xL]

(51) Exchange
Input [9]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, d_year#x, sum#xL]
Arguments: hashpartitioning(c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, d_year#x, 5), true, [id=#x]

(52) HashAggregate [codegen id : 11]
Input [9]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, d_year#x, sum#xL]
Keys [8]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, d_year#x]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#x as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#x as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#x as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#x as decimal(8,2)))), DecimalType(8,2), true)))#xL]
Results [2]: [c_customer_id#x AS customer_id#x, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#x as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#x as decimal(8,2)))), DecimalType(8,2), true)))#xL,18,2) AS year_total#x]

(53) Filter [codegen id : 11]
Input [2]: [customer_id#x, year_total#x]
Condition : (isnotnull(year_total#x) AND (year_total#x > 0.00))

(54) Project [codegen id : 11]
Output [2]: [customer_id#x AS customer_id#x, year_total#x AS year_total#x]
Input [2]: [customer_id#x, year_total#x]

(55) BroadcastExchange
Input [2]: [customer_id#x, year_total#x]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#x]

(56) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#x]
Right keys [1]: [customer_id#x]
Join condition: None

(57) Project [codegen id : 16]
Output [5]: [customer_id#x, year_total#x, customer_preferred_cust_flag#x, year_total#x, year_total#x]
Input [6]: [customer_id#x, year_total#x, customer_preferred_cust_flag#x, year_total#x, customer_id#x, year_total#x]

(58) Scan parquet default.customer
Output [8]: [c_customer_sk#x, c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(59) ColumnarToRow [codegen id : 14]
Input [8]: [c_customer_sk#x, c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x]

(60) Filter [codegen id : 14]
Input [8]: [c_customer_sk#x, c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x]
Condition : (isnotnull(c_customer_sk#x) AND isnotnull(c_customer_id#x))

(61) ReusedExchange [Reuses operator id: 44]
Output [4]: [ws_sold_date_sk#x, ws_bill_customer_sk#x, ws_ext_discount_amt#x, ws_ext_list_price#x]

(62) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#x]
Right keys [1]: [ws_bill_customer_sk#x]
Join condition: None

(63) Project [codegen id : 14]
Output [10]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ws_sold_date_sk#x, ws_ext_discount_amt#x, ws_ext_list_price#x]
Input [12]: [c_customer_sk#x, c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ws_sold_date_sk#x, ws_bill_customer_sk#x, ws_ext_discount_amt#x, ws_ext_list_price#x]

(64) ReusedExchange [Reuses operator id: 29]
Output [2]: [d_date_sk#x, d_year#x]

(65) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#x]
Right keys [1]: [d_date_sk#x]
Join condition: None

(66) Project [codegen id : 14]
Output [10]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ws_ext_discount_amt#x, ws_ext_list_price#x, d_year#x]
Input [12]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ws_sold_date_sk#x, ws_ext_discount_amt#x, ws_ext_list_price#x, d_date_sk#x, d_year#x]

(67) HashAggregate [codegen id : 14]
Input [10]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, ws_ext_discount_amt#x, ws_ext_list_price#x, d_year#x]
Keys [8]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, d_year#x]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#x as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#x as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#xL]
Results [9]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, d_year#x, sum#xL]

(68) Exchange
Input [9]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, d_year#x, sum#xL]
Arguments: hashpartitioning(c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, d_year#x, 5), true, [id=#x]

(69) HashAggregate [codegen id : 15]
Input [9]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, d_year#x, sum#xL]
Keys [8]: [c_customer_id#x, c_first_name#x, c_last_name#x, c_preferred_cust_flag#x, c_birth_country#x, c_login#x, c_email_address#x, d_year#x]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#x as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#x as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#x as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#x as decimal(8,2)))), DecimalType(8,2), true)))#xL]
Results [2]: [c_customer_id#x AS customer_id#x, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#x as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#x as decimal(8,2)))), DecimalType(8,2), true)))#xL,18,2) AS year_total#x]

(70) BroadcastExchange
Input [2]: [customer_id#x, year_total#x]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#x]

(71) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#x]
Right keys [1]: [customer_id#x]
Join condition: (CASE WHEN (year_total#x > 0.00) THEN CheckOverflow((promote_precision(year_total#x) / promote_precision(year_total#x)), DecimalType(38,20), true) ELSE null END > CASE WHEN (year_total#x > 0.00) THEN CheckOverflow((promote_precision(year_total#x) / promote_precision(year_total#x)), DecimalType(38,20), true) ELSE null END)

(72) Project [codegen id : 16]
Output [1]: [customer_preferred_cust_flag#x]
Input [7]: [customer_id#x, year_total#x, customer_preferred_cust_flag#x, year_total#x, year_total#x, customer_id#x, year_total#x]

(73) TakeOrderedAndProject
Input [1]: [customer_preferred_cust_flag#x]
Arguments: 100, [customer_preferred_cust_flag#x ASC NULLS FIRST], [customer_preferred_cust_flag#x]

