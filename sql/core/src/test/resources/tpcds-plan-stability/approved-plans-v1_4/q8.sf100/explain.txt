== Parsed Logical Plan ==
'GlobalLimit 100
+- 'LocalLimit 100
   +- 'Sort ['s_store_name ASC NULLS FIRST], true
      +- 'Aggregate ['s_store_name], ['s_store_name, unresolvedalias('sum('ss_net_profit), None)]
         +- 'Filter (((('ss_store_sk = 's_store_sk) AND ('ss_sold_date_sk = 'd_date_sk)) AND ('d_qoy = 2)) AND (('d_year = 1998) AND ('substr('s_zip, 1, 2) = 'substr('V1.ca_zip, 1, 2))))
            +- 'Join Inner
               :- 'Join Inner
               :  :- 'Join Inner
               :  :  :- 'UnresolvedRelation [store_sales]
               :  :  +- 'UnresolvedRelation [date_dim]
               :  +- 'UnresolvedRelation [store]
               +- 'SubqueryAlias V1
                  +- 'Project ['ca_zip]
                     +- 'SubqueryAlias A2
                        +- 'Intersect false
                           :- 'Project ['substr('ca_zip, 1, 5) AS ca_zip#1]
                           :  +- 'Filter 'substr('ca_zip, 1, 5) IN (24128,76232,65084,87816,83926,77556,20548,26231,43848,15126,91137,61265,98294,25782,17920,18426,98235,40081,84093,28577,55565,17183,54601,67897,22752,86284,18376,38607,45200,21756,29741,96765,23932,89360,29839,25989,28898,91068,72550,10390,18845,47770,82636,41367,76638,86198,81312,37126,39192,88424,72175,81426,53672,10445,42666,66864,66708,41248,48583,82276,18842,78890,49448,14089,38122,34425,79077,19849,43285,39861,66162,77610,13695,99543,83444,83041,12305,57665,68341,25003,57834,62878,49130,81096,18840,27700,23470,50412,21195,16021,76107,71954,68309,18119,98359,64544,10336,86379,27068,39736,98569,28915,24206,56529,57647,54917,42961,91110,63981,14922,36420,23006,67467,32754,30903,20260,31671,51798,72325,85816,68621,13955,36446,41766,68806,16725,15146,22744,35850,88086,51649,18270,52867,39972,96976,63792,11376,94898,13595,10516,90225,58943,39371,94945,28587,96576,57855,28488,26105,83933,25858,34322,44438,73171,30122,34102,22685,71256,78451,54364,13354,45375,40558,56458,28286,45266,47305,69399,83921,26233,11101,15371,69913,35942,15882,25631,24610,44165,99076,33786,70738,26653,14328,72305,62496,22152,10144,64147,48425,14663,21076,18799,30450,63089,81019,68893,24996,51200,51211,45692,92712,70466,79994,22437,25280,38935,71791,73134,56571,14060,19505,72425,56575,74351,68786,51650,20004,18383,76614,11634,18906,15765,41368,73241,76698,78567,97189,28545,76231,75691,22246,51061,90578,56691,68014,51103,94167,57047,14867,73520,15734,63435,25733,35474,24676,94627,53535,17879,15559,53268,59166,11928,59402,33282,45721,43933,68101,33515,36634,71286,19736,58058,55253,67473,41918,19515,36495,19430,22351,77191,91393,49156,50298,87501,18652,53179,18767,63193,23968,65164,68880,21286,72823,58470,67301,13394,31016,70372,67030,40604,24317,45748,39127,26065,77721,31029,31880,60576,24671,45549,13376,50016,33123,19769,22927,97789,46081,72151,15723,46136,51949,68100,96888,64528,14171,79777,28709,11489,25103,32213,78668,22245,15798,27156,37930,62971,21337,51622,67853,10567,38415,15455,58263,42029,60279,37125,56240,88190,50308,26859,64457,89091,82136,62377,36233,63837,58078,17043,30010,60099,28810,98025,29178,87343,73273,30469,64034,39516,86057,21309,90257,67875,40162,11356,73650,61810,72013,30431,22461,19512,13375,55307,30625,83849,68908,26689,96451,38193,46820,88885,84935,69035,83144,47537,56616,94983,48033,69952,25486,61547,27385,61860,58048,56910,16807,17871,35258,31387,35458,35576)
                           :     +- 'UnresolvedRelation [customer_address]
                           +- 'Project ['ca_zip]
                              +- 'SubqueryAlias A1
                                 +- 'UnresolvedHaving ('count(1) > 10)
                                    +- 'Aggregate ['ca_zip], ['substr('ca_zip, 1, 5) AS ca_zip#2, 'count(1) AS cnt#3]
                                       +- 'Filter (('ca_address_sk = 'c_current_addr_sk) AND ('c_preferred_cust_flag = Y))
                                          +- 'Join Inner
                                             :- 'UnresolvedRelation [customer_address]
                                             +- 'UnresolvedRelation [customer]

== Analyzed Logical Plan ==
s_store_name: string, sum(ss_net_profit): decimal(17,2)
GlobalLimit 100
+- LocalLimit 100
   +- Project [s_store_name#4, sum(ss_net_profit)#5]
      +- Sort [s_store_name#4 ASC NULLS FIRST], true
         +- Aggregate [s_store_name#4], [s_store_name#4, sum(ss_net_profit#6) AS sum(ss_net_profit)#5]
            +- Filter ((((ss_store_sk#7 = s_store_sk#8) AND (ss_sold_date_sk#9 = d_date_sk#10)) AND (d_qoy#11 = 2)) AND ((d_year#12 = 1998) AND (substr(s_zip#13, 1, 2) = substr(ca_zip#1, 1, 2))))
               +- Join Inner
                  :- Join Inner
                  :  :- Join Inner
                  :  :  :- SubqueryAlias spark_catalog.default.store_sales
                  :  :  :  +- Relation[ss_sold_date_sk#9,ss_sold_time_sk#14,ss_item_sk#15,ss_customer_sk#16,ss_cdemo_sk#17,ss_hdemo_sk#18,ss_addr_sk#19,ss_store_sk#7,ss_promo_sk#20,ss_ticket_number#21,ss_quantity#22,ss_wholesale_cost#23,ss_list_price#24,ss_sales_price#25,ss_ext_discount_amt#26,ss_ext_sales_price#27,ss_ext_wholesale_cost#28,ss_ext_list_price#29,ss_ext_tax#30,ss_coupon_amt#31,ss_net_paid#32,ss_net_paid_inc_tax#33,ss_net_profit#6] parquet
                  :  :  +- SubqueryAlias spark_catalog.default.date_dim
                  :  :     +- Relation[d_date_sk#10,d_date_id#34,d_date#35,d_month_seq#36,d_week_seq#37,d_quarter_seq#38,d_year#12,d_dow#39,d_moy#40,d_dom#41,d_qoy#11,d_fy_year#42,d_fy_quarter_seq#43,d_fy_week_seq#44,d_day_name#45,d_quarter_name#46,d_holiday#47,d_weekend#48,d_following_holiday#49,d_first_dom#50,d_last_dom#51,d_same_day_ly#52,d_same_day_lq#53,d_current_day#54,... 4 more fields] parquet
                  :  +- SubqueryAlias spark_catalog.default.store
                  :     +- Relation[s_store_sk#8,s_store_id#55,s_rec_start_date#56,s_rec_end_date#57,s_closed_date_sk#58,s_store_name#4,s_number_employees#59,s_floor_space#60,s_hours#61,s_manager#62,s_market_id#63,s_geography_class#64,s_market_desc#65,s_market_manager#66,s_division_id#67,s_division_name#68,s_company_id#69,s_company_name#70,s_street_number#71,s_street_name#72,s_street_type#73,s_suite_number#74,s_city#75,s_county#76,... 5 more fields] parquet
                  +- SubqueryAlias V1
                     +- Project [ca_zip#1]
                        +- SubqueryAlias A2
                           +- Intersect false
                              :- Project [substr(ca_zip#77, 1, 5) AS ca_zip#1]
                              :  +- Filter substr(ca_zip#77, 1, 5) IN (24128,76232,65084,87816,83926,77556,20548,26231,43848,15126,91137,61265,98294,25782,17920,18426,98235,40081,84093,28577,55565,17183,54601,67897,22752,86284,18376,38607,45200,21756,29741,96765,23932,89360,29839,25989,28898,91068,72550,10390,18845,47770,82636,41367,76638,86198,81312,37126,39192,88424,72175,81426,53672,10445,42666,66864,66708,41248,48583,82276,18842,78890,49448,14089,38122,34425,79077,19849,43285,39861,66162,77610,13695,99543,83444,83041,12305,57665,68341,25003,57834,62878,49130,81096,18840,27700,23470,50412,21195,16021,76107,71954,68309,18119,98359,64544,10336,86379,27068,39736,98569,28915,24206,56529,57647,54917,42961,91110,63981,14922,36420,23006,67467,32754,30903,20260,31671,51798,72325,85816,68621,13955,36446,41766,68806,16725,15146,22744,35850,88086,51649,18270,52867,39972,96976,63792,11376,94898,13595,10516,90225,58943,39371,94945,28587,96576,57855,28488,26105,83933,25858,34322,44438,73171,30122,34102,22685,71256,78451,54364,13354,45375,40558,56458,28286,45266,47305,69399,83921,26233,11101,15371,69913,35942,15882,25631,24610,44165,99076,33786,70738,26653,14328,72305,62496,22152,10144,64147,48425,14663,21076,18799,30450,63089,81019,68893,24996,51200,51211,45692,92712,70466,79994,22437,25280,38935,71791,73134,56571,14060,19505,72425,56575,74351,68786,51650,20004,18383,76614,11634,18906,15765,41368,73241,76698,78567,97189,28545,76231,75691,22246,51061,90578,56691,68014,51103,94167,57047,14867,73520,15734,63435,25733,35474,24676,94627,53535,17879,15559,53268,59166,11928,59402,33282,45721,43933,68101,33515,36634,71286,19736,58058,55253,67473,41918,19515,36495,19430,22351,77191,91393,49156,50298,87501,18652,53179,18767,63193,23968,65164,68880,21286,72823,58470,67301,13394,31016,70372,67030,40604,24317,45748,39127,26065,77721,31029,31880,60576,24671,45549,13376,50016,33123,19769,22927,97789,46081,72151,15723,46136,51949,68100,96888,64528,14171,79777,28709,11489,25103,32213,78668,22245,15798,27156,37930,62971,21337,51622,67853,10567,38415,15455,58263,42029,60279,37125,56240,88190,50308,26859,64457,89091,82136,62377,36233,63837,58078,17043,30010,60099,28810,98025,29178,87343,73273,30469,64034,39516,86057,21309,90257,67875,40162,11356,73650,61810,72013,30431,22461,19512,13375,55307,30625,83849,68908,26689,96451,38193,46820,88885,84935,69035,83144,47537,56616,94983,48033,69952,25486,61547,27385,61860,58048,56910,16807,17871,35258,31387,35458,35576)
                              :     +- SubqueryAlias spark_catalog.default.customer_address
                              :        +- Relation[ca_address_sk#78,ca_address_id#79,ca_street_number#80,ca_street_name#81,ca_street_type#82,ca_suite_number#83,ca_city#84,ca_county#85,ca_state#86,ca_zip#77,ca_country#87,ca_gmt_offset#88,ca_location_type#89] parquet
                              +- Project [ca_zip#2]
                                 +- SubqueryAlias A1
                                    +- Project [ca_zip#2, cnt#90]
                                       +- Filter (count(1)#91 > cast(10 as bigint))
                                          +- Aggregate [ca_zip#77], [substr(ca_zip#77, 1, 5) AS ca_zip#2, count(1) AS cnt#90, count(1) AS count(1)#91]
                                             +- Filter ((ca_address_sk#78 = c_current_addr_sk#92) AND (c_preferred_cust_flag#93 = Y))
                                                +- Join Inner
                                                   :- SubqueryAlias spark_catalog.default.customer_address
                                                   :  +- Relation[ca_address_sk#78,ca_address_id#79,ca_street_number#80,ca_street_name#81,ca_street_type#82,ca_suite_number#83,ca_city#84,ca_county#85,ca_state#86,ca_zip#77,ca_country#87,ca_gmt_offset#88,ca_location_type#89] parquet
                                                   +- SubqueryAlias spark_catalog.default.customer
                                                      +- Relation[c_customer_sk#94,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#92,c_first_shipto_date_sk#98,c_first_sales_date_sk#99,c_salutation#100,c_first_name#101,c_last_name#102,c_preferred_cust_flag#93,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Sort [s_store_name#4 ASC NULLS FIRST], true
      +- Aggregate [s_store_name#4], [s_store_name#4, MakeDecimal(sum(UnscaledValue(ss_net_profit#6)),17,2) AS sum(ss_net_profit)#5]
         +- Project [ss_net_profit#6, s_store_name#4]
            +- Join Inner, (substr(s_zip#13, 1, 2) = substr(ca_zip#1, 1, 2))
               :- Project [ss_net_profit#6, s_store_name#4, s_zip#13]
               :  +- Join Inner, (ss_store_sk#7 = s_store_sk#8)
               :     :- Project [ss_store_sk#7, ss_net_profit#6]
               :     :  +- Join Inner, (ss_sold_date_sk#9 = d_date_sk#10)
               :     :     :- Project [ss_sold_date_sk#9, ss_store_sk#7, ss_net_profit#6]
               :     :     :  +- Filter (isnotnull(ss_sold_date_sk#9) AND isnotnull(ss_store_sk#7))
               :     :     :     +- Relation[ss_sold_date_sk#9,ss_sold_time_sk#14,ss_item_sk#15,ss_customer_sk#16,ss_cdemo_sk#17,ss_hdemo_sk#18,ss_addr_sk#19,ss_store_sk#7,ss_promo_sk#20,ss_ticket_number#21,ss_quantity#22,ss_wholesale_cost#23,ss_list_price#24,ss_sales_price#25,ss_ext_discount_amt#26,ss_ext_sales_price#27,ss_ext_wholesale_cost#28,ss_ext_list_price#29,ss_ext_tax#30,ss_coupon_amt#31,ss_net_paid#32,ss_net_paid_inc_tax#33,ss_net_profit#6] parquet
               :     :     +- Project [d_date_sk#10]
               :     :        +- Filter ((((isnotnull(d_qoy#11) AND isnotnull(d_year#12)) AND (d_qoy#11 = 2)) AND (d_year#12 = 1998)) AND isnotnull(d_date_sk#10))
               :     :           +- Relation[d_date_sk#10,d_date_id#34,d_date#35,d_month_seq#36,d_week_seq#37,d_quarter_seq#38,d_year#12,d_dow#39,d_moy#40,d_dom#41,d_qoy#11,d_fy_year#42,d_fy_quarter_seq#43,d_fy_week_seq#44,d_day_name#45,d_quarter_name#46,d_holiday#47,d_weekend#48,d_following_holiday#49,d_first_dom#50,d_last_dom#51,d_same_day_ly#52,d_same_day_lq#53,d_current_day#54,... 4 more fields] parquet
               :     +- Project [s_store_sk#8, s_store_name#4, s_zip#13]
               :        +- Filter (isnotnull(s_store_sk#8) AND isnotnull(s_zip#13))
               :           +- Relation[s_store_sk#8,s_store_id#55,s_rec_start_date#56,s_rec_end_date#57,s_closed_date_sk#58,s_store_name#4,s_number_employees#59,s_floor_space#60,s_hours#61,s_manager#62,s_market_id#63,s_geography_class#64,s_market_desc#65,s_market_manager#66,s_division_id#67,s_division_name#68,s_company_id#69,s_company_name#70,s_street_number#71,s_street_name#72,s_street_type#73,s_suite_number#74,s_city#75,s_county#76,... 5 more fields] parquet
               +- Aggregate [ca_zip#1], [ca_zip#1]
                  +- Project [substr(ca_zip#77, 1, 5) AS ca_zip#1]
                     +- Join LeftSemi, (substr(ca_zip#77, 1, 5) <=> ca_zip#2)
                        :- Project [ca_zip#77]
                        :  +- Filter (substr(ca_zip#77, 1, 5) INSET (56910,69952,63792,39371,74351,11101,25003,97189,57834,73134,62377,51200,32754,22752,86379,14171,91110,40162,98569,28709,13394,66162,25733,25782,26065,18383,51949,87343,50298,83849,33786,64528,23470,67030,46136,25280,46820,77721,99076,18426,31880,17871,98235,45748,49156,18652,72013,51622,43848,78567,41248,13695,44165,67853,54917,53179,64034,10567,71791,68908,55565,59402,64147,85816,57855,61547,27700,68100,28810,58263,15723,83933,51103,58058,90578,82276,81096,81426,96451,77556,38607,76638,18906,62971,57047,48425,35576,11928,30625,83444,73520,51650,57647,60099,30122,94983,24128,10445,41368,26233,26859,21756,24676,19849,36420,38193,58470,39127,13595,87501,24317,15455,69399,98025,81019,48033,11376,39516,67875,92712,14867,38122,29741,42961,30469,51211,56458,15559,16021,33123,33282,33515,72823,54601,76698,56240,72175,60279,20004,68806,72325,28488,43933,50412,45200,22246,78668,79777,96765,67301,73273,49448,82636,23932,47305,29839,39192,18799,61265,37125,58943,64457,88424,24610,84935,89360,68893,30431,28898,10336,90257,59166,46081,26105,96888,36634,86284,35258,39972,22927,73241,53268,24206,27385,99543,31671,14663,30903,39861,24996,63089,88086,83921,21076,67897,66708,45721,60576,25103,52867,30450,36233,30010,96576,73171,56571,56575,64544,13955,78451,43285,18119,16725,83041,76107,79994,54364,35942,56691,19769,63435,34102,18845,22744,13354,75691,45549,23968,31387,83144,13375,15765,28577,88190,19736,73650,37930,25989,83926,94898,51798,39736,22437,55253,38415,71256,18376,42029,25858,44438,19515,38935,51649,71954,15882,18767,63193,25486,49130,37126,40604,34425,17043,12305,11634,26653,94167,36446,10516,67473,66864,72425,63981,18842,22461,42666,47770,69035,70372,28587,45266,15371,15798,45375,90225,16807,31016,68014,21337,19505,50016,10144,84093,21286,19430,34322,91068,94945,72305,24671,58048,65084,28545,21195,20548,22245,77191,96976,48583,76231,15734,61810,11356,68621,68786,98359,41367,26689,69913,76614,68101,88885,50308,79077,18270,28915,29178,53672,62878,10390,14922,68341,56529,41766,68309,56616,15126,61860,97789,11489,45692,41918,72151,72550,27156,36495,70738,17879,53535,17920,68880,78890,35850,14089,58078,65164,27068,26231,13376,57665,32213,77610,87816,21309,15146,86198,91137,55307,67467,40558,94627,82136,22351,89091,20260,23006,91393,47537,62496,98294,18840,71286,81312,31029,70466,35458,14060,22685,28286,25631,19512,40081,63837,14328,35474,22152,76232,51061,86057,17183) AND isnotnull(substr(ca_zip#77, 1, 5)))
                        :     +- Relation[ca_address_sk#78,ca_address_id#79,ca_street_number#80,ca_street_name#81,ca_street_type#82,ca_suite_number#83,ca_city#84,ca_county#85,ca_state#86,ca_zip#77,ca_country#87,ca_gmt_offset#88,ca_location_type#89] parquet
                        +- Project [ca_zip#2]
                           +- Filter (count(1)#91 > 10)
                              +- Aggregate [ca_zip#77], [substr(ca_zip#77, 1, 5) AS ca_zip#2, count(1) AS count(1)#91]
                                 +- Project [ca_zip#77]
                                    +- Join Inner, (ca_address_sk#78 = c_current_addr_sk#92)
                                       :- Project [ca_address_sk#78, ca_zip#77]
                                       :  +- Filter isnotnull(ca_address_sk#78)
                                       :     +- Relation[ca_address_sk#78,ca_address_id#79,ca_street_number#80,ca_street_name#81,ca_street_type#82,ca_suite_number#83,ca_city#84,ca_county#85,ca_state#86,ca_zip#77,ca_country#87,ca_gmt_offset#88,ca_location_type#89] parquet
                                       +- Project [c_current_addr_sk#92]
                                          +- Filter ((isnotnull(c_preferred_cust_flag#93) AND (c_preferred_cust_flag#93 = Y)) AND isnotnull(c_current_addr_sk#92))
                                             +- Relation[c_customer_sk#94,c_customer_id#95,c_current_cdemo_sk#96,c_current_hdemo_sk#97,c_current_addr_sk#92,c_first_shipto_date_sk#98,c_first_sales_date_sk#99,c_salutation#100,c_first_name#101,c_last_name#102,c_preferred_cust_flag#93,c_birth_day#103,c_birth_month#104,c_birth_year#105,c_birth_country#106,c_login#107,c_email_address#108,c_last_review_date#109] parquet

== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[s_store_name#4 ASC NULLS FIRST], output=[s_store_name#4,sum(ss_net_profit)#5])
+- *(15) HashAggregate(keys=[s_store_name#4], functions=[sum(UnscaledValue(ss_net_profit#6))], output=[s_store_name#4, sum(ss_net_profit)#5])
   +- Exchange hashpartitioning(s_store_name#4, 5), true, [id=#110]
      +- *(14) HashAggregate(keys=[s_store_name#4], functions=[partial_sum(UnscaledValue(ss_net_profit#6))], output=[s_store_name#4, sum#111])
         +- *(14) Project [ss_net_profit#6, s_store_name#4]
            +- *(14) SortMergeJoin [substr(s_zip#13, 1, 2)], [substr(ca_zip#1, 1, 2)], Inner
               :- *(4) Sort [substr(s_zip#13, 1, 2) ASC NULLS FIRST], false, 0
               :  +- Exchange hashpartitioning(substr(s_zip#13, 1, 2), 5), true, [id=#112]
               :     +- *(3) Project [ss_net_profit#6, s_store_name#4, s_zip#13]
               :        +- *(3) BroadcastHashJoin [ss_store_sk#7], [s_store_sk#8], Inner, BuildRight, false
               :           :- *(3) Project [ss_store_sk#7, ss_net_profit#6]
               :           :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#9], [d_date_sk#10], Inner, BuildRight, false
               :           :     :- *(3) Filter (isnotnull(ss_sold_date_sk#9) AND isnotnull(ss_store_sk#7))
               :           :     :  +- *(3) ColumnarToRow
               :           :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#9,ss_store_sk#7,ss_net_profit#6] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#9), isnotnull(ss_store_sk#7)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>
               :           :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#113]
               :           :        +- *(1) Project [d_date_sk#10]
               :           :           +- *(1) Filter ((((isnotnull(d_qoy#11) AND isnotnull(d_year#12)) AND (d_qoy#11 = 2)) AND (d_year#12 = 1998)) AND isnotnull(d_date_sk#10))
               :           :              +- *(1) ColumnarToRow
               :           :                 +- FileScan parquet default.date_dim[d_date_sk#10,d_year#12,d_qoy#11] Batched: true, DataFilters: [isnotnull(d_qoy#11), isnotnull(d_year#12), (d_qoy#11 = 2), (d_year#12 = 1998), isnotnull..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>
               :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#114]
               :              +- *(2) Filter (isnotnull(s_store_sk#8) AND isnotnull(s_zip#13))
               :                 +- *(2) ColumnarToRow
               :                    +- FileScan parquet default.store[s_store_sk#8,s_store_name#4,s_zip#13] Batched: true, DataFilters: [isnotnull(s_store_sk#8), isnotnull(s_zip#13)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>
               +- *(13) Sort [substr(ca_zip#1, 1, 2) ASC NULLS FIRST], false, 0
                  +- Exchange hashpartitioning(substr(ca_zip#1, 1, 2), 5), true, [id=#115]
                     +- *(12) HashAggregate(keys=[ca_zip#1], functions=[], output=[ca_zip#1])
                        +- Exchange hashpartitioning(ca_zip#1, 5), true, [id=#116]
                           +- *(11) HashAggregate(keys=[ca_zip#1], functions=[], output=[ca_zip#1])
                              +- *(11) Project [substr(ca_zip#77, 1, 5) AS ca_zip#1]
                                 +- *(11) BroadcastHashJoin [coalesce(substr(ca_zip#77, 1, 5), ), isnull(substr(ca_zip#77, 1, 5))], [coalesce(ca_zip#2, ), isnull(ca_zip#2)], LeftSemi, BuildRight, false
                                    :- *(11) Filter (substr(ca_zip#77, 1, 5) INSET (56910,69952,63792,39371,74351,11101,25003,97189,57834,73134,62377,51200,32754,22752,86379,14171,91110,40162,98569,28709,13394,66162,25733,25782,26065,18383,51949,87343,50298,83849,33786,64528,23470,67030,46136,25280,46820,77721,99076,18426,31880,17871,98235,45748,49156,18652,72013,51622,43848,78567,41248,13695,44165,67853,54917,53179,64034,10567,71791,68908,55565,59402,64147,85816,57855,61547,27700,68100,28810,58263,15723,83933,51103,58058,90578,82276,81096,81426,96451,77556,38607,76638,18906,62971,57047,48425,35576,11928,30625,83444,73520,51650,57647,60099,30122,94983,24128,10445,41368,26233,26859,21756,24676,19849,36420,38193,58470,39127,13595,87501,24317,15455,69399,98025,81019,48033,11376,39516,67875,92712,14867,38122,29741,42961,30469,51211,56458,15559,16021,33123,33282,33515,72823,54601,76698,56240,72175,60279,20004,68806,72325,28488,43933,50412,45200,22246,78668,79777,96765,67301,73273,49448,82636,23932,47305,29839,39192,18799,61265,37125,58943,64457,88424,24610,84935,89360,68893,30431,28898,10336,90257,59166,46081,26105,96888,36634,86284,35258,39972,22927,73241,53268,24206,27385,99543,31671,14663,30903,39861,24996,63089,88086,83921,21076,67897,66708,45721,60576,25103,52867,30450,36233,30010,96576,73171,56571,56575,64544,13955,78451,43285,18119,16725,83041,76107,79994,54364,35942,56691,19769,63435,34102,18845,22744,13354,75691,45549,23968,31387,83144,13375,15765,28577,88190,19736,73650,37930,25989,83926,94898,51798,39736,22437,55253,38415,71256,18376,42029,25858,44438,19515,38935,51649,71954,15882,18767,63193,25486,49130,37126,40604,34425,17043,12305,11634,26653,94167,36446,10516,67473,66864,72425,63981,18842,22461,42666,47770,69035,70372,28587,45266,15371,15798,45375,90225,16807,31016,68014,21337,19505,50016,10144,84093,21286,19430,34322,91068,94945,72305,24671,58048,65084,28545,21195,20548,22245,77191,96976,48583,76231,15734,61810,11356,68621,68786,98359,41367,26689,69913,76614,68101,88885,50308,79077,18270,28915,29178,53672,62878,10390,14922,68341,56529,41766,68309,56616,15126,61860,97789,11489,45692,41918,72151,72550,27156,36495,70738,17879,53535,17920,68880,78890,35850,14089,58078,65164,27068,26231,13376,57665,32213,77610,87816,21309,15146,86198,91137,55307,67467,40558,94627,82136,22351,89091,20260,23006,91393,47537,62496,98294,18840,71286,81312,31029,70466,35458,14060,22685,28286,25631,19512,40081,63837,14328,35474,22152,76232,51061,86057,17183) AND isnotnull(substr(ca_zip#77, 1, 5)))
                                    :  +- *(11) ColumnarToRow
                                    :     +- FileScan parquet default.customer_address[ca_zip#77] Batched: true, DataFilters: [substr(ca_zip#77, 1, 5) INSET (56910,69952,63792,39371,74351,11101,25003,97189,57834,73134,623..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ca_zip:string>
                                    +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true])),false), [id=#117]
                                       +- *(10) Project [ca_zip#2]
                                          +- *(10) Filter (count(1)#91 > 10)
                                             +- *(10) HashAggregate(keys=[ca_zip#77], functions=[count(1)], output=[ca_zip#2, count(1)#91])
                                                +- Exchange hashpartitioning(ca_zip#77, 5), true, [id=#118]
                                                   +- *(9) HashAggregate(keys=[ca_zip#77], functions=[partial_count(1)], output=[ca_zip#77, count#119])
                                                      +- *(9) Project [ca_zip#77]
                                                         +- *(9) SortMergeJoin [ca_address_sk#78], [c_current_addr_sk#92], Inner
                                                            :- *(6) Sort [ca_address_sk#78 ASC NULLS FIRST], false, 0
                                                            :  +- Exchange hashpartitioning(ca_address_sk#78, 5), true, [id=#120]
                                                            :     +- *(5) Filter isnotnull(ca_address_sk#78)
                                                            :        +- *(5) ColumnarToRow
                                                            :           +- FileScan parquet default.customer_address[ca_address_sk#78,ca_zip#77] Batched: true, DataFilters: [isnotnull(ca_address_sk#78)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>
                                                            +- *(8) Sort [c_current_addr_sk#92 ASC NULLS FIRST], false, 0
                                                               +- Exchange hashpartitioning(c_current_addr_sk#92, 5), true, [id=#121]
                                                                  +- *(7) Project [c_current_addr_sk#92]
                                                                     +- *(7) Filter ((isnotnull(c_preferred_cust_flag#93) AND (c_preferred_cust_flag#93 = Y)) AND isnotnull(c_current_addr_sk#92))
                                                                        +- *(7) ColumnarToRow
                                                                           +- FileScan parquet default.customer[c_current_addr_sk#92,c_preferred_cust_flag#93] Batched: true, DataFilters: [isnotnull(c_preferred_cust_flag#93), (c_preferred_cust_flag#93 = Y), isnotnull(c_current_add..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_preferred_cust_flag), EqualTo(c_preferred_cust_flag,Y), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_current_addr_sk:int,c_preferred_cust_flag:string>
