== Parsed Logical Plan ==
'GlobalLimit 100
+- 'LocalLimit 100
   +- 'Project [*]
      +- 'Join Inner
         :- 'Join Inner
         :  :- 'Join Inner
         :  :  :- 'Join Inner
         :  :  :  :- 'Join Inner
         :  :  :  :  :- 'SubqueryAlias B1
         :  :  :  :  :  +- 'Project ['avg('ss_list_price) AS B1_LP#1, 'count('ss_list_price) AS B1_CNT#2, 'count('ss_list_price) AS B1_CNTD#3]
         :  :  :  :  :     +- 'Filter ((('ss_quantity >= 0) AND ('ss_quantity <= 5)) AND (((('ss_list_price >= 8) AND ('ss_list_price <= (8 + 10))) OR (('ss_coupon_amt >= 459) AND ('ss_coupon_amt <= (459 + 1000)))) OR (('ss_wholesale_cost >= 57) AND ('ss_wholesale_cost <= (57 + 20)))))
         :  :  :  :  :        +- 'UnresolvedRelation [store_sales]
         :  :  :  :  +- 'SubqueryAlias B2
         :  :  :  :     +- 'Project ['avg('ss_list_price) AS B2_LP#4, 'count('ss_list_price) AS B2_CNT#5, 'count('ss_list_price) AS B2_CNTD#6]
         :  :  :  :        +- 'Filter ((('ss_quantity >= 6) AND ('ss_quantity <= 10)) AND (((('ss_list_price >= 90) AND ('ss_list_price <= (90 + 10))) OR (('ss_coupon_amt >= 2323) AND ('ss_coupon_amt <= (2323 + 1000)))) OR (('ss_wholesale_cost >= 31) AND ('ss_wholesale_cost <= (31 + 20)))))
         :  :  :  :           +- 'UnresolvedRelation [store_sales]
         :  :  :  +- 'SubqueryAlias B3
         :  :  :     +- 'Project ['avg('ss_list_price) AS B3_LP#7, 'count('ss_list_price) AS B3_CNT#8, 'count('ss_list_price) AS B3_CNTD#9]
         :  :  :        +- 'Filter ((('ss_quantity >= 11) AND ('ss_quantity <= 15)) AND (((('ss_list_price >= 142) AND ('ss_list_price <= (142 + 10))) OR (('ss_coupon_amt >= 12214) AND ('ss_coupon_amt <= (12214 + 1000)))) OR (('ss_wholesale_cost >= 79) AND ('ss_wholesale_cost <= (79 + 20)))))
         :  :  :           +- 'UnresolvedRelation [store_sales]
         :  :  +- 'SubqueryAlias B4
         :  :     +- 'Project ['avg('ss_list_price) AS B4_LP#10, 'count('ss_list_price) AS B4_CNT#11, 'count('ss_list_price) AS B4_CNTD#12]
         :  :        +- 'Filter ((('ss_quantity >= 16) AND ('ss_quantity <= 20)) AND (((('ss_list_price >= 135) AND ('ss_list_price <= (135 + 10))) OR (('ss_coupon_amt >= 6071) AND ('ss_coupon_amt <= (6071 + 1000)))) OR (('ss_wholesale_cost >= 38) AND ('ss_wholesale_cost <= (38 + 20)))))
         :  :           +- 'UnresolvedRelation [store_sales]
         :  +- 'SubqueryAlias B5
         :     +- 'Project ['avg('ss_list_price) AS B5_LP#13, 'count('ss_list_price) AS B5_CNT#14, 'count('ss_list_price) AS B5_CNTD#15]
         :        +- 'Filter ((('ss_quantity >= 21) AND ('ss_quantity <= 25)) AND (((('ss_list_price >= 122) AND ('ss_list_price <= (122 + 10))) OR (('ss_coupon_amt >= 836) AND ('ss_coupon_amt <= (836 + 1000)))) OR (('ss_wholesale_cost >= 17) AND ('ss_wholesale_cost <= (17 + 20)))))
         :           +- 'UnresolvedRelation [store_sales]
         +- 'SubqueryAlias B6
            +- 'Project ['avg('ss_list_price) AS B6_LP#16, 'count('ss_list_price) AS B6_CNT#17, 'count('ss_list_price) AS B6_CNTD#18]
               +- 'Filter ((('ss_quantity >= 26) AND ('ss_quantity <= 30)) AND (((('ss_list_price >= 154) AND ('ss_list_price <= (154 + 10))) OR (('ss_coupon_amt >= 7326) AND ('ss_coupon_amt <= (7326 + 1000)))) OR (('ss_wholesale_cost >= 7) AND ('ss_wholesale_cost <= (7 + 20)))))
                  +- 'UnresolvedRelation [store_sales]

== Analyzed Logical Plan ==
B1_LP: decimal(11,6), B1_CNT: bigint, B1_CNTD: bigint, B2_LP: decimal(11,6), B2_CNT: bigint, B2_CNTD: bigint, B3_LP: decimal(11,6), B3_CNT: bigint, B3_CNTD: bigint, B4_LP: decimal(11,6), B4_CNT: bigint, B4_CNTD: bigint, B5_LP: decimal(11,6), B5_CNT: bigint, B5_CNTD: bigint, B6_LP: decimal(11,6), B6_CNT: bigint, B6_CNTD: bigint
GlobalLimit 100
+- LocalLimit 100
   +- Project [B1_LP#1, B1_CNT#19, B1_CNTD#20, B2_LP#4, B2_CNT#21, B2_CNTD#22, B3_LP#7, B3_CNT#23, B3_CNTD#24, B4_LP#10, B4_CNT#25, B4_CNTD#26, B5_LP#13, B5_CNT#27, B5_CNTD#28, B6_LP#16, B6_CNT#29, B6_CNTD#30]
      +- Join Inner
         :- Join Inner
         :  :- Join Inner
         :  :  :- Join Inner
         :  :  :  :- Join Inner
         :  :  :  :  :- SubqueryAlias B1
         :  :  :  :  :  +- Aggregate [avg(ss_list_price#31) AS B1_LP#1, count(ss_list_price#31) AS B1_CNT#19, count(distinct ss_list_price#31) AS B1_CNTD#20]
         :  :  :  :  :     +- Filter (((ss_quantity#32 >= 0) AND (ss_quantity#32 <= 5)) AND ((((cast(ss_list_price#31 as decimal(7,2)) >= cast(cast(8 as decimal(1,0)) as decimal(7,2))) AND (cast(ss_list_price#31 as decimal(12,2)) <= cast(cast((8 + 10) as decimal(10,0)) as decimal(12,2)))) OR ((cast(ss_coupon_amt#33 as decimal(7,2)) >= cast(cast(459 as decimal(3,0)) as decimal(7,2))) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= cast(cast((459 + 1000) as decimal(10,0)) as decimal(12,2))))) OR ((cast(ss_wholesale_cost#34 as decimal(7,2)) >= cast(cast(57 as decimal(2,0)) as decimal(7,2))) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= cast(cast((57 + 20) as decimal(10,0)) as decimal(12,2))))))
         :  :  :  :  :        +- SubqueryAlias spark_catalog.default.store_sales
         :  :  :  :  :           +- Relation[ss_sold_date_sk#35,ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44,ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_sales_price#45,ss_ext_discount_amt#46,ss_ext_sales_price#47,ss_ext_wholesale_cost#48,ss_ext_list_price#49,ss_ext_tax#50,ss_coupon_amt#33,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
         :  :  :  :  +- SubqueryAlias B2
         :  :  :  :     +- Aggregate [avg(ss_list_price#31) AS B2_LP#4, count(ss_list_price#31) AS B2_CNT#21, count(distinct ss_list_price#31) AS B2_CNTD#22]
         :  :  :  :        +- Filter (((ss_quantity#32 >= 6) AND (ss_quantity#32 <= 10)) AND ((((cast(ss_list_price#31 as decimal(7,2)) >= cast(cast(90 as decimal(2,0)) as decimal(7,2))) AND (cast(ss_list_price#31 as decimal(12,2)) <= cast(cast((90 + 10) as decimal(10,0)) as decimal(12,2)))) OR ((cast(ss_coupon_amt#33 as decimal(7,2)) >= cast(cast(2323 as decimal(4,0)) as decimal(7,2))) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= cast(cast((2323 + 1000) as decimal(10,0)) as decimal(12,2))))) OR ((cast(ss_wholesale_cost#34 as decimal(7,2)) >= cast(cast(31 as decimal(2,0)) as decimal(7,2))) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= cast(cast((31 + 20) as decimal(10,0)) as decimal(12,2))))))
         :  :  :  :           +- SubqueryAlias spark_catalog.default.store_sales
         :  :  :  :              +- Relation[ss_sold_date_sk#35,ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44,ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_sales_price#45,ss_ext_discount_amt#46,ss_ext_sales_price#47,ss_ext_wholesale_cost#48,ss_ext_list_price#49,ss_ext_tax#50,ss_coupon_amt#33,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
         :  :  :  +- SubqueryAlias B3
         :  :  :     +- Aggregate [avg(ss_list_price#31) AS B3_LP#7, count(ss_list_price#31) AS B3_CNT#23, count(distinct ss_list_price#31) AS B3_CNTD#24]
         :  :  :        +- Filter (((ss_quantity#32 >= 11) AND (ss_quantity#32 <= 15)) AND ((((cast(ss_list_price#31 as decimal(7,2)) >= cast(cast(142 as decimal(3,0)) as decimal(7,2))) AND (cast(ss_list_price#31 as decimal(12,2)) <= cast(cast((142 + 10) as decimal(10,0)) as decimal(12,2)))) OR ((cast(ss_coupon_amt#33 as decimal(7,2)) >= cast(cast(12214 as decimal(5,0)) as decimal(7,2))) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= cast(cast((12214 + 1000) as decimal(10,0)) as decimal(12,2))))) OR ((cast(ss_wholesale_cost#34 as decimal(7,2)) >= cast(cast(79 as decimal(2,0)) as decimal(7,2))) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= cast(cast((79 + 20) as decimal(10,0)) as decimal(12,2))))))
         :  :  :           +- SubqueryAlias spark_catalog.default.store_sales
         :  :  :              +- Relation[ss_sold_date_sk#35,ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44,ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_sales_price#45,ss_ext_discount_amt#46,ss_ext_sales_price#47,ss_ext_wholesale_cost#48,ss_ext_list_price#49,ss_ext_tax#50,ss_coupon_amt#33,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
         :  :  +- SubqueryAlias B4
         :  :     +- Aggregate [avg(ss_list_price#31) AS B4_LP#10, count(ss_list_price#31) AS B4_CNT#25, count(distinct ss_list_price#31) AS B4_CNTD#26]
         :  :        +- Filter (((ss_quantity#32 >= 16) AND (ss_quantity#32 <= 20)) AND ((((cast(ss_list_price#31 as decimal(7,2)) >= cast(cast(135 as decimal(3,0)) as decimal(7,2))) AND (cast(ss_list_price#31 as decimal(12,2)) <= cast(cast((135 + 10) as decimal(10,0)) as decimal(12,2)))) OR ((cast(ss_coupon_amt#33 as decimal(7,2)) >= cast(cast(6071 as decimal(4,0)) as decimal(7,2))) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= cast(cast((6071 + 1000) as decimal(10,0)) as decimal(12,2))))) OR ((cast(ss_wholesale_cost#34 as decimal(7,2)) >= cast(cast(38 as decimal(2,0)) as decimal(7,2))) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= cast(cast((38 + 20) as decimal(10,0)) as decimal(12,2))))))
         :  :           +- SubqueryAlias spark_catalog.default.store_sales
         :  :              +- Relation[ss_sold_date_sk#35,ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44,ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_sales_price#45,ss_ext_discount_amt#46,ss_ext_sales_price#47,ss_ext_wholesale_cost#48,ss_ext_list_price#49,ss_ext_tax#50,ss_coupon_amt#33,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
         :  +- SubqueryAlias B5
         :     +- Aggregate [avg(ss_list_price#31) AS B5_LP#13, count(ss_list_price#31) AS B5_CNT#27, count(distinct ss_list_price#31) AS B5_CNTD#28]
         :        +- Filter (((ss_quantity#32 >= 21) AND (ss_quantity#32 <= 25)) AND ((((cast(ss_list_price#31 as decimal(7,2)) >= cast(cast(122 as decimal(3,0)) as decimal(7,2))) AND (cast(ss_list_price#31 as decimal(12,2)) <= cast(cast((122 + 10) as decimal(10,0)) as decimal(12,2)))) OR ((cast(ss_coupon_amt#33 as decimal(7,2)) >= cast(cast(836 as decimal(3,0)) as decimal(7,2))) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= cast(cast((836 + 1000) as decimal(10,0)) as decimal(12,2))))) OR ((cast(ss_wholesale_cost#34 as decimal(7,2)) >= cast(cast(17 as decimal(2,0)) as decimal(7,2))) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= cast(cast((17 + 20) as decimal(10,0)) as decimal(12,2))))))
         :           +- SubqueryAlias spark_catalog.default.store_sales
         :              +- Relation[ss_sold_date_sk#35,ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44,ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_sales_price#45,ss_ext_discount_amt#46,ss_ext_sales_price#47,ss_ext_wholesale_cost#48,ss_ext_list_price#49,ss_ext_tax#50,ss_coupon_amt#33,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
         +- SubqueryAlias B6
            +- Aggregate [avg(ss_list_price#31) AS B6_LP#16, count(ss_list_price#31) AS B6_CNT#29, count(distinct ss_list_price#31) AS B6_CNTD#30]
               +- Filter (((ss_quantity#32 >= 26) AND (ss_quantity#32 <= 30)) AND ((((cast(ss_list_price#31 as decimal(7,2)) >= cast(cast(154 as decimal(3,0)) as decimal(7,2))) AND (cast(ss_list_price#31 as decimal(12,2)) <= cast(cast((154 + 10) as decimal(10,0)) as decimal(12,2)))) OR ((cast(ss_coupon_amt#33 as decimal(7,2)) >= cast(cast(7326 as decimal(4,0)) as decimal(7,2))) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= cast(cast((7326 + 1000) as decimal(10,0)) as decimal(12,2))))) OR ((cast(ss_wholesale_cost#34 as decimal(7,2)) >= cast(cast(7 as decimal(1,0)) as decimal(7,2))) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= cast(cast((7 + 20) as decimal(10,0)) as decimal(12,2))))))
                  +- SubqueryAlias spark_catalog.default.store_sales
                     +- Relation[ss_sold_date_sk#35,ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44,ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_sales_price#45,ss_ext_discount_amt#46,ss_ext_sales_price#47,ss_ext_wholesale_cost#48,ss_ext_list_price#49,ss_ext_tax#50,ss_coupon_amt#33,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Join Inner
      :- Join Inner
      :  :- Join Inner
      :  :  :- Join Inner
      :  :  :  :- Join Inner
      :  :  :  :  :- Aggregate [cast((avg(UnscaledValue(ss_list_price#31)) / 100.0) as decimal(11,6)) AS B1_LP#1, count(ss_list_price#31) AS B1_CNT#19, count(distinct ss_list_price#31) AS B1_CNTD#20]
      :  :  :  :  :  +- Project [ss_list_price#31]
      :  :  :  :  :     +- Filter (((isnotnull(ss_quantity#32) AND (ss_quantity#32 >= 0)) AND (ss_quantity#32 <= 5)) AND ((((ss_list_price#31 >= 8.00) AND (cast(ss_list_price#31 as decimal(12,2)) <= 18.00)) OR ((ss_coupon_amt#33 >= 459.00) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= 1459.00))) OR ((ss_wholesale_cost#34 >= 57.00) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= 77.00))))
      :  :  :  :  :        +- Relation[ss_sold_date_sk#35,ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44,ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_sales_price#45,ss_ext_discount_amt#46,ss_ext_sales_price#47,ss_ext_wholesale_cost#48,ss_ext_list_price#49,ss_ext_tax#50,ss_coupon_amt#33,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
      :  :  :  :  +- Aggregate [cast((avg(UnscaledValue(ss_list_price#31)) / 100.0) as decimal(11,6)) AS B2_LP#4, count(ss_list_price#31) AS B2_CNT#21, count(distinct ss_list_price#31) AS B2_CNTD#22]
      :  :  :  :     +- Project [ss_list_price#31]
      :  :  :  :        +- Filter (((isnotnull(ss_quantity#32) AND (ss_quantity#32 >= 6)) AND (ss_quantity#32 <= 10)) AND ((((ss_list_price#31 >= 90.00) AND (cast(ss_list_price#31 as decimal(12,2)) <= 100.00)) OR ((ss_coupon_amt#33 >= 2323.00) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= 3323.00))) OR ((ss_wholesale_cost#34 >= 31.00) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= 51.00))))
      :  :  :  :           +- Relation[ss_sold_date_sk#35,ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44,ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_sales_price#45,ss_ext_discount_amt#46,ss_ext_sales_price#47,ss_ext_wholesale_cost#48,ss_ext_list_price#49,ss_ext_tax#50,ss_coupon_amt#33,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
      :  :  :  +- Aggregate [cast((avg(UnscaledValue(ss_list_price#31)) / 100.0) as decimal(11,6)) AS B3_LP#7, count(ss_list_price#31) AS B3_CNT#23, count(distinct ss_list_price#31) AS B3_CNTD#24]
      :  :  :     +- Project [ss_list_price#31]
      :  :  :        +- Filter (((isnotnull(ss_quantity#32) AND (ss_quantity#32 >= 11)) AND (ss_quantity#32 <= 15)) AND ((((ss_list_price#31 >= 142.00) AND (cast(ss_list_price#31 as decimal(12,2)) <= 152.00)) OR ((ss_coupon_amt#33 >= 12214.00) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= 13214.00))) OR ((ss_wholesale_cost#34 >= 79.00) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= 99.00))))
      :  :  :           +- Relation[ss_sold_date_sk#35,ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44,ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_sales_price#45,ss_ext_discount_amt#46,ss_ext_sales_price#47,ss_ext_wholesale_cost#48,ss_ext_list_price#49,ss_ext_tax#50,ss_coupon_amt#33,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
      :  :  +- Aggregate [cast((avg(UnscaledValue(ss_list_price#31)) / 100.0) as decimal(11,6)) AS B4_LP#10, count(ss_list_price#31) AS B4_CNT#25, count(distinct ss_list_price#31) AS B4_CNTD#26]
      :  :     +- Project [ss_list_price#31]
      :  :        +- Filter (((isnotnull(ss_quantity#32) AND (ss_quantity#32 >= 16)) AND (ss_quantity#32 <= 20)) AND ((((ss_list_price#31 >= 135.00) AND (cast(ss_list_price#31 as decimal(12,2)) <= 145.00)) OR ((ss_coupon_amt#33 >= 6071.00) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= 7071.00))) OR ((ss_wholesale_cost#34 >= 38.00) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= 58.00))))
      :  :           +- Relation[ss_sold_date_sk#35,ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44,ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_sales_price#45,ss_ext_discount_amt#46,ss_ext_sales_price#47,ss_ext_wholesale_cost#48,ss_ext_list_price#49,ss_ext_tax#50,ss_coupon_amt#33,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
      :  +- Aggregate [cast((avg(UnscaledValue(ss_list_price#31)) / 100.0) as decimal(11,6)) AS B5_LP#13, count(ss_list_price#31) AS B5_CNT#27, count(distinct ss_list_price#31) AS B5_CNTD#28]
      :     +- Project [ss_list_price#31]
      :        +- Filter (((isnotnull(ss_quantity#32) AND (ss_quantity#32 >= 21)) AND (ss_quantity#32 <= 25)) AND ((((ss_list_price#31 >= 122.00) AND (cast(ss_list_price#31 as decimal(12,2)) <= 132.00)) OR ((ss_coupon_amt#33 >= 836.00) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= 1836.00))) OR ((ss_wholesale_cost#34 >= 17.00) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= 37.00))))
      :           +- Relation[ss_sold_date_sk#35,ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44,ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_sales_price#45,ss_ext_discount_amt#46,ss_ext_sales_price#47,ss_ext_wholesale_cost#48,ss_ext_list_price#49,ss_ext_tax#50,ss_coupon_amt#33,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet
      +- Aggregate [cast((avg(UnscaledValue(ss_list_price#31)) / 100.0) as decimal(11,6)) AS B6_LP#16, count(ss_list_price#31) AS B6_CNT#29, count(distinct ss_list_price#31) AS B6_CNTD#30]
         +- Project [ss_list_price#31]
            +- Filter (((isnotnull(ss_quantity#32) AND (ss_quantity#32 >= 26)) AND (ss_quantity#32 <= 30)) AND ((((ss_list_price#31 >= 154.00) AND (cast(ss_list_price#31 as decimal(12,2)) <= 164.00)) OR ((ss_coupon_amt#33 >= 7326.00) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= 8326.00))) OR ((ss_wholesale_cost#34 >= 7.00) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= 27.00))))
               +- Relation[ss_sold_date_sk#35,ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44,ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_sales_price#45,ss_ext_discount_amt#46,ss_ext_sales_price#47,ss_ext_wholesale_cost#48,ss_ext_list_price#49,ss_ext_tax#50,ss_coupon_amt#33,ss_net_paid#51,ss_net_paid_inc_tax#52,ss_net_profit#53] parquet

== Physical Plan ==
CollectLimit 100
+- BroadcastNestedLoopJoin BuildRight, Inner
   :- BroadcastNestedLoopJoin BuildRight, Inner
   :  :- BroadcastNestedLoopJoin BuildRight, Inner
   :  :  :- BroadcastNestedLoopJoin BuildRight, Inner
   :  :  :  :- BroadcastNestedLoopJoin BuildRight, Inner
   :  :  :  :  :- *(3) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#31)), count(ss_list_price#31), count(distinct ss_list_price#31)], output=[B1_LP#1, B1_CNT#19, B1_CNTD#20])
   :  :  :  :  :  +- Exchange SinglePartition, true, [id=#54]
   :  :  :  :  :     +- *(2) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#31)), merge_count(ss_list_price#31), partial_count(distinct ss_list_price#31)], output=[sum#55, count#56, count#57, count#58])
   :  :  :  :  :        +- *(2) HashAggregate(keys=[ss_list_price#31], functions=[merge_avg(UnscaledValue(ss_list_price#31)), merge_count(ss_list_price#31)], output=[ss_list_price#31, sum#55, count#56, count#57])
   :  :  :  :  :           +- Exchange hashpartitioning(ss_list_price#31, 5), true, [id=#59]
   :  :  :  :  :              +- *(1) HashAggregate(keys=[ss_list_price#31], functions=[partial_avg(UnscaledValue(ss_list_price#31)), partial_count(ss_list_price#31)], output=[ss_list_price#31, sum#55, count#56, count#57])
   :  :  :  :  :                 +- *(1) Project [ss_list_price#31]
   :  :  :  :  :                    +- *(1) Filter (((isnotnull(ss_quantity#32) AND (ss_quantity#32 >= 0)) AND (ss_quantity#32 <= 5)) AND ((((ss_list_price#31 >= 8.00) AND (cast(ss_list_price#31 as decimal(12,2)) <= 18.00)) OR ((ss_coupon_amt#33 >= 459.00) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= 1459.00))) OR ((ss_wholesale_cost#34 >= 57.00) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= 77.00))))
   :  :  :  :  :                       +- *(1) ColumnarToRow
   :  :  :  :  :                          +- FileScan parquet default.store_sales[ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_coupon_amt#33] Batched: true, DataFilters: [isnotnull(ss_quantity#32), (ss_quantity#32 >= 0), (ss_quantity#32 <= 5), ((((ss_list_price..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,0), LessThanOrEqual(ss_quantity,5)], ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...
   :  :  :  :  +- BroadcastExchange IdentityBroadcastMode, [id=#60]
   :  :  :  :     +- *(6) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#31)), count(ss_list_price#31), count(distinct ss_list_price#31)], output=[B2_LP#4, B2_CNT#21, B2_CNTD#22])
   :  :  :  :        +- Exchange SinglePartition, true, [id=#61]
   :  :  :  :           +- *(5) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#31)), merge_count(ss_list_price#31), partial_count(distinct ss_list_price#31)], output=[sum#62, count#63, count#64, count#65])
   :  :  :  :              +- *(5) HashAggregate(keys=[ss_list_price#31], functions=[merge_avg(UnscaledValue(ss_list_price#31)), merge_count(ss_list_price#31)], output=[ss_list_price#31, sum#62, count#63, count#64])
   :  :  :  :                 +- Exchange hashpartitioning(ss_list_price#31, 5), true, [id=#66]
   :  :  :  :                    +- *(4) HashAggregate(keys=[ss_list_price#31], functions=[partial_avg(UnscaledValue(ss_list_price#31)), partial_count(ss_list_price#31)], output=[ss_list_price#31, sum#62, count#63, count#64])
   :  :  :  :                       +- *(4) Project [ss_list_price#31]
   :  :  :  :                          +- *(4) Filter (((isnotnull(ss_quantity#32) AND (ss_quantity#32 >= 6)) AND (ss_quantity#32 <= 10)) AND ((((ss_list_price#31 >= 90.00) AND (cast(ss_list_price#31 as decimal(12,2)) <= 100.00)) OR ((ss_coupon_amt#33 >= 2323.00) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= 3323.00))) OR ((ss_wholesale_cost#34 >= 31.00) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= 51.00))))
   :  :  :  :                             +- *(4) ColumnarToRow
   :  :  :  :                                +- FileScan parquet default.store_sales[ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_coupon_amt#33] Batched: true, DataFilters: [isnotnull(ss_quantity#32), (ss_quantity#32 >= 6), (ss_quantity#32 <= 10), ((((ss_list_pric..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,6), LessThanOrEqual(ss_quantity,10)], ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...
   :  :  :  +- BroadcastExchange IdentityBroadcastMode, [id=#67]
   :  :  :     +- *(9) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#31)), count(ss_list_price#31), count(distinct ss_list_price#31)], output=[B3_LP#7, B3_CNT#23, B3_CNTD#24])
   :  :  :        +- Exchange SinglePartition, true, [id=#68]
   :  :  :           +- *(8) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#31)), merge_count(ss_list_price#31), partial_count(distinct ss_list_price#31)], output=[sum#69, count#70, count#71, count#72])
   :  :  :              +- *(8) HashAggregate(keys=[ss_list_price#31], functions=[merge_avg(UnscaledValue(ss_list_price#31)), merge_count(ss_list_price#31)], output=[ss_list_price#31, sum#69, count#70, count#71])
   :  :  :                 +- Exchange hashpartitioning(ss_list_price#31, 5), true, [id=#73]
   :  :  :                    +- *(7) HashAggregate(keys=[ss_list_price#31], functions=[partial_avg(UnscaledValue(ss_list_price#31)), partial_count(ss_list_price#31)], output=[ss_list_price#31, sum#69, count#70, count#71])
   :  :  :                       +- *(7) Project [ss_list_price#31]
   :  :  :                          +- *(7) Filter (((isnotnull(ss_quantity#32) AND (ss_quantity#32 >= 11)) AND (ss_quantity#32 <= 15)) AND ((((ss_list_price#31 >= 142.00) AND (cast(ss_list_price#31 as decimal(12,2)) <= 152.00)) OR ((ss_coupon_amt#33 >= 12214.00) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= 13214.00))) OR ((ss_wholesale_cost#34 >= 79.00) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= 99.00))))
   :  :  :                             +- *(7) ColumnarToRow
   :  :  :                                +- FileScan parquet default.store_sales[ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_coupon_amt#33] Batched: true, DataFilters: [isnotnull(ss_quantity#32), (ss_quantity#32 >= 11), (ss_quantity#32 <= 15), ((((ss_list_pri..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,11), LessThanOrEqual(ss_quantity,15)], ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...
   :  :  +- BroadcastExchange IdentityBroadcastMode, [id=#74]
   :  :     +- *(12) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#31)), count(ss_list_price#31), count(distinct ss_list_price#31)], output=[B4_LP#10, B4_CNT#25, B4_CNTD#26])
   :  :        +- Exchange SinglePartition, true, [id=#75]
   :  :           +- *(11) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#31)), merge_count(ss_list_price#31), partial_count(distinct ss_list_price#31)], output=[sum#76, count#77, count#78, count#79])
   :  :              +- *(11) HashAggregate(keys=[ss_list_price#31], functions=[merge_avg(UnscaledValue(ss_list_price#31)), merge_count(ss_list_price#31)], output=[ss_list_price#31, sum#76, count#77, count#78])
   :  :                 +- Exchange hashpartitioning(ss_list_price#31, 5), true, [id=#80]
   :  :                    +- *(10) HashAggregate(keys=[ss_list_price#31], functions=[partial_avg(UnscaledValue(ss_list_price#31)), partial_count(ss_list_price#31)], output=[ss_list_price#31, sum#76, count#77, count#78])
   :  :                       +- *(10) Project [ss_list_price#31]
   :  :                          +- *(10) Filter (((isnotnull(ss_quantity#32) AND (ss_quantity#32 >= 16)) AND (ss_quantity#32 <= 20)) AND ((((ss_list_price#31 >= 135.00) AND (cast(ss_list_price#31 as decimal(12,2)) <= 145.00)) OR ((ss_coupon_amt#33 >= 6071.00) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= 7071.00))) OR ((ss_wholesale_cost#34 >= 38.00) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= 58.00))))
   :  :                             +- *(10) ColumnarToRow
   :  :                                +- FileScan parquet default.store_sales[ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_coupon_amt#33] Batched: true, DataFilters: [isnotnull(ss_quantity#32), (ss_quantity#32 >= 16), (ss_quantity#32 <= 20), ((((ss_list_pri..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,16), LessThanOrEqual(ss_quantity,20)], ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...
   :  +- BroadcastExchange IdentityBroadcastMode, [id=#81]
   :     +- *(15) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#31)), count(ss_list_price#31), count(distinct ss_list_price#31)], output=[B5_LP#13, B5_CNT#27, B5_CNTD#28])
   :        +- Exchange SinglePartition, true, [id=#82]
   :           +- *(14) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#31)), merge_count(ss_list_price#31), partial_count(distinct ss_list_price#31)], output=[sum#83, count#84, count#85, count#86])
   :              +- *(14) HashAggregate(keys=[ss_list_price#31], functions=[merge_avg(UnscaledValue(ss_list_price#31)), merge_count(ss_list_price#31)], output=[ss_list_price#31, sum#83, count#84, count#85])
   :                 +- Exchange hashpartitioning(ss_list_price#31, 5), true, [id=#87]
   :                    +- *(13) HashAggregate(keys=[ss_list_price#31], functions=[partial_avg(UnscaledValue(ss_list_price#31)), partial_count(ss_list_price#31)], output=[ss_list_price#31, sum#83, count#84, count#85])
   :                       +- *(13) Project [ss_list_price#31]
   :                          +- *(13) Filter (((isnotnull(ss_quantity#32) AND (ss_quantity#32 >= 21)) AND (ss_quantity#32 <= 25)) AND ((((ss_list_price#31 >= 122.00) AND (cast(ss_list_price#31 as decimal(12,2)) <= 132.00)) OR ((ss_coupon_amt#33 >= 836.00) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= 1836.00))) OR ((ss_wholesale_cost#34 >= 17.00) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= 37.00))))
   :                             +- *(13) ColumnarToRow
   :                                +- FileScan parquet default.store_sales[ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_coupon_amt#33] Batched: true, DataFilters: [isnotnull(ss_quantity#32), (ss_quantity#32 >= 21), (ss_quantity#32 <= 25), ((((ss_list_pri..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,21), LessThanOrEqual(ss_quantity,25)], ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...
   +- BroadcastExchange IdentityBroadcastMode, [id=#88]
      +- *(18) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#31)), count(ss_list_price#31), count(distinct ss_list_price#31)], output=[B6_LP#16, B6_CNT#29, B6_CNTD#30])
         +- Exchange SinglePartition, true, [id=#89]
            +- *(17) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#31)), merge_count(ss_list_price#31), partial_count(distinct ss_list_price#31)], output=[sum#90, count#91, count#92, count#93])
               +- *(17) HashAggregate(keys=[ss_list_price#31], functions=[merge_avg(UnscaledValue(ss_list_price#31)), merge_count(ss_list_price#31)], output=[ss_list_price#31, sum#90, count#91, count#92])
                  +- Exchange hashpartitioning(ss_list_price#31, 5), true, [id=#94]
                     +- *(16) HashAggregate(keys=[ss_list_price#31], functions=[partial_avg(UnscaledValue(ss_list_price#31)), partial_count(ss_list_price#31)], output=[ss_list_price#31, sum#90, count#91, count#92])
                        +- *(16) Project [ss_list_price#31]
                           +- *(16) Filter (((isnotnull(ss_quantity#32) AND (ss_quantity#32 >= 26)) AND (ss_quantity#32 <= 30)) AND ((((ss_list_price#31 >= 154.00) AND (cast(ss_list_price#31 as decimal(12,2)) <= 164.00)) OR ((ss_coupon_amt#33 >= 7326.00) AND (cast(ss_coupon_amt#33 as decimal(12,2)) <= 8326.00))) OR ((ss_wholesale_cost#34 >= 7.00) AND (cast(ss_wholesale_cost#34 as decimal(12,2)) <= 27.00))))
                              +- *(16) ColumnarToRow
                                 +- FileScan parquet default.store_sales[ss_quantity#32,ss_wholesale_cost#34,ss_list_price#31,ss_coupon_amt#33] Batched: true, DataFilters: [isnotnull(ss_quantity#32), (ss_quantity#32 >= 26), (ss_quantity#32 <= 30), ((((ss_list_pri..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,26), LessThanOrEqual(ss_quantity,30)], ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...
