== Parsed Logical Plan ==
'GlobalLimit 100
+- 'LocalLimit 100
   +- 'Sort ['c_customer_id ASC NULLS FIRST], true
      +- 'Project ['c_customer_id AS customer_id#1, 'concat('c_last_name, , , 'c_first_name) AS customername#2]
         +- 'Filter (((('ca_city = Edgewood) AND ('c_current_addr_sk = 'ca_address_sk)) AND (('ib_lower_bound >= 38128) AND ('ib_upper_bound <= (38128 + 50000)))) AND ((('ib_income_band_sk = 'hd_income_band_sk) AND ('cd_demo_sk = 'c_current_cdemo_sk)) AND (('hd_demo_sk = 'c_current_hdemo_sk) AND ('sr_cdemo_sk = 'cd_demo_sk))))
            +- 'Join Inner
               :- 'Join Inner
               :  :- 'Join Inner
               :  :  :- 'Join Inner
               :  :  :  :- 'Join Inner
               :  :  :  :  :- 'UnresolvedRelation [customer]
               :  :  :  :  +- 'UnresolvedRelation [customer_address]
               :  :  :  +- 'UnresolvedRelation [customer_demographics]
               :  :  +- 'UnresolvedRelation [household_demographics]
               :  +- 'UnresolvedRelation [income_band]
               +- 'UnresolvedRelation [store_returns]

== Analyzed Logical Plan ==
customer_id: string, customername: string
GlobalLimit 100
+- LocalLimit 100
   +- Project [customer_id#1, customername#2]
      +- Sort [c_customer_id#3 ASC NULLS FIRST], true
         +- Project [c_customer_id#3 AS customer_id#1, concat(c_last_name#4, , , c_first_name#5) AS customername#2, c_customer_id#3]
            +- Filter ((((ca_city#6 = Edgewood) AND (c_current_addr_sk#7 = ca_address_sk#8)) AND ((ib_lower_bound#9 >= 38128) AND (ib_upper_bound#10 <= (38128 + 50000)))) AND (((ib_income_band_sk#11 = hd_income_band_sk#12) AND (cd_demo_sk#13 = c_current_cdemo_sk#14)) AND ((hd_demo_sk#15 = c_current_hdemo_sk#16) AND (sr_cdemo_sk#17 = cast(cd_demo_sk#13 as bigint)))))
               +- Join Inner
                  :- Join Inner
                  :  :- Join Inner
                  :  :  :- Join Inner
                  :  :  :  :- Join Inner
                  :  :  :  :  :- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.customer
                  :  :  :  :  :  +- Relation[c_customer_sk#18,c_customer_id#3,c_current_cdemo_sk#14,c_current_hdemo_sk#16,c_current_addr_sk#7,c_first_shipto_date_sk#19,c_first_sales_date_sk#20,c_salutation#21,c_first_name#5,c_last_name#4,c_preferred_cust_flag#22,c_birth_day#23,c_birth_month#24,c_birth_year#25,c_birth_country#26,c_login#27,c_email_address#28,c_last_review_date#29] parquet
                  :  :  :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.customer_address
                  :  :  :  :     +- Relation[ca_address_sk#8,ca_address_id#30,ca_street_number#31,ca_street_name#32,ca_street_type#33,ca_suite_number#34,ca_city#6,ca_county#35,ca_state#36,ca_zip#37,ca_country#38,ca_gmt_offset#39,ca_location_type#40] parquet
                  :  :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.customer_demographics
                  :  :  :     +- Relation[cd_demo_sk#13,cd_gender#41,cd_marital_status#42,cd_education_status#43,cd_purchase_estimate#44,cd_credit_rating#45,cd_dep_count#46,cd_dep_employed_count#47,cd_dep_college_count#48] parquet
                  :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.household_demographics
                  :  :     +- Relation[hd_demo_sk#15,hd_income_band_sk#12,hd_buy_potential#49,hd_dep_count#50,hd_vehicle_count#51] parquet
                  :  +- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.income_band
                  :     +- Relation[ib_income_band_sk#11,ib_lower_bound#9,ib_upper_bound#10] parquet
                  +- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.store_returns
                     +- Relation[sr_returned_date_sk#52,sr_return_time_sk#53,sr_item_sk#54,sr_customer_sk#55,sr_cdemo_sk#17,sr_hdemo_sk#56,sr_addr_sk#57,sr_store_sk#58,sr_reason_sk#59,sr_ticket_number#60,sr_return_quantity#61,sr_return_amt#62,sr_return_tax#63,sr_return_amt_inc_tax#64,sr_fee#65,sr_return_ship_cost#66,sr_refunded_cash#67,sr_reversed_charge#68,sr_store_credit#69,sr_net_loss#70] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Project [customer_id#1, customername#2]
      +- Sort [c_customer_id#3 ASC NULLS FIRST], true
         +- Project [c_customer_id#3 AS customer_id#1, concat(c_last_name#4, , , c_first_name#5) AS customername#2, c_customer_id#3]
            +- Join Inner, (sr_cdemo_sk#17 = cast(cd_demo_sk#13 as bigint))
               :- Project [c_customer_id#3, c_first_name#5, c_last_name#4, cd_demo_sk#13]
               :  +- Join Inner, (ib_income_band_sk#11 = hd_income_band_sk#12)
               :     :- Project [c_customer_id#3, c_first_name#5, c_last_name#4, cd_demo_sk#13, hd_income_band_sk#12]
               :     :  +- Join Inner, (hd_demo_sk#15 = c_current_hdemo_sk#16)
               :     :     :- Project [c_customer_id#3, c_current_hdemo_sk#16, c_first_name#5, c_last_name#4, cd_demo_sk#13]
               :     :     :  +- Join Inner, (cd_demo_sk#13 = c_current_cdemo_sk#14)
               :     :     :     :- Project [c_customer_id#3, c_current_cdemo_sk#14, c_current_hdemo_sk#16, c_first_name#5, c_last_name#4]
               :     :     :     :  +- Join Inner, (c_current_addr_sk#7 = ca_address_sk#8)
               :     :     :     :     :- Project [c_customer_id#3, c_current_cdemo_sk#14, c_current_hdemo_sk#16, c_current_addr_sk#7, c_first_name#5, c_last_name#4]
               :     :     :     :     :  +- Filter ((isnotnull(c_current_addr_sk#7) AND isnotnull(c_current_cdemo_sk#14)) AND isnotnull(c_current_hdemo_sk#16))
               :     :     :     :     :     +- Relation[c_customer_sk#18,c_customer_id#3,c_current_cdemo_sk#14,c_current_hdemo_sk#16,c_current_addr_sk#7,c_first_shipto_date_sk#19,c_first_sales_date_sk#20,c_salutation#21,c_first_name#5,c_last_name#4,c_preferred_cust_flag#22,c_birth_day#23,c_birth_month#24,c_birth_year#25,c_birth_country#26,c_login#27,c_email_address#28,c_last_review_date#29] parquet
               :     :     :     :     +- Project [ca_address_sk#8]
               :     :     :     :        +- Filter ((isnotnull(ca_city#6) AND (ca_city#6 = Edgewood)) AND isnotnull(ca_address_sk#8))
               :     :     :     :           +- Relation[ca_address_sk#8,ca_address_id#30,ca_street_number#31,ca_street_name#32,ca_street_type#33,ca_suite_number#34,ca_city#6,ca_county#35,ca_state#36,ca_zip#37,ca_country#38,ca_gmt_offset#39,ca_location_type#40] parquet
               :     :     :     +- Project [cd_demo_sk#13]
               :     :     :        +- Filter isnotnull(cd_demo_sk#13)
               :     :     :           +- Relation[cd_demo_sk#13,cd_gender#41,cd_marital_status#42,cd_education_status#43,cd_purchase_estimate#44,cd_credit_rating#45,cd_dep_count#46,cd_dep_employed_count#47,cd_dep_college_count#48] parquet
               :     :     +- Project [hd_demo_sk#15, hd_income_band_sk#12]
               :     :        +- Filter (isnotnull(hd_demo_sk#15) AND isnotnull(hd_income_band_sk#12))
               :     :           +- Relation[hd_demo_sk#15,hd_income_band_sk#12,hd_buy_potential#49,hd_dep_count#50,hd_vehicle_count#51] parquet
               :     +- Project [ib_income_band_sk#11]
               :        +- Filter ((((isnotnull(ib_lower_bound#9) AND isnotnull(ib_upper_bound#10)) AND (ib_lower_bound#9 >= 38128)) AND (ib_upper_bound#10 <= 88128)) AND isnotnull(ib_income_band_sk#11))
               :           +- Relation[ib_income_band_sk#11,ib_lower_bound#9,ib_upper_bound#10] parquet
               +- Project [sr_cdemo_sk#17]
                  +- Filter isnotnull(sr_cdemo_sk#17)
                     +- Relation[sr_returned_date_sk#52,sr_return_time_sk#53,sr_item_sk#54,sr_customer_sk#55,sr_cdemo_sk#17,sr_hdemo_sk#56,sr_addr_sk#57,sr_store_sk#58,sr_reason_sk#59,sr_ticket_number#60,sr_return_quantity#61,sr_return_amt#62,sr_return_tax#63,sr_return_amt_inc_tax#64,sr_fee#65,sr_return_ship_cost#66,sr_refunded_cash#67,sr_reversed_charge#68,sr_store_credit#69,sr_net_loss#70] parquet

== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#3 ASC NULLS FIRST], output=[customer_id#1,customername#2])
+- *(6) Project [c_customer_id#3 AS customer_id#1, concat(c_last_name#4, , , c_first_name#5) AS customername#2, c_customer_id#3]
   +- *(6) BroadcastHashJoin [cast(cd_demo_sk#13 as bigint)], [sr_cdemo_sk#17], Inner, BuildRight, false
      :- *(6) Project [c_customer_id#3, c_first_name#5, c_last_name#4, cd_demo_sk#13]
      :  +- *(6) BroadcastHashJoin [hd_income_band_sk#12], [ib_income_band_sk#11], Inner, BuildRight, false
      :     :- *(6) Project [c_customer_id#3, c_first_name#5, c_last_name#4, cd_demo_sk#13, hd_income_band_sk#12]
      :     :  +- *(6) BroadcastHashJoin [c_current_hdemo_sk#16], [hd_demo_sk#15], Inner, BuildRight, false
      :     :     :- *(6) Project [c_customer_id#3, c_current_hdemo_sk#16, c_first_name#5, c_last_name#4, cd_demo_sk#13]
      :     :     :  +- *(6) BroadcastHashJoin [c_current_cdemo_sk#14], [cd_demo_sk#13], Inner, BuildRight, false
      :     :     :     :- *(6) Project [c_customer_id#3, c_current_cdemo_sk#14, c_current_hdemo_sk#16, c_first_name#5, c_last_name#4]
      :     :     :     :  +- *(6) BroadcastHashJoin [c_current_addr_sk#7], [ca_address_sk#8], Inner, BuildRight, false
      :     :     :     :     :- *(6) Project [c_customer_id#3, c_current_cdemo_sk#14, c_current_hdemo_sk#16, c_current_addr_sk#7, c_first_name#5, c_last_name#4]
      :     :     :     :     :  +- *(6) Filter ((isnotnull(c_current_addr_sk#7) AND isnotnull(c_current_cdemo_sk#14)) AND isnotnull(c_current_hdemo_sk#16))
      :     :     :     :     :     +- *(6) ColumnarToRow
      :     :     :     :     :        +- FileScan parquet tpcds_sf1_parquet_stats.customer[c_customer_id#3,c_current_cdemo_sk#14,c_current_hdemo_sk#16,c_current_addr_sk#7,c_first_name#5,c_last_name#4] Batched: true, DataFilters: [isnotnull(c_current_addr_sk#7), isnotnull(c_current_cdemo_sk#14), isnotnull(c_current_hdemo_sk#..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk)], ReadSchema: struct<c_customer_id:string,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c...
      :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#71]
      :     :     :     :        +- *(1) Project [ca_address_sk#8]
      :     :     :     :           +- *(1) Filter ((isnotnull(ca_city#6) AND (ca_city#6 = Edgewood)) AND isnotnull(ca_address_sk#8))
      :     :     :     :              +- *(1) ColumnarToRow
      :     :     :     :                 +- FileScan parquet tpcds_sf1_parquet_stats.customer_address[ca_address_sk#8,ca_city#6] Batched: true, DataFilters: [isnotnull(ca_city#6), (ca_city#6 = Edgewood), isnotnull(ca_address_sk#8)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ca_city), EqualTo(ca_city,Edgewood), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_city:string>
      :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#72]
      :     :     :        +- *(2) Project [cd_demo_sk#13]
      :     :     :           +- *(2) Filter isnotnull(cd_demo_sk#13)
      :     :     :              +- *(2) ColumnarToRow
      :     :     :                 +- FileScan parquet tpcds_sf1_parquet_stats.customer_demographics[cd_demo_sk#13] Batched: true, DataFilters: [isnotnull(cd_demo_sk#13)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk)], ReadSchema: struct<cd_demo_sk:int>
      :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#73]
      :     :        +- *(3) Project [hd_demo_sk#15, hd_income_band_sk#12]
      :     :           +- *(3) Filter (isnotnull(hd_demo_sk#15) AND isnotnull(hd_income_band_sk#12))
      :     :              +- *(3) ColumnarToRow
      :     :                 +- FileScan parquet tpcds_sf1_parquet_stats.household_demographics[hd_demo_sk#15,hd_income_band_sk#12] Batched: true, DataFilters: [isnotnull(hd_demo_sk#15), isnotnull(hd_income_band_sk#12)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(hd_demo_sk), IsNotNull(hd_income_band_sk)], ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int>
      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#74]
      :        +- *(4) Project [ib_income_band_sk#11]
      :           +- *(4) Filter ((((isnotnull(ib_lower_bound#9) AND isnotnull(ib_upper_bound#10)) AND (ib_lower_bound#9 >= 38128)) AND (ib_upper_bound#10 <= 88128)) AND isnotnull(ib_income_band_sk#11))
      :              +- *(4) ColumnarToRow
      :                 +- FileScan parquet tpcds_sf1_parquet_stats.income_band[ib_income_band_sk#11,ib_lower_bound#9,ib_upper_bound#10] Batched: true, DataFilters: [isnotnull(ib_lower_bound#9), isnotnull(ib_upper_bound#10), (ib_lower_bound#9 >= 38128), ..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ib_lower_bound), IsNotNull(ib_upper_bound), GreaterThanOrEqual(ib_lower_bound,38128), ..., ReadSchema: struct<ib_income_band_sk:int,ib_lower_bound:int,ib_upper_bound:int>
      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#75]
         +- *(5) Project [sr_cdemo_sk#17]
            +- *(5) Filter isnotnull(sr_cdemo_sk#17)
               +- *(5) ColumnarToRow
                  +- FileScan parquet tpcds_sf1_parquet_stats.store_returns[sr_cdemo_sk#17] Batched: true, DataFilters: [isnotnull(sr_cdemo_sk#17)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(sr_cdemo_sk)], ReadSchema: struct<sr_cdemo_sk:bigint>
