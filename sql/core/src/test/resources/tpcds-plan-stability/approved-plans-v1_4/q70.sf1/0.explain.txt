== Parsed Logical Plan ==
'GlobalLimit 100
+- 'LocalLimit 100
   +- 'Sort ['lochierarchy DESC NULLS LAST, CASE WHEN ('lochierarchy = 0) THEN 's_state END ASC NULLS FIRST, 'rank_within_parent ASC NULLS FIRST], true
      +- 'Aggregate ['ROLLUP('s_state, 's_county)], ['sum('ss_net_profit) AS total_sum#1, 's_state, 's_county, ('grouping('s_state) + 'grouping('s_county)) AS lochierarchy#2, 'rank() windowspecdefinition(('grouping('s_state) + 'grouping('s_county)), CASE WHEN ('grouping('s_county) = 0) THEN 's_state END, 'sum('ss_net_profit) DESC NULLS LAST, unspecifiedframe$()) AS rank_within_parent#3]
         +- 'Filter (((('d1.d_month_seq >= 1200) AND ('d1.d_month_seq <= (1200 + 11))) AND ('d1.d_date_sk = 'ss_sold_date_sk)) AND (('s_store_sk = 'ss_store_sk) AND 's_state IN (list#4 [])))
            :  +- 'Project ['s_state]
            :     +- 'Filter ('ranking <= 5)
            :        +- 'SubqueryAlias tmp1
            :           +- 'Aggregate ['s_state], ['s_state AS s_state#5, 'rank() windowspecdefinition('s_state, 'sum('ss_net_profit) DESC NULLS LAST, unspecifiedframe$()) AS ranking#6]
            :              +- 'Filter (((('d_month_seq >= 1200) AND ('d_month_seq <= (1200 + 11))) AND ('d_date_sk = 'ss_sold_date_sk)) AND ('s_store_sk = 'ss_store_sk))
            :                 +- 'Join Inner
            :                    :- 'Join Inner
            :                    :  :- 'UnresolvedRelation [store_sales]
            :                    :  +- 'UnresolvedRelation [store]
            :                    +- 'UnresolvedRelation [date_dim]
            +- 'Join Inner
               :- 'Join Inner
               :  :- 'UnresolvedRelation [store_sales]
               :  +- 'SubqueryAlias d1
               :     +- 'UnresolvedRelation [date_dim]
               +- 'UnresolvedRelation [store]

== Analyzed Logical Plan ==
total_sum: decimal(17,2), s_state: string, s_county: string, lochierarchy: tinyint, rank_within_parent: int
GlobalLimit 100
+- LocalLimit 100
   +- Sort [lochierarchy#2 DESC NULLS LAST, CASE WHEN (cast(lochierarchy#2 as int) = 0) THEN s_state#7 END ASC NULLS FIRST, rank_within_parent#3 ASC NULLS FIRST], true
      +- Project [total_sum#1, s_state#7, s_county#8, lochierarchy#2, rank_within_parent#3]
         +- Project [total_sum#1, s_state#7, s_county#8, lochierarchy#2, _w0#9, _w1#10, _w2#11, _w3#12, rank_within_parent#3, rank_within_parent#3]
            +- Window [rank(_w3#12) windowspecdefinition(_w1#10, _w2#11, _w3#12 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#3], [_w1#10, _w2#11], [_w3#12 DESC NULLS LAST]
               +- Aggregate [s_state#7, s_county#8, spark_grouping_id#13], [sum(ss_net_profit#14) AS total_sum#1, s_state#7, s_county#8, (cast((shiftright(spark_grouping_id#13, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#13, 0) & 1) as tinyint)) AS lochierarchy#2, sum(ss_net_profit#14) AS _w0#9, (cast((shiftright(spark_grouping_id#13, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#13, 0) & 1) as tinyint)) AS _w1#10, CASE WHEN (cast(cast((shiftright(spark_grouping_id#13, 0) & 1) as tinyint) as int) = 0) THEN s_state#7 END AS _w2#11, sum(ss_net_profit#14) AS _w3#12]
                  +- Expand [List(ss_sold_date_sk#15, ss_sold_time_sk#16, ss_item_sk#17, ss_customer_sk#18, ss_cdemo_sk#19, ss_hdemo_sk#20, ss_addr_sk#21, ss_store_sk#22, ss_promo_sk#23, ss_ticket_number#24, ss_quantity#25, ss_wholesale_cost#26, ss_list_price#27, ss_sales_price#28, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#31, ss_ext_list_price#32, ss_ext_tax#33, ss_coupon_amt#34, ss_net_paid#35, ss_net_paid_inc_tax#36, ss_net_profit#14, d_date_sk#37, d_date_id#38, d_date#39, d_month_seq#40, d_week_seq#41, d_quarter_seq#42, d_year#43, d_dow#44, d_moy#45, d_dom#46, d_qoy#47, d_fy_year#48, d_fy_quarter_seq#49, d_fy_week_seq#50, d_day_name#51, d_quarter_name#52, d_holiday#53, d_weekend#54, d_following_holiday#55, d_first_dom#56, d_last_dom#57, d_same_day_ly#58, d_same_day_lq#59, d_current_day#60, d_current_week#61, d_current_month#62, d_current_quarter#63, d_current_year#64, s_store_sk#65, s_store_id#66, s_rec_start_date#67, s_rec_end_date#68, s_closed_date_sk#69, s_store_name#70, s_number_employees#71, s_floor_space#72, s_hours#73, s_manager#74, s_market_id#75, s_geography_class#76, s_market_desc#77, s_market_manager#78, s_division_id#79, s_division_name#80, s_company_id#81, s_company_name#82, s_street_number#83, s_street_name#84, s_street_type#85, s_suite_number#86, s_city#87, s_county#88, s_state#89, s_zip#90, s_country#91, s_gmt_offset#92, s_tax_percentage#93, s_state#94, s_county#95, 0), List(ss_sold_date_sk#15, ss_sold_time_sk#16, ss_item_sk#17, ss_customer_sk#18, ss_cdemo_sk#19, ss_hdemo_sk#20, ss_addr_sk#21, ss_store_sk#22, ss_promo_sk#23, ss_ticket_number#24, ss_quantity#25, ss_wholesale_cost#26, ss_list_price#27, ss_sales_price#28, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#31, ss_ext_list_price#32, ss_ext_tax#33, ss_coupon_amt#34, ss_net_paid#35, ss_net_paid_inc_tax#36, ss_net_profit#14, d_date_sk#37, d_date_id#38, d_date#39, d_month_seq#40, d_week_seq#41, d_quarter_seq#42, d_year#43, d_dow#44, d_moy#45, d_dom#46, d_qoy#47, d_fy_year#48, d_fy_quarter_seq#49, d_fy_week_seq#50, d_day_name#51, d_quarter_name#52, d_holiday#53, d_weekend#54, d_following_holiday#55, d_first_dom#56, d_last_dom#57, d_same_day_ly#58, d_same_day_lq#59, d_current_day#60, d_current_week#61, d_current_month#62, d_current_quarter#63, d_current_year#64, s_store_sk#65, s_store_id#66, s_rec_start_date#67, s_rec_end_date#68, s_closed_date_sk#69, s_store_name#70, s_number_employees#71, s_floor_space#72, s_hours#73, s_manager#74, s_market_id#75, s_geography_class#76, s_market_desc#77, s_market_manager#78, s_division_id#79, s_division_name#80, s_company_id#81, s_company_name#82, s_street_number#83, s_street_name#84, s_street_type#85, s_suite_number#86, s_city#87, s_county#88, s_state#89, s_zip#90, s_country#91, s_gmt_offset#92, s_tax_percentage#93, s_state#94, null, 1), List(ss_sold_date_sk#15, ss_sold_time_sk#16, ss_item_sk#17, ss_customer_sk#18, ss_cdemo_sk#19, ss_hdemo_sk#20, ss_addr_sk#21, ss_store_sk#22, ss_promo_sk#23, ss_ticket_number#24, ss_quantity#25, ss_wholesale_cost#26, ss_list_price#27, ss_sales_price#28, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#31, ss_ext_list_price#32, ss_ext_tax#33, ss_coupon_amt#34, ss_net_paid#35, ss_net_paid_inc_tax#36, ss_net_profit#14, d_date_sk#37, d_date_id#38, d_date#39, d_month_seq#40, d_week_seq#41, d_quarter_seq#42, d_year#43, d_dow#44, d_moy#45, d_dom#46, d_qoy#47, d_fy_year#48, d_fy_quarter_seq#49, d_fy_week_seq#50, d_day_name#51, d_quarter_name#52, d_holiday#53, d_weekend#54, d_following_holiday#55, d_first_dom#56, d_last_dom#57, d_same_day_ly#58, d_same_day_lq#59, d_current_day#60, d_current_week#61, d_current_month#62, d_current_quarter#63, d_current_year#64, s_store_sk#65, s_store_id#66, s_rec_start_date#67, s_rec_end_date#68, s_closed_date_sk#69, s_store_name#70, s_number_employees#71, s_floor_space#72, s_hours#73, s_manager#74, s_market_id#75, s_geography_class#76, s_market_desc#77, s_market_manager#78, s_division_id#79, s_division_name#80, s_company_id#81, s_company_name#82, s_street_number#83, s_street_name#84, s_street_type#85, s_suite_number#86, s_city#87, s_county#88, s_state#89, s_zip#90, s_country#91, s_gmt_offset#92, s_tax_percentage#93, null, null, 3)], [ss_sold_date_sk#15, ss_sold_time_sk#16, ss_item_sk#17, ss_customer_sk#18, ss_cdemo_sk#19, ss_hdemo_sk#20, ss_addr_sk#21, ss_store_sk#22, ss_promo_sk#23, ss_ticket_number#24, ss_quantity#25, ss_wholesale_cost#26, ss_list_price#27, ss_sales_price#28, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#31, ss_ext_list_price#32, ss_ext_tax#33, ss_coupon_amt#34, ss_net_paid#35, ss_net_paid_inc_tax#36, ss_net_profit#14, d_date_sk#37, ... 59 more fields]
                     +- Project [ss_sold_date_sk#15, ss_sold_time_sk#16, ss_item_sk#17, ss_customer_sk#18, ss_cdemo_sk#19, ss_hdemo_sk#20, ss_addr_sk#21, ss_store_sk#22, ss_promo_sk#23, ss_ticket_number#24, ss_quantity#25, ss_wholesale_cost#26, ss_list_price#27, ss_sales_price#28, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#31, ss_ext_list_price#32, ss_ext_tax#33, ss_coupon_amt#34, ss_net_paid#35, ss_net_paid_inc_tax#36, ss_net_profit#14, d_date_sk#37, ... 58 more fields]
                        +- Filter ((((d_month_seq#40 >= 1200) AND (d_month_seq#40 <= (1200 + 11))) AND (d_date_sk#37 = ss_sold_date_sk#15)) AND ((s_store_sk#65 = ss_store_sk#22) AND s_state#89 IN (list#4 [])))
                           :  +- Project [s_state#5]
                           :     +- Filter (ranking#6 <= 5)
                           :        +- SubqueryAlias tmp1
                           :           +- Project [s_state#5, ranking#6]
                           :              +- Project [s_state#5, _w0#96, s_state#89, _w2#97, ranking#6, ranking#6]
                           :                 +- Window [rank(_w2#97) windowspecdefinition(s_state#89, _w2#97 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#6], [s_state#89], [_w2#97 DESC NULLS LAST]
                           :                    +- Aggregate [s_state#89], [s_state#89 AS s_state#5, sum(ss_net_profit#14) AS _w0#96, s_state#89, sum(ss_net_profit#14) AS _w2#97]
                           :                       +- Filter ((((d_month_seq#40 >= 1200) AND (d_month_seq#40 <= (1200 + 11))) AND (d_date_sk#37 = ss_sold_date_sk#15)) AND (s_store_sk#65 = ss_store_sk#22))
                           :                          +- Join Inner
                           :                             :- Join Inner
                           :                             :  :- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.store_sales
                           :                             :  :  +- Relation[ss_sold_date_sk#15,ss_sold_time_sk#16,ss_item_sk#17,ss_customer_sk#18,ss_cdemo_sk#19,ss_hdemo_sk#20,ss_addr_sk#21,ss_store_sk#22,ss_promo_sk#23,ss_ticket_number#24,ss_quantity#25,ss_wholesale_cost#26,ss_list_price#27,ss_sales_price#28,ss_ext_discount_amt#29,ss_ext_sales_price#30,ss_ext_wholesale_cost#31,ss_ext_list_price#32,ss_ext_tax#33,ss_coupon_amt#34,ss_net_paid#35,ss_net_paid_inc_tax#36,ss_net_profit#14] parquet
                           :                             :  +- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.store
                           :                             :     +- Relation[s_store_sk#65,s_store_id#66,s_rec_start_date#67,s_rec_end_date#68,s_closed_date_sk#69,s_store_name#70,s_number_employees#71,s_floor_space#72,s_hours#73,s_manager#74,s_market_id#75,s_geography_class#76,s_market_desc#77,s_market_manager#78,s_division_id#79,s_division_name#80,s_company_id#81,s_company_name#82,s_street_number#83,s_street_name#84,s_street_type#85,s_suite_number#86,s_city#87,s_county#88,... 5 more fields] parquet
                           :                             +- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.date_dim
                           :                                +- Relation[d_date_sk#37,d_date_id#38,d_date#39,d_month_seq#40,d_week_seq#41,d_quarter_seq#42,d_year#43,d_dow#44,d_moy#45,d_dom#46,d_qoy#47,d_fy_year#48,d_fy_quarter_seq#49,d_fy_week_seq#50,d_day_name#51,d_quarter_name#52,d_holiday#53,d_weekend#54,d_following_holiday#55,d_first_dom#56,d_last_dom#57,d_same_day_ly#58,d_same_day_lq#59,d_current_day#60,... 4 more fields] parquet
                           +- Join Inner
                              :- Join Inner
                              :  :- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.store_sales
                              :  :  +- Relation[ss_sold_date_sk#15,ss_sold_time_sk#16,ss_item_sk#17,ss_customer_sk#18,ss_cdemo_sk#19,ss_hdemo_sk#20,ss_addr_sk#21,ss_store_sk#22,ss_promo_sk#23,ss_ticket_number#24,ss_quantity#25,ss_wholesale_cost#26,ss_list_price#27,ss_sales_price#28,ss_ext_discount_amt#29,ss_ext_sales_price#30,ss_ext_wholesale_cost#31,ss_ext_list_price#32,ss_ext_tax#33,ss_coupon_amt#34,ss_net_paid#35,ss_net_paid_inc_tax#36,ss_net_profit#14] parquet
                              :  +- SubqueryAlias d1
                              :     +- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.date_dim
                              :        +- Relation[d_date_sk#37,d_date_id#38,d_date#39,d_month_seq#40,d_week_seq#41,d_quarter_seq#42,d_year#43,d_dow#44,d_moy#45,d_dom#46,d_qoy#47,d_fy_year#48,d_fy_quarter_seq#49,d_fy_week_seq#50,d_day_name#51,d_quarter_name#52,d_holiday#53,d_weekend#54,d_following_holiday#55,d_first_dom#56,d_last_dom#57,d_same_day_ly#58,d_same_day_lq#59,d_current_day#60,... 4 more fields] parquet
                              +- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.store
                                 +- Relation[s_store_sk#65,s_store_id#66,s_rec_start_date#67,s_rec_end_date#68,s_closed_date_sk#69,s_store_name#70,s_number_employees#71,s_floor_space#72,s_hours#73,s_manager#74,s_market_id#75,s_geography_class#76,s_market_desc#77,s_market_manager#78,s_division_id#79,s_division_name#80,s_company_id#81,s_company_name#82,s_street_number#83,s_street_name#84,s_street_type#85,s_suite_number#86,s_city#87,s_county#88,... 5 more fields] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Sort [lochierarchy#2 DESC NULLS LAST, CASE WHEN (cast(lochierarchy#2 as int) = 0) THEN s_state#7 END ASC NULLS FIRST, rank_within_parent#3 ASC NULLS FIRST], true
      +- Project [total_sum#1, s_state#7, s_county#8, lochierarchy#2, rank_within_parent#3]
         +- Window [rank(_w3#12) windowspecdefinition(_w1#10, _w2#11, _w3#12 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#3], [_w1#10, _w2#11], [_w3#12 DESC NULLS LAST]
            +- Aggregate [s_state#7, s_county#8, spark_grouping_id#13], [MakeDecimal(sum(UnscaledValue(ss_net_profit#14)),17,2) AS total_sum#1, s_state#7, s_county#8, (cast((shiftright(spark_grouping_id#13, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#13, 0) & 1) as tinyint)) AS lochierarchy#2, (cast((shiftright(spark_grouping_id#13, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#13, 0) & 1) as tinyint)) AS _w1#10, CASE WHEN (cast(cast((shiftright(spark_grouping_id#13, 0) & 1) as tinyint) as int) = 0) THEN s_state#7 END AS _w2#11, MakeDecimal(sum(UnscaledValue(ss_net_profit#14)),17,2) AS _w3#12]
               +- Expand [List(ss_net_profit#14, s_state#89, s_county#88, 0), List(ss_net_profit#14, s_state#89, null, 1), List(ss_net_profit#14, null, null, 3)], [ss_net_profit#14, s_state#7, s_county#8, spark_grouping_id#13]
                  +- Project [ss_net_profit#14, s_state#89, s_county#88]
                     +- Join Inner, (s_store_sk#65 = ss_store_sk#22)
                        :- Project [ss_store_sk#22, ss_net_profit#14]
                        :  +- Join Inner, (d_date_sk#37 = ss_sold_date_sk#15)
                        :     :- Project [ss_sold_date_sk#15, ss_store_sk#22, ss_net_profit#14]
                        :     :  +- Filter (isnotnull(ss_sold_date_sk#15) AND isnotnull(ss_store_sk#22))
                        :     :     +- Relation[ss_sold_date_sk#15,ss_sold_time_sk#16,ss_item_sk#17,ss_customer_sk#18,ss_cdemo_sk#19,ss_hdemo_sk#20,ss_addr_sk#21,ss_store_sk#22,ss_promo_sk#23,ss_ticket_number#24,ss_quantity#25,ss_wholesale_cost#26,ss_list_price#27,ss_sales_price#28,ss_ext_discount_amt#29,ss_ext_sales_price#30,ss_ext_wholesale_cost#31,ss_ext_list_price#32,ss_ext_tax#33,ss_coupon_amt#34,ss_net_paid#35,ss_net_paid_inc_tax#36,ss_net_profit#14] parquet
                        :     +- Project [d_date_sk#37]
                        :        +- Filter (((isnotnull(d_month_seq#40) AND (d_month_seq#40 >= 1200)) AND (d_month_seq#40 <= 1211)) AND isnotnull(d_date_sk#37))
                        :           +- Relation[d_date_sk#37,d_date_id#38,d_date#39,d_month_seq#40,d_week_seq#41,d_quarter_seq#42,d_year#43,d_dow#44,d_moy#45,d_dom#46,d_qoy#47,d_fy_year#48,d_fy_quarter_seq#49,d_fy_week_seq#50,d_day_name#51,d_quarter_name#52,d_holiday#53,d_weekend#54,d_following_holiday#55,d_first_dom#56,d_last_dom#57,d_same_day_ly#58,d_same_day_lq#59,d_current_day#60,... 4 more fields] parquet
                        +- Join LeftSemi, (s_state#89 = s_state#5)
                           :- Project [s_store_sk#65, s_county#88, s_state#89]
                           :  +- Filter isnotnull(s_store_sk#65)
                           :     +- Relation[s_store_sk#65,s_store_id#66,s_rec_start_date#67,s_rec_end_date#68,s_closed_date_sk#69,s_store_name#70,s_number_employees#71,s_floor_space#72,s_hours#73,s_manager#74,s_market_id#75,s_geography_class#76,s_market_desc#77,s_market_manager#78,s_division_id#79,s_division_name#80,s_company_id#81,s_company_name#82,s_street_number#83,s_street_name#84,s_street_type#85,s_suite_number#86,s_city#87,s_county#88,... 5 more fields] parquet
                           +- Project [s_state#5]
                              +- Filter (isnotnull(ranking#6) AND (ranking#6 <= 5))
                                 +- Window [rank(_w2#97) windowspecdefinition(s_state#89, _w2#97 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#6], [s_state#89], [_w2#97 DESC NULLS LAST]
                                    +- Aggregate [s_state#89], [s_state#89 AS s_state#5, s_state#89, MakeDecimal(sum(UnscaledValue(ss_net_profit#14)),17,2) AS _w2#97]
                                       +- Project [ss_net_profit#14, s_state#89]
                                          +- Join Inner, (d_date_sk#37 = ss_sold_date_sk#15)
                                             :- Project [ss_sold_date_sk#15, ss_net_profit#14, s_state#89]
                                             :  +- Join Inner, (s_store_sk#65 = ss_store_sk#22)
                                             :     :- Project [ss_sold_date_sk#15, ss_store_sk#22, ss_net_profit#14]
                                             :     :  +- Filter (isnotnull(ss_store_sk#22) AND isnotnull(ss_sold_date_sk#15))
                                             :     :     +- Relation[ss_sold_date_sk#15,ss_sold_time_sk#16,ss_item_sk#17,ss_customer_sk#18,ss_cdemo_sk#19,ss_hdemo_sk#20,ss_addr_sk#21,ss_store_sk#22,ss_promo_sk#23,ss_ticket_number#24,ss_quantity#25,ss_wholesale_cost#26,ss_list_price#27,ss_sales_price#28,ss_ext_discount_amt#29,ss_ext_sales_price#30,ss_ext_wholesale_cost#31,ss_ext_list_price#32,ss_ext_tax#33,ss_coupon_amt#34,ss_net_paid#35,ss_net_paid_inc_tax#36,ss_net_profit#14] parquet
                                             :     +- Project [s_store_sk#65, s_state#89]
                                             :        +- Filter isnotnull(s_store_sk#65)
                                             :           +- Relation[s_store_sk#65,s_store_id#66,s_rec_start_date#67,s_rec_end_date#68,s_closed_date_sk#69,s_store_name#70,s_number_employees#71,s_floor_space#72,s_hours#73,s_manager#74,s_market_id#75,s_geography_class#76,s_market_desc#77,s_market_manager#78,s_division_id#79,s_division_name#80,s_company_id#81,s_company_name#82,s_street_number#83,s_street_name#84,s_street_type#85,s_suite_number#86,s_city#87,s_county#88,... 5 more fields] parquet
                                             +- Project [d_date_sk#37]
                                                +- Filter (((isnotnull(d_month_seq#40) AND (d_month_seq#40 >= 1200)) AND (d_month_seq#40 <= 1211)) AND isnotnull(d_date_sk#37))
                                                   +- Relation[d_date_sk#37,d_date_id#38,d_date#39,d_month_seq#40,d_week_seq#41,d_quarter_seq#42,d_year#43,d_dow#44,d_moy#45,d_dom#46,d_qoy#47,d_fy_year#48,d_fy_quarter_seq#49,d_fy_week_seq#50,d_day_name#51,d_quarter_name#52,d_holiday#53,d_weekend#54,d_following_holiday#55,d_first_dom#56,d_last_dom#57,d_same_day_ly#58,d_same_day_lq#59,d_current_day#60,... 4 more fields] parquet

== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[lochierarchy#2 DESC NULLS LAST,CASE WHEN (cast(lochierarchy#2 as int) = 0) THEN s_state#7 END ASC NULLS FIRST,rank_within_parent#3 ASC NULLS FIRST], output=[total_sum#1,s_state#7,s_county#8,lochierarchy#2,rank_within_parent#3])
+- *(14) Project [total_sum#1, s_state#7, s_county#8, lochierarchy#2, rank_within_parent#3]
   +- Window [rank(_w3#12) windowspecdefinition(_w1#10, _w2#11, _w3#12 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#3], [_w1#10, _w2#11], [_w3#12 DESC NULLS LAST]
      +- *(13) Sort [_w1#10 ASC NULLS FIRST, _w2#11 ASC NULLS FIRST, _w3#12 DESC NULLS LAST], false, 0
         +- Exchange hashpartitioning(_w1#10, _w2#11, 5), true, [id=#98]
            +- *(12) HashAggregate(keys=[s_state#7, s_county#8, spark_grouping_id#13], functions=[sum(UnscaledValue(ss_net_profit#14))], output=[total_sum#1, s_state#7, s_county#8, lochierarchy#2, _w1#10, _w2#11, _w3#12])
               +- Exchange hashpartitioning(s_state#7, s_county#8, spark_grouping_id#13, 5), true, [id=#99]
                  +- *(11) HashAggregate(keys=[s_state#7, s_county#8, spark_grouping_id#13], functions=[partial_sum(UnscaledValue(ss_net_profit#14))], output=[s_state#7, s_county#8, spark_grouping_id#13, sum#100])
                     +- *(11) Expand [List(ss_net_profit#14, s_state#89, s_county#88, 0), List(ss_net_profit#14, s_state#89, null, 1), List(ss_net_profit#14, null, null, 3)], [ss_net_profit#14, s_state#7, s_county#8, spark_grouping_id#13]
                        +- *(11) Project [ss_net_profit#14, s_state#89, s_county#88]
                           +- *(11) BroadcastHashJoin [ss_store_sk#22], [s_store_sk#65], Inner, BuildRight, false
                              :- *(11) Project [ss_store_sk#22, ss_net_profit#14]
                              :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#15], [d_date_sk#37], Inner, BuildRight, false
                              :     :- *(11) Project [ss_sold_date_sk#15, ss_store_sk#22, ss_net_profit#14]
                              :     :  +- *(11) Filter (isnotnull(ss_sold_date_sk#15) AND isnotnull(ss_store_sk#22))
                              :     :     +- *(11) ColumnarToRow
                              :     :        +- FileScan parquet tpcds_sf1_parquet_stats.store_sales[ss_sold_date_sk#15,ss_store_sk#22,ss_net_profit#14] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#15), isnotnull(ss_store_sk#22)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>
                              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#101]
                              :        +- *(1) Project [d_date_sk#37]
                              :           +- *(1) Filter (((isnotnull(d_month_seq#40) AND (d_month_seq#40 >= 1200)) AND (d_month_seq#40 <= 1211)) AND isnotnull(d_date_sk#37))
                              :              +- *(1) ColumnarToRow
                              :                 +- FileScan parquet tpcds_sf1_parquet_stats.date_dim[d_date_sk#37,d_month_seq#40] Batched: true, DataFilters: [isnotnull(d_month_seq#40), (d_month_seq#40 >= 1200), (d_month_seq#40 <= 1211), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#102]
                                 +- SortMergeJoin [s_state#89], [s_state#5], LeftSemi
                                    :- *(3) Sort [s_state#89 ASC NULLS FIRST], false, 0
                                    :  +- Exchange hashpartitioning(s_state#89, 5), true, [id=#103]
                                    :     +- *(2) Project [s_store_sk#65, s_county#88, s_state#89]
                                    :        +- *(2) Filter isnotnull(s_store_sk#65)
                                    :           +- *(2) ColumnarToRow
                                    :              +- FileScan parquet tpcds_sf1_parquet_stats.store[s_store_sk#65,s_county#88,s_state#89] Batched: true, DataFilters: [isnotnull(s_store_sk#65)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>
                                    +- *(10) Sort [s_state#5 ASC NULLS FIRST], false, 0
                                       +- Exchange hashpartitioning(s_state#5, 5), true, [id=#104]
                                          +- *(9) Project [s_state#5]
                                             +- *(9) Filter (isnotnull(ranking#6) AND (ranking#6 <= 5))
                                                +- Window [rank(_w2#97) windowspecdefinition(s_state#89, _w2#97 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#6], [s_state#89], [_w2#97 DESC NULLS LAST]
                                                   +- *(8) Sort [s_state#89 ASC NULLS FIRST, _w2#97 DESC NULLS LAST], false, 0
                                                      +- Exchange hashpartitioning(s_state#89, 5), true, [id=#105]
                                                         +- *(7) HashAggregate(keys=[s_state#89], functions=[sum(UnscaledValue(ss_net_profit#14))], output=[s_state#5, s_state#89, _w2#97])
                                                            +- Exchange hashpartitioning(s_state#89, 5), true, [id=#106]
                                                               +- *(6) HashAggregate(keys=[s_state#89], functions=[partial_sum(UnscaledValue(ss_net_profit#14))], output=[s_state#89, sum#107])
                                                                  +- *(6) Project [ss_net_profit#14, s_state#89]
                                                                     +- *(6) BroadcastHashJoin [ss_sold_date_sk#15], [d_date_sk#37], Inner, BuildRight, false
                                                                        :- *(6) Project [ss_sold_date_sk#15, ss_net_profit#14, s_state#89]
                                                                        :  +- *(6) BroadcastHashJoin [ss_store_sk#22], [s_store_sk#65], Inner, BuildRight, false
                                                                        :     :- *(6) Project [ss_sold_date_sk#15, ss_store_sk#22, ss_net_profit#14]
                                                                        :     :  +- *(6) Filter (isnotnull(ss_store_sk#22) AND isnotnull(ss_sold_date_sk#15))
                                                                        :     :     +- *(6) ColumnarToRow
                                                                        :     :        +- FileScan parquet tpcds_sf1_parquet_stats.store_sales[ss_sold_date_sk#15,ss_store_sk#22,ss_net_profit#14] Batched: true, DataFilters: [isnotnull(ss_store_sk#22), isnotnull(ss_sold_date_sk#15)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>
                                                                        :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#108]
                                                                        :        +- *(4) Project [s_store_sk#65, s_state#89]
                                                                        :           +- *(4) Filter isnotnull(s_store_sk#65)
                                                                        :              +- *(4) ColumnarToRow
                                                                        :                 +- FileScan parquet tpcds_sf1_parquet_stats.store[s_store_sk#65,s_state#89] Batched: true, DataFilters: [isnotnull(s_store_sk#65)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>
                                                                        +- ReusedExchange [d_date_sk#37], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#101]
