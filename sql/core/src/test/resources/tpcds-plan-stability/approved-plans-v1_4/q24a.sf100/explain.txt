== Physical Plan ==
* Project (48)
+- * Filter (47)
   +- * HashAggregate (46)
      +- Exchange (45)
         +- * HashAggregate (44)
            +- * HashAggregate (43)
               +- Exchange (42)
                  +- * HashAggregate (41)
                     +- * Project (40)
                        +- * SortMergeJoin Inner (39)
                           :- * Sort (33)
                           :  +- Exchange (32)
                           :     +- * Project (31)
                           :        +- * BroadcastHashJoin Inner BuildRight (30)
                           :           :- * Project (18)
                           :           :  +- * SortMergeJoin Inner (17)
                           :           :     :- * Sort (11)
                           :           :     :  +- Exchange (10)
                           :           :     :     +- * Project (9)
                           :           :     :        +- * BroadcastHashJoin Inner BuildRight (8)
                           :           :     :           :- * Filter (3)
                           :           :     :           :  +- * ColumnarToRow (2)
                           :           :     :           :     +- Scan parquet default.store_sales (1)
                           :           :     :           +- BroadcastExchange (7)
                           :           :     :              +- * Filter (6)
                           :           :     :                 +- * ColumnarToRow (5)
                           :           :     :                    +- Scan parquet default.item (4)
                           :           :     +- * Sort (16)
                           :           :        +- Exchange (15)
                           :           :           +- * Filter (14)
                           :           :              +- * ColumnarToRow (13)
                           :           :                 +- Scan parquet default.customer (12)
                           :           +- BroadcastExchange (29)
                           :              +- * Project (28)
                           :                 +- * BroadcastHashJoin Inner BuildLeft (27)
                           :                    :- BroadcastExchange (23)
                           :                    :  +- * Project (22)
                           :                    :     +- * Filter (21)
                           :                    :        +- * ColumnarToRow (20)
                           :                    :           +- Scan parquet default.store (19)
                           :                    +- * Filter (26)
                           :                       +- * ColumnarToRow (25)
                           :                          +- Scan parquet default.customer_address (24)
                           +- * Sort (38)
                              +- Exchange (37)
                                 +- * Filter (36)
                                    +- * ColumnarToRow (35)
                                       +- Scan parquet default.store_returns (34)


(1) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(3) Filter [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(4) Scan parquet default.item
Output [6]: [i_item_sk#6, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,pale), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(5) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#6, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]

(6) Filter [codegen id : 1]
Input [6]: [i_item_sk#6, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]
Condition : ((isnotnull(i_color#9) AND (i_color#9 = pale)) AND isnotnull(i_item_sk#6))

(7) BroadcastExchange
Input [6]: [i_item_sk#6, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#12]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join condition: None

(9) Project [codegen id : 2]
Output [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]
Input [11]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_item_sk#6, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]

(10) Exchange
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]
Arguments: hashpartitioning(ss_customer_sk#2, 5), true, [id=#13]

(11) Sort [codegen id : 3]
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(12) Scan parquet default.customer
Output [4]: [c_customer_sk#14, c_first_name#15, c_last_name#16, c_birth_country#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(13) ColumnarToRow [codegen id : 4]
Input [4]: [c_customer_sk#14, c_first_name#15, c_last_name#16, c_birth_country#17]

(14) Filter [codegen id : 4]
Input [4]: [c_customer_sk#14, c_first_name#15, c_last_name#16, c_birth_country#17]
Condition : (isnotnull(c_customer_sk#14) AND isnotnull(c_birth_country#17))

(15) Exchange
Input [4]: [c_customer_sk#14, c_first_name#15, c_last_name#16, c_birth_country#17]
Arguments: hashpartitioning(c_customer_sk#14, 5), true, [id=#18]

(16) Sort [codegen id : 5]
Input [4]: [c_customer_sk#14, c_first_name#15, c_last_name#16, c_birth_country#17]
Arguments: [c_customer_sk#14 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#14]
Join condition: None

(18) Project [codegen id : 8]
Output [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, c_birth_country#17]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_customer_sk#14, c_first_name#15, c_last_name#16, c_birth_country#17]

(19) Scan parquet default.store
Output [5]: [s_store_sk#19, s_store_name#20, s_market_id#21, s_state#22, s_zip#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(20) ColumnarToRow [codegen id : 6]
Input [5]: [s_store_sk#19, s_store_name#20, s_market_id#21, s_state#22, s_zip#23]

(21) Filter [codegen id : 6]
Input [5]: [s_store_sk#19, s_store_name#20, s_market_id#21, s_state#22, s_zip#23]
Condition : (((isnotnull(s_market_id#21) AND (s_market_id#21 = 8)) AND isnotnull(s_store_sk#19)) AND isnotnull(s_zip#23))

(22) Project [codegen id : 6]
Output [4]: [s_store_sk#19, s_store_name#20, s_state#22, s_zip#23]
Input [5]: [s_store_sk#19, s_store_name#20, s_market_id#21, s_state#22, s_zip#23]

(23) BroadcastExchange
Input [4]: [s_store_sk#19, s_store_name#20, s_state#22, s_zip#23]
Arguments: HashedRelationBroadcastMode(List(input[3, string, true]),false), [id=#24]

(24) Scan parquet default.customer_address
Output [3]: [ca_state#25, ca_zip#26, ca_country#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_zip), IsNotNull(ca_country)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(25) ColumnarToRow
Input [3]: [ca_state#25, ca_zip#26, ca_country#27]

(26) Filter
Input [3]: [ca_state#25, ca_zip#26, ca_country#27]
Condition : (isnotnull(ca_zip#26) AND isnotnull(ca_country#27))

(27) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [s_zip#23]
Right keys [1]: [ca_zip#26]
Join condition: None

(28) Project [codegen id : 7]
Output [5]: [s_store_sk#19, s_store_name#20, s_state#22, ca_state#25, ca_country#27]
Input [7]: [s_store_sk#19, s_store_name#20, s_state#22, s_zip#23, ca_state#25, ca_zip#26, ca_country#27]

(29) BroadcastExchange
Input [5]: [s_store_sk#19, s_store_name#20, s_state#22, ca_state#25, ca_country#27]
Arguments: HashedRelationBroadcastMode(List(upper(input[4, string, true]), input[0, int, true]),false), [id=#28]

(30) BroadcastHashJoin [codegen id : 8]
Left keys [2]: [c_birth_country#17, ss_store_sk#3]
Right keys [2]: [upper(ca_country#27), s_store_sk#19]
Join condition: None

(31) Project [codegen id : 8]
Output [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, s_store_name#20, s_state#22, ca_state#25]
Input [17]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, c_birth_country#17, s_store_sk#19, s_store_name#20, s_state#22, ca_state#25, ca_country#27]

(32) Exchange
Input [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, s_store_name#20, s_state#22, ca_state#25]
Arguments: hashpartitioning(cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint), 5), true, [id=#29]

(33) Sort [codegen id : 9]
Input [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, s_store_name#20, s_state#22, ca_state#25]
Arguments: [cast(ss_ticket_number#4 as bigint) ASC NULLS FIRST, cast(ss_item_sk#1 as bigint) ASC NULLS FIRST], false, 0

(34) Scan parquet default.store_returns
Output [2]: [sr_item_sk#30, sr_ticket_number#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint>

(35) ColumnarToRow [codegen id : 10]
Input [2]: [sr_item_sk#30, sr_ticket_number#31]

(36) Filter [codegen id : 10]
Input [2]: [sr_item_sk#30, sr_ticket_number#31]
Condition : (isnotnull(sr_ticket_number#31) AND isnotnull(sr_item_sk#30))

(37) Exchange
Input [2]: [sr_item_sk#30, sr_ticket_number#31]
Arguments: hashpartitioning(sr_ticket_number#31, sr_item_sk#30, 5), true, [id=#32]

(38) Sort [codegen id : 11]
Input [2]: [sr_item_sk#30, sr_ticket_number#31]
Arguments: [sr_ticket_number#31 ASC NULLS FIRST, sr_item_sk#30 ASC NULLS FIRST], false, 0

(39) SortMergeJoin [codegen id : 12]
Left keys [2]: [cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint)]
Right keys [2]: [sr_ticket_number#31, sr_item_sk#30]
Join condition: None

(40) Project [codegen id : 12]
Output [11]: [ss_net_paid#5, s_store_name#20, s_state#22, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, ca_state#25]
Input [15]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, s_store_name#20, s_state#22, ca_state#25, sr_item_sk#30, sr_ticket_number#31]

(41) HashAggregate [codegen id : 12]
Input [11]: [ss_net_paid#5, s_store_name#20, s_state#22, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, ca_state#25]
Keys [10]: [c_last_name#16, c_first_name#15, s_store_name#20, ca_state#25, s_state#22, i_color#9, i_current_price#7, i_manager_id#11, i_units#10, i_size#8]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#33]
Results [11]: [c_last_name#16, c_first_name#15, s_store_name#20, ca_state#25, s_state#22, i_color#9, i_current_price#7, i_manager_id#11, i_units#10, i_size#8, sum#34]

(42) Exchange
Input [11]: [c_last_name#16, c_first_name#15, s_store_name#20, ca_state#25, s_state#22, i_color#9, i_current_price#7, i_manager_id#11, i_units#10, i_size#8, sum#34]
Arguments: hashpartitioning(c_last_name#16, c_first_name#15, s_store_name#20, ca_state#25, s_state#22, i_color#9, i_current_price#7, i_manager_id#11, i_units#10, i_size#8, 5), true, [id=#35]

(43) HashAggregate [codegen id : 13]
Input [11]: [c_last_name#16, c_first_name#15, s_store_name#20, ca_state#25, s_state#22, i_color#9, i_current_price#7, i_manager_id#11, i_units#10, i_size#8, sum#34]
Keys [10]: [c_last_name#16, c_first_name#15, s_store_name#20, ca_state#25, s_state#22, i_color#9, i_current_price#7, i_manager_id#11, i_units#10, i_size#8]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#36]
Results [4]: [c_last_name#16, c_first_name#15, s_store_name#20, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#36,17,2) AS netpaid#37]

(44) HashAggregate [codegen id : 13]
Input [4]: [c_last_name#16, c_first_name#15, s_store_name#20, netpaid#37]
Keys [3]: [c_last_name#16, c_first_name#15, s_store_name#20]
Functions [1]: [partial_sum(netpaid#37)]
Aggregate Attributes [2]: [sum#38, isEmpty#39]
Results [5]: [c_last_name#16, c_first_name#15, s_store_name#20, sum#40, isEmpty#41]

(45) Exchange
Input [5]: [c_last_name#16, c_first_name#15, s_store_name#20, sum#40, isEmpty#41]
Arguments: hashpartitioning(c_last_name#16, c_first_name#15, s_store_name#20, 5), true, [id=#42]

(46) HashAggregate [codegen id : 14]
Input [5]: [c_last_name#16, c_first_name#15, s_store_name#20, sum#40, isEmpty#41]
Keys [3]: [c_last_name#16, c_first_name#15, s_store_name#20]
Functions [1]: [sum(netpaid#37)]
Aggregate Attributes [1]: [sum(netpaid#37)#43]
Results [5]: [c_last_name#16, c_first_name#15, s_store_name#20, sum(netpaid#37)#43 AS paid#44, sum(netpaid#37)#43 AS sum(netpaid#37)#45]

(47) Filter [codegen id : 14]
Input [5]: [c_last_name#16, c_first_name#15, s_store_name#20, paid#44, sum(netpaid#37)#45]
Condition : (isnotnull(sum(netpaid#37)#45) AND (cast(sum(netpaid#37)#45 as decimal(33,8)) > cast(Subquery scalar-subquery#46, [id=#47] as decimal(33,8))))

(48) Project [codegen id : 14]
Output [4]: [c_last_name#16, c_first_name#15, s_store_name#20, paid#44]
Input [5]: [c_last_name#16, c_first_name#15, s_store_name#20, paid#44, sum(netpaid#37)#45]

===== Subqueries =====

Subquery:1 Hosting operator id = 47 Hosting Expression = Subquery scalar-subquery#46, [id=#47]
* HashAggregate (94)
+- Exchange (93)
   +- * HashAggregate (92)
      +- * HashAggregate (91)
         +- Exchange (90)
            +- * HashAggregate (89)
               +- * Project (88)
                  +- * SortMergeJoin Inner (87)
                     :- * Sort (84)
                     :  +- Exchange (83)
                     :     +- * Project (82)
                     :        +- * SortMergeJoin Inner (81)
                     :           :- * Sort (75)
                     :           :  +- Exchange (74)
                     :           :     +- * Project (73)
                     :           :        +- * SortMergeJoin Inner (72)
                     :           :           :- * Sort (69)
                     :           :           :  +- Exchange (68)
                     :           :           :     +- * Project (67)
                     :           :           :        +- * SortMergeJoin Inner (66)
                     :           :           :           :- * Sort (60)
                     :           :           :           :  +- Exchange (59)
                     :           :           :           :     +- * Project (58)
                     :           :           :           :        +- * BroadcastHashJoin Inner BuildLeft (57)
                     :           :           :           :           :- BroadcastExchange (53)
                     :           :           :           :           :  +- * Project (52)
                     :           :           :           :           :     +- * Filter (51)
                     :           :           :           :           :        +- * ColumnarToRow (50)
                     :           :           :           :           :           +- Scan parquet default.store (49)
                     :           :           :           :           +- * Filter (56)
                     :           :           :           :              +- * ColumnarToRow (55)
                     :           :           :           :                 +- Scan parquet default.store_sales (54)
                     :           :           :           +- * Sort (65)
                     :           :           :              +- Exchange (64)
                     :           :           :                 +- * Filter (63)
                     :           :           :                    +- * ColumnarToRow (62)
                     :           :           :                       +- Scan parquet default.item (61)
                     :           :           +- * Sort (71)
                     :           :              +- ReusedExchange (70)
                     :           +- * Sort (80)
                     :              +- Exchange (79)
                     :                 +- * Filter (78)
                     :                    +- * ColumnarToRow (77)
                     :                       +- Scan parquet default.customer_address (76)
                     +- * Sort (86)
                        +- ReusedExchange (85)


(49) Scan parquet default.store
Output [5]: [s_store_sk#19, s_store_name#20, s_market_id#21, s_state#22, s_zip#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(50) ColumnarToRow [codegen id : 1]
Input [5]: [s_store_sk#19, s_store_name#20, s_market_id#21, s_state#22, s_zip#23]

(51) Filter [codegen id : 1]
Input [5]: [s_store_sk#19, s_store_name#20, s_market_id#21, s_state#22, s_zip#23]
Condition : (((isnotnull(s_market_id#21) AND (s_market_id#21 = 8)) AND isnotnull(s_store_sk#19)) AND isnotnull(s_zip#23))

(52) Project [codegen id : 1]
Output [4]: [s_store_sk#19, s_store_name#20, s_state#22, s_zip#23]
Input [5]: [s_store_sk#19, s_store_name#20, s_market_id#21, s_state#22, s_zip#23]

(53) BroadcastExchange
Input [4]: [s_store_sk#19, s_store_name#20, s_state#22, s_zip#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#48]

(54) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(55) ColumnarToRow
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(56) Filter
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(57) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [s_store_sk#19]
Right keys [1]: [ss_store_sk#3]
Join condition: None

(58) Project [codegen id : 2]
Output [7]: [s_store_name#20, s_state#22, s_zip#23, ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5]
Input [9]: [s_store_sk#19, s_store_name#20, s_state#22, s_zip#23, ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(59) Exchange
Input [7]: [s_store_name#20, s_state#22, s_zip#23, ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5]
Arguments: hashpartitioning(ss_item_sk#1, 5), true, [id=#49]

(60) Sort [codegen id : 3]
Input [7]: [s_store_name#20, s_state#22, s_zip#23, ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(61) Scan parquet default.item
Output [6]: [i_item_sk#6, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(62) ColumnarToRow [codegen id : 4]
Input [6]: [i_item_sk#6, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]

(63) Filter [codegen id : 4]
Input [6]: [i_item_sk#6, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]
Condition : isnotnull(i_item_sk#6)

(64) Exchange
Input [6]: [i_item_sk#6, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]
Arguments: hashpartitioning(i_item_sk#6, 5), true, [id=#50]

(65) Sort [codegen id : 5]
Input [6]: [i_item_sk#6, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]
Arguments: [i_item_sk#6 ASC NULLS FIRST], false, 0

(66) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join condition: None

(67) Project [codegen id : 6]
Output [12]: [s_store_name#20, s_state#22, s_zip#23, ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]
Input [13]: [s_store_name#20, s_state#22, s_zip#23, ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, i_item_sk#6, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]

(68) Exchange
Input [12]: [s_store_name#20, s_state#22, s_zip#23, ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]
Arguments: hashpartitioning(ss_customer_sk#2, 5), true, [id=#51]

(69) Sort [codegen id : 7]
Input [12]: [s_store_name#20, s_state#22, s_zip#23, ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(70) ReusedExchange [Reuses operator id: 15]
Output [4]: [c_customer_sk#14, c_first_name#15, c_last_name#16, c_birth_country#17]

(71) Sort [codegen id : 9]
Input [4]: [c_customer_sk#14, c_first_name#15, c_last_name#16, c_birth_country#17]
Arguments: [c_customer_sk#14 ASC NULLS FIRST], false, 0

(72) SortMergeJoin [codegen id : 10]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#14]
Join condition: None

(73) Project [codegen id : 10]
Output [14]: [s_store_name#20, s_state#22, s_zip#23, ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, c_birth_country#17]
Input [16]: [s_store_name#20, s_state#22, s_zip#23, ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_customer_sk#14, c_first_name#15, c_last_name#16, c_birth_country#17]

(74) Exchange
Input [14]: [s_store_name#20, s_state#22, s_zip#23, ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, c_birth_country#17]
Arguments: hashpartitioning(c_birth_country#17, s_zip#23, 5), true, [id=#52]

(75) Sort [codegen id : 11]
Input [14]: [s_store_name#20, s_state#22, s_zip#23, ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, c_birth_country#17]
Arguments: [c_birth_country#17 ASC NULLS FIRST, s_zip#23 ASC NULLS FIRST], false, 0

(76) Scan parquet default.customer_address
Output [3]: [ca_state#25, ca_zip#26, ca_country#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(77) ColumnarToRow [codegen id : 12]
Input [3]: [ca_state#25, ca_zip#26, ca_country#27]

(78) Filter [codegen id : 12]
Input [3]: [ca_state#25, ca_zip#26, ca_country#27]
Condition : (isnotnull(ca_country#27) AND isnotnull(ca_zip#26))

(79) Exchange
Input [3]: [ca_state#25, ca_zip#26, ca_country#27]
Arguments: hashpartitioning(upper(ca_country#27), ca_zip#26, 5), true, [id=#53]

(80) Sort [codegen id : 13]
Input [3]: [ca_state#25, ca_zip#26, ca_country#27]
Arguments: [upper(ca_country#27) ASC NULLS FIRST, ca_zip#26 ASC NULLS FIRST], false, 0

(81) SortMergeJoin [codegen id : 14]
Left keys [2]: [c_birth_country#17, s_zip#23]
Right keys [2]: [upper(ca_country#27), ca_zip#26]
Join condition: None

(82) Project [codegen id : 14]
Output [13]: [s_store_name#20, s_state#22, ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, ca_state#25]
Input [17]: [s_store_name#20, s_state#22, s_zip#23, ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, c_birth_country#17, ca_state#25, ca_zip#26, ca_country#27]

(83) Exchange
Input [13]: [s_store_name#20, s_state#22, ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, ca_state#25]
Arguments: hashpartitioning(cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint), 5), true, [id=#54]

(84) Sort [codegen id : 15]
Input [13]: [s_store_name#20, s_state#22, ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, ca_state#25]
Arguments: [cast(ss_ticket_number#4 as bigint) ASC NULLS FIRST, cast(ss_item_sk#1 as bigint) ASC NULLS FIRST], false, 0

(85) ReusedExchange [Reuses operator id: 37]
Output [2]: [sr_item_sk#30, sr_ticket_number#31]

(86) Sort [codegen id : 17]
Input [2]: [sr_item_sk#30, sr_ticket_number#31]
Arguments: [sr_ticket_number#31 ASC NULLS FIRST, sr_item_sk#30 ASC NULLS FIRST], false, 0

(87) SortMergeJoin [codegen id : 18]
Left keys [2]: [cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint)]
Right keys [2]: [sr_ticket_number#31, sr_item_sk#30]
Join condition: None

(88) Project [codegen id : 18]
Output [11]: [ss_net_paid#5, s_store_name#20, s_state#22, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, ca_state#25]
Input [15]: [s_store_name#20, s_state#22, ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, ca_state#25, sr_item_sk#30, sr_ticket_number#31]

(89) HashAggregate [codegen id : 18]
Input [11]: [ss_net_paid#5, s_store_name#20, s_state#22, i_current_price#7, i_size#8, i_color#9, i_units#10, i_manager_id#11, c_first_name#15, c_last_name#16, ca_state#25]
Keys [10]: [c_last_name#16, c_first_name#15, s_store_name#20, ca_state#25, s_state#22, i_color#9, i_current_price#7, i_manager_id#11, i_units#10, i_size#8]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#55]
Results [11]: [c_last_name#16, c_first_name#15, s_store_name#20, ca_state#25, s_state#22, i_color#9, i_current_price#7, i_manager_id#11, i_units#10, i_size#8, sum#56]

(90) Exchange
Input [11]: [c_last_name#16, c_first_name#15, s_store_name#20, ca_state#25, s_state#22, i_color#9, i_current_price#7, i_manager_id#11, i_units#10, i_size#8, sum#56]
Arguments: hashpartitioning(c_last_name#16, c_first_name#15, s_store_name#20, ca_state#25, s_state#22, i_color#9, i_current_price#7, i_manager_id#11, i_units#10, i_size#8, 5), true, [id=#57]

(91) HashAggregate [codegen id : 19]
Input [11]: [c_last_name#16, c_first_name#15, s_store_name#20, ca_state#25, s_state#22, i_color#9, i_current_price#7, i_manager_id#11, i_units#10, i_size#8, sum#56]
Keys [10]: [c_last_name#16, c_first_name#15, s_store_name#20, ca_state#25, s_state#22, i_color#9, i_current_price#7, i_manager_id#11, i_units#10, i_size#8]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#58]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#58,17,2) AS netpaid#37]

(92) HashAggregate [codegen id : 19]
Input [1]: [netpaid#37]
Keys: []
Functions [1]: [partial_avg(netpaid#37)]
Aggregate Attributes [2]: [sum#59, count#60]
Results [2]: [sum#61, count#62]

(93) Exchange
Input [2]: [sum#61, count#62]
Arguments: SinglePartition, true, [id=#63]

(94) HashAggregate [codegen id : 20]
Input [2]: [sum#61, count#62]
Keys: []
Functions [1]: [avg(netpaid#37)]
Aggregate Attributes [1]: [avg(netpaid#37)#64]
Results [1]: [CheckOverflow((0.050000 * promote_precision(avg(netpaid#37)#64)), DecimalType(24,8), true) AS (CAST(0.05 AS DECIMAL(21,6)) * CAST(avg(netpaid) AS DECIMAL(21,6)))#65]


