== Parsed Logical Plan ==
CTE [all_sales]
:  +- 'SubqueryAlias all_sales
:     +- 'Aggregate ['d_year, 'i_brand_id, 'i_class_id, 'i_category_id, 'i_manufact_id], ['d_year, 'i_brand_id, 'i_class_id, 'i_category_id, 'i_manufact_id, 'SUM('sales_cnt) AS sales_cnt#1, 'SUM('sales_amt) AS sales_amt#2]
:        +- 'SubqueryAlias sales_detail
:           +- 'Distinct
:              +- 'Union false, false
:                 :- 'Distinct
:                 :  +- 'Union false, false
:                 :     :- 'Project ['d_year, 'i_brand_id, 'i_class_id, 'i_category_id, 'i_manufact_id, ('cs_quantity - 'COALESCE('cr_return_quantity, 0)) AS sales_cnt#3, ('cs_ext_sales_price - 'COALESCE('cr_return_amount, 0.0)) AS sales_amt#4]
:                 :     :  +- 'Filter ('i_category = Books)
:                 :     :     +- 'Join LeftOuter, (('cs_order_number = 'cr_order_number) AND ('cs_item_sk = 'cr_item_sk))
:                 :     :        :- 'Join Inner, ('d_date_sk = 'cs_sold_date_sk)
:                 :     :        :  :- 'Join Inner, ('i_item_sk = 'cs_item_sk)
:                 :     :        :  :  :- 'UnresolvedRelation [catalog_sales]
:                 :     :        :  :  +- 'UnresolvedRelation [item]
:                 :     :        :  +- 'UnresolvedRelation [date_dim]
:                 :     :        +- 'UnresolvedRelation [catalog_returns]
:                 :     +- 'Project ['d_year, 'i_brand_id, 'i_class_id, 'i_category_id, 'i_manufact_id, ('ss_quantity - 'COALESCE('sr_return_quantity, 0)) AS sales_cnt#5, ('ss_ext_sales_price - 'COALESCE('sr_return_amt, 0.0)) AS sales_amt#6]
:                 :        +- 'Filter ('i_category = Books)
:                 :           +- 'Join LeftOuter, (('ss_ticket_number = 'sr_ticket_number) AND ('ss_item_sk = 'sr_item_sk))
:                 :              :- 'Join Inner, ('d_date_sk = 'ss_sold_date_sk)
:                 :              :  :- 'Join Inner, ('i_item_sk = 'ss_item_sk)
:                 :              :  :  :- 'UnresolvedRelation [store_sales]
:                 :              :  :  +- 'UnresolvedRelation [item]
:                 :              :  +- 'UnresolvedRelation [date_dim]
:                 :              +- 'UnresolvedRelation [store_returns]
:                 +- 'Project ['d_year, 'i_brand_id, 'i_class_id, 'i_category_id, 'i_manufact_id, ('ws_quantity - 'COALESCE('wr_return_quantity, 0)) AS sales_cnt#7, ('ws_ext_sales_price - 'COALESCE('wr_return_amt, 0.0)) AS sales_amt#8]
:                    +- 'Filter ('i_category = Books)
:                       +- 'Join LeftOuter, (('ws_order_number = 'wr_order_number) AND ('ws_item_sk = 'wr_item_sk))
:                          :- 'Join Inner, ('d_date_sk = 'ws_sold_date_sk)
:                          :  :- 'Join Inner, ('i_item_sk = 'ws_item_sk)
:                          :  :  :- 'UnresolvedRelation [web_sales]
:                          :  :  +- 'UnresolvedRelation [item]
:                          :  +- 'UnresolvedRelation [date_dim]
:                          +- 'UnresolvedRelation [web_returns]
+- 'GlobalLimit 100
   +- 'LocalLimit 100
      +- 'Sort ['sales_cnt_diff ASC NULLS FIRST, 'sales_amt_diff ASC NULLS FIRST], true
         +- 'Project ['prev_yr.d_year AS prev_year#9, 'curr_yr.d_year AS year#10, 'curr_yr.i_brand_id, 'curr_yr.i_class_id, 'curr_yr.i_category_id, 'curr_yr.i_manufact_id, 'prev_yr.sales_cnt AS prev_yr_cnt#11, 'curr_yr.sales_cnt AS curr_yr_cnt#12, ('curr_yr.sales_cnt - 'prev_yr.sales_cnt) AS sales_cnt_diff#13, ('curr_yr.sales_amt - 'prev_yr.sales_amt) AS sales_amt_diff#14]
            +- 'Filter (((('curr_yr.i_brand_id = 'prev_yr.i_brand_id) AND ('curr_yr.i_class_id = 'prev_yr.i_class_id)) AND (('curr_yr.i_category_id = 'prev_yr.i_category_id) AND ('curr_yr.i_manufact_id = 'prev_yr.i_manufact_id))) AND ((('curr_yr.d_year = 2002) AND ('prev_yr.d_year = (2002 - 1))) AND ((cast('curr_yr.sales_cnt as decimal(17,2)) / cast('prev_yr.sales_cnt as decimal(17,2))) < 0.9)))
               +- 'Join Inner
                  :- 'SubqueryAlias curr_yr
                  :  +- 'UnresolvedRelation [all_sales]
                  +- 'SubqueryAlias prev_yr
                     +- 'UnresolvedRelation [all_sales]

== Analyzed Logical Plan ==
prev_year: int, year: int, i_brand_id: int, i_class_id: int, i_category_id: int, i_manufact_id: int, prev_yr_cnt: bigint, curr_yr_cnt: bigint, sales_cnt_diff: bigint, sales_amt_diff: decimal(19,2)
GlobalLimit 100
+- LocalLimit 100
   +- Sort [sales_cnt_diff#15 ASC NULLS FIRST, sales_amt_diff#14 ASC NULLS FIRST], true
      +- Project [d_year#16 AS prev_year#9, d_year#17 AS year#10, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#22 AS prev_yr_cnt#23, sales_cnt#24 AS curr_yr_cnt#25, (sales_cnt#24 - sales_cnt#22) AS sales_cnt_diff#15, CheckOverflow((promote_precision(cast(sales_amt#2 as decimal(19,2))) - promote_precision(cast(sales_amt#26 as decimal(19,2)))), DecimalType(19,2), true) AS sales_amt_diff#14]
         +- Filter ((((i_brand_id#18 = i_brand_id#27) AND (i_class_id#19 = i_class_id#28)) AND ((i_category_id#20 = i_category_id#29) AND (i_manufact_id#21 = i_manufact_id#30))) AND (((d_year#17 = 2002) AND (d_year#16 = (2002 - 1))) AND (cast(CheckOverflow((promote_precision(cast(cast(sales_cnt#24 as decimal(17,2)) as decimal(17,2))) / promote_precision(cast(cast(sales_cnt#22 as decimal(17,2)) as decimal(17,2)))), DecimalType(37,20), true) as decimal(37,20)) < cast(0.9 as decimal(37,20)))))
            +- Join Inner
               :- SubqueryAlias curr_yr
               :  +- SubqueryAlias all_sales
               :     +- Aggregate [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21], [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sum(cast(sales_cnt#3 as bigint)) AS sales_cnt#24, sum(sales_amt#4) AS sales_amt#2]
               :        +- SubqueryAlias sales_detail
               :           +- Distinct
               :              +- Union false, false
               :                 :- Project [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#3, sales_amt#4]
               :                 :  +- Distinct
               :                 :     +- Union false, false
               :                 :        :- Project [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#3, sales_amt#4]
               :                 :        :  +- Project [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, (cs_quantity#31 - coalesce(cr_return_quantity#32, 0)) AS sales_cnt#3, CheckOverflow((promote_precision(cast(cs_ext_sales_price#33 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#34, cast(0.0 as decimal(7,2))) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#4]
               :                 :        :     +- Filter (i_category#35 = Books)
               :                 :        :        +- Join LeftOuter, ((cs_order_number#36 = cr_order_number#37) AND (cs_item_sk#38 = cr_item_sk#39))
               :                 :        :           :- Join Inner, (d_date_sk#40 = cs_sold_date_sk#41)
               :                 :        :           :  :- Join Inner, (i_item_sk#42 = cs_item_sk#38)
               :                 :        :           :  :  :- SubqueryAlias spark_catalog.default.catalog_sales
               :                 :        :           :  :  :  +- Relation[cs_sold_date_sk#41,cs_sold_time_sk#43,cs_ship_date_sk#44,cs_bill_customer_sk#45,cs_bill_cdemo_sk#46,cs_bill_hdemo_sk#47,cs_bill_addr_sk#48,cs_ship_customer_sk#49,cs_ship_cdemo_sk#50,cs_ship_hdemo_sk#51,cs_ship_addr_sk#52,cs_call_center_sk#53,cs_catalog_page_sk#54,cs_ship_mode_sk#55,cs_warehouse_sk#56,cs_item_sk#38,cs_promo_sk#57,cs_order_number#36,cs_quantity#31,cs_wholesale_cost#58,cs_list_price#59,cs_sales_price#60,cs_ext_discount_amt#61,cs_ext_sales_price#33,... 10 more fields] parquet
               :                 :        :           :  :  +- SubqueryAlias spark_catalog.default.item
               :                 :        :           :  :     +- Relation[i_item_sk#42,i_item_id#62,i_rec_start_date#63,i_rec_end_date#64,i_item_desc#65,i_current_price#66,i_wholesale_cost#67,i_brand_id#18,i_brand#68,i_class_id#19,i_class#69,i_category_id#20,i_category#35,i_manufact_id#21,i_manufact#70,i_size#71,i_formulation#72,i_color#73,i_units#74,i_container#75,i_manager_id#76,i_product_name#77] parquet
               :                 :        :           :  +- SubqueryAlias spark_catalog.default.date_dim
               :                 :        :           :     +- Relation[d_date_sk#40,d_date_id#78,d_date#79,d_month_seq#80,d_week_seq#81,d_quarter_seq#82,d_year#17,d_dow#83,d_moy#84,d_dom#85,d_qoy#86,d_fy_year#87,d_fy_quarter_seq#88,d_fy_week_seq#89,d_day_name#90,d_quarter_name#91,d_holiday#92,d_weekend#93,d_following_holiday#94,d_first_dom#95,d_last_dom#96,d_same_day_ly#97,d_same_day_lq#98,d_current_day#99,... 4 more fields] parquet
               :                 :        :           +- SubqueryAlias spark_catalog.default.catalog_returns
               :                 :        :              +- Relation[cr_returned_date_sk#100,cr_returned_time_sk#101,cr_item_sk#39,cr_refunded_customer_sk#102,cr_refunded_cdemo_sk#103,cr_refunded_hdemo_sk#104,cr_refunded_addr_sk#105,cr_returning_customer_sk#106,cr_returning_cdemo_sk#107,cr_returning_hdemo_sk#108,cr_returning_addr_sk#109,cr_call_center_sk#110,cr_catalog_page_sk#111,cr_ship_mode_sk#112,cr_warehouse_sk#113,cr_reason_sk#114,cr_order_number#37,cr_return_quantity#32,cr_return_amount#34,cr_return_tax#115,cr_return_amt_inc_tax#116,cr_fee#117,cr_return_ship_cost#118,cr_refunded_cash#119,... 3 more fields] parquet
               :                 :        +- Project [d_year#120, i_brand_id#121, i_class_id#122, i_category_id#123, i_manufact_id#124, sales_cnt#125, cast(sales_amt#126 as decimal(8,2)) AS sales_amt#127]
               :                 :           +- Project [d_year#17 AS d_year#120, i_brand_id#18 AS i_brand_id#121, i_class_id#19 AS i_class_id#122, i_category_id#20 AS i_category_id#123, i_manufact_id#21 AS i_manufact_id#124, sales_cnt#5 AS sales_cnt#125, sales_amt#6 AS sales_amt#126]
               :                 :              +- Project [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, (ss_quantity#128 - coalesce(sr_return_quantity#129, 0)) AS sales_cnt#5, CheckOverflow((promote_precision(cast(ss_ext_sales_price#130 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#131, cast(0.0 as decimal(7,2))) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#6]
               :                 :                 +- Filter (i_category#35 = Books)
               :                 :                    +- Join LeftOuter, ((cast(ss_ticket_number#132 as bigint) = sr_ticket_number#133) AND (cast(ss_item_sk#134 as bigint) = sr_item_sk#135))
               :                 :                       :- Join Inner, (d_date_sk#40 = ss_sold_date_sk#136)
               :                 :                       :  :- Join Inner, (i_item_sk#42 = ss_item_sk#134)
               :                 :                       :  :  :- SubqueryAlias spark_catalog.default.store_sales
               :                 :                       :  :  :  +- Relation[ss_sold_date_sk#136,ss_sold_time_sk#137,ss_item_sk#134,ss_customer_sk#138,ss_cdemo_sk#139,ss_hdemo_sk#140,ss_addr_sk#141,ss_store_sk#142,ss_promo_sk#143,ss_ticket_number#132,ss_quantity#128,ss_wholesale_cost#144,ss_list_price#145,ss_sales_price#146,ss_ext_discount_amt#147,ss_ext_sales_price#130,ss_ext_wholesale_cost#148,ss_ext_list_price#149,ss_ext_tax#150,ss_coupon_amt#151,ss_net_paid#152,ss_net_paid_inc_tax#153,ss_net_profit#154] parquet
               :                 :                       :  :  +- SubqueryAlias spark_catalog.default.item
               :                 :                       :  :     +- Relation[i_item_sk#42,i_item_id#62,i_rec_start_date#63,i_rec_end_date#64,i_item_desc#65,i_current_price#66,i_wholesale_cost#67,i_brand_id#18,i_brand#68,i_class_id#19,i_class#69,i_category_id#20,i_category#35,i_manufact_id#21,i_manufact#70,i_size#71,i_formulation#72,i_color#73,i_units#74,i_container#75,i_manager_id#76,i_product_name#77] parquet
               :                 :                       :  +- SubqueryAlias spark_catalog.default.date_dim
               :                 :                       :     +- Relation[d_date_sk#40,d_date_id#78,d_date#79,d_month_seq#80,d_week_seq#81,d_quarter_seq#82,d_year#17,d_dow#83,d_moy#84,d_dom#85,d_qoy#86,d_fy_year#87,d_fy_quarter_seq#88,d_fy_week_seq#89,d_day_name#90,d_quarter_name#91,d_holiday#92,d_weekend#93,d_following_holiday#94,d_first_dom#95,d_last_dom#96,d_same_day_ly#97,d_same_day_lq#98,d_current_day#99,... 4 more fields] parquet
               :                 :                       +- SubqueryAlias spark_catalog.default.store_returns
               :                 :                          +- Relation[sr_returned_date_sk#155,sr_return_time_sk#156,sr_item_sk#135,sr_customer_sk#157,sr_cdemo_sk#158,sr_hdemo_sk#159,sr_addr_sk#160,sr_store_sk#161,sr_reason_sk#162,sr_ticket_number#133,sr_return_quantity#129,sr_return_amt#131,sr_return_tax#163,sr_return_amt_inc_tax#164,sr_fee#165,sr_return_ship_cost#166,sr_refunded_cash#167,sr_reversed_charge#168,sr_store_credit#169,sr_net_loss#170] parquet
               :                 +- Project [d_year#17 AS d_year#171, i_brand_id#18 AS i_brand_id#172, i_class_id#19 AS i_class_id#173, i_category_id#20 AS i_category_id#174, i_manufact_id#21 AS i_manufact_id#175, sales_cnt#7 AS sales_cnt#176, sales_amt#177 AS sales_amt#178]
               :                    +- Project [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#7, cast(sales_amt#8 as decimal(8,2)) AS sales_amt#177]
               :                       +- Project [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, (ws_quantity#179 - coalesce(wr_return_quantity#180, 0)) AS sales_cnt#7, CheckOverflow((promote_precision(cast(ws_ext_sales_price#181 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#182, cast(0.0 as decimal(7,2))) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#8]
               :                          +- Filter (i_category#35 = Books)
               :                             +- Join LeftOuter, ((cast(ws_order_number#183 as bigint) = wr_order_number#184) AND (cast(ws_item_sk#185 as bigint) = wr_item_sk#186))
               :                                :- Join Inner, (d_date_sk#40 = ws_sold_date_sk#187)
               :                                :  :- Join Inner, (i_item_sk#42 = ws_item_sk#185)
               :                                :  :  :- SubqueryAlias spark_catalog.default.web_sales
               :                                :  :  :  +- Relation[ws_sold_date_sk#187,ws_sold_time_sk#188,ws_ship_date_sk#189,ws_item_sk#185,ws_bill_customer_sk#190,ws_bill_cdemo_sk#191,ws_bill_hdemo_sk#192,ws_bill_addr_sk#193,ws_ship_customer_sk#194,ws_ship_cdemo_sk#195,ws_ship_hdemo_sk#196,ws_ship_addr_sk#197,ws_web_page_sk#198,ws_web_site_sk#199,ws_ship_mode_sk#200,ws_warehouse_sk#201,ws_promo_sk#202,ws_order_number#183,ws_quantity#179,ws_wholesale_cost#203,ws_list_price#204,ws_sales_price#205,ws_ext_discount_amt#206,ws_ext_sales_price#181,... 10 more fields] parquet
               :                                :  :  +- SubqueryAlias spark_catalog.default.item
               :                                :  :     +- Relation[i_item_sk#42,i_item_id#62,i_rec_start_date#63,i_rec_end_date#64,i_item_desc#65,i_current_price#66,i_wholesale_cost#67,i_brand_id#18,i_brand#68,i_class_id#19,i_class#69,i_category_id#20,i_category#35,i_manufact_id#21,i_manufact#70,i_size#71,i_formulation#72,i_color#73,i_units#74,i_container#75,i_manager_id#76,i_product_name#77] parquet
               :                                :  +- SubqueryAlias spark_catalog.default.date_dim
               :                                :     +- Relation[d_date_sk#40,d_date_id#78,d_date#79,d_month_seq#80,d_week_seq#81,d_quarter_seq#82,d_year#17,d_dow#83,d_moy#84,d_dom#85,d_qoy#86,d_fy_year#87,d_fy_quarter_seq#88,d_fy_week_seq#89,d_day_name#90,d_quarter_name#91,d_holiday#92,d_weekend#93,d_following_holiday#94,d_first_dom#95,d_last_dom#96,d_same_day_ly#97,d_same_day_lq#98,d_current_day#99,... 4 more fields] parquet
               :                                +- SubqueryAlias spark_catalog.default.web_returns
               :                                   +- Relation[wr_returned_date_sk#207,wr_returned_time_sk#208,wr_item_sk#186,wr_refunded_customer_sk#209,wr_refunded_cdemo_sk#210,wr_refunded_hdemo_sk#211,wr_refunded_addr_sk#212,wr_returning_customer_sk#213,wr_returning_cdemo_sk#214,wr_returning_hdemo_sk#215,wr_returning_addr_sk#216,wr_web_page_sk#217,wr_reason_sk#218,wr_order_number#184,wr_return_quantity#180,wr_return_amt#182,wr_return_tax#219,wr_return_amt_inc_tax#220,wr_fee#221,wr_return_ship_cost#222,wr_refunded_cash#223,wr_reversed_charge#224,wr_account_credit#225,wr_net_loss#226] parquet
               +- SubqueryAlias prev_yr
                  +- SubqueryAlias all_sales
                     +- Aggregate [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30], [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sum(cast(sales_cnt#3 as bigint)) AS sales_cnt#22, sum(sales_amt#4) AS sales_amt#26]
                        +- SubqueryAlias sales_detail
                           +- Distinct
                              +- Union false, false
                                 :- Project [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#3, sales_amt#4]
                                 :  +- Distinct
                                 :     +- Union false, false
                                 :        :- Project [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#3, sales_amt#4]
                                 :        :  +- Project [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, (cs_quantity#31 - coalesce(cr_return_quantity#32, 0)) AS sales_cnt#3, CheckOverflow((promote_precision(cast(cs_ext_sales_price#33 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#34, cast(0.0 as decimal(7,2))) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#4]
                                 :        :     +- Filter (i_category#227 = Books)
                                 :        :        +- Join LeftOuter, ((cs_order_number#36 = cr_order_number#37) AND (cs_item_sk#38 = cr_item_sk#39))
                                 :        :           :- Join Inner, (d_date_sk#228 = cs_sold_date_sk#41)
                                 :        :           :  :- Join Inner, (i_item_sk#229 = cs_item_sk#38)
                                 :        :           :  :  :- SubqueryAlias spark_catalog.default.catalog_sales
                                 :        :           :  :  :  +- Relation[cs_sold_date_sk#41,cs_sold_time_sk#43,cs_ship_date_sk#44,cs_bill_customer_sk#45,cs_bill_cdemo_sk#46,cs_bill_hdemo_sk#47,cs_bill_addr_sk#48,cs_ship_customer_sk#49,cs_ship_cdemo_sk#50,cs_ship_hdemo_sk#51,cs_ship_addr_sk#52,cs_call_center_sk#53,cs_catalog_page_sk#54,cs_ship_mode_sk#55,cs_warehouse_sk#56,cs_item_sk#38,cs_promo_sk#57,cs_order_number#36,cs_quantity#31,cs_wholesale_cost#58,cs_list_price#59,cs_sales_price#60,cs_ext_discount_amt#61,cs_ext_sales_price#33,... 10 more fields] parquet
                                 :        :           :  :  +- SubqueryAlias spark_catalog.default.item
                                 :        :           :  :     +- Relation[i_item_sk#229,i_item_id#230,i_rec_start_date#231,i_rec_end_date#232,i_item_desc#233,i_current_price#234,i_wholesale_cost#235,i_brand_id#27,i_brand#236,i_class_id#28,i_class#237,i_category_id#29,i_category#227,i_manufact_id#30,i_manufact#238,i_size#239,i_formulation#240,i_color#241,i_units#242,i_container#243,i_manager_id#244,i_product_name#245] parquet
                                 :        :           :  +- SubqueryAlias spark_catalog.default.date_dim
                                 :        :           :     +- Relation[d_date_sk#228,d_date_id#246,d_date#247,d_month_seq#248,d_week_seq#249,d_quarter_seq#250,d_year#16,d_dow#251,d_moy#252,d_dom#253,d_qoy#254,d_fy_year#255,d_fy_quarter_seq#256,d_fy_week_seq#257,d_day_name#258,d_quarter_name#259,d_holiday#260,d_weekend#261,d_following_holiday#262,d_first_dom#263,d_last_dom#264,d_same_day_ly#265,d_same_day_lq#266,d_current_day#267,... 4 more fields] parquet
                                 :        :           +- SubqueryAlias spark_catalog.default.catalog_returns
                                 :        :              +- Relation[cr_returned_date_sk#100,cr_returned_time_sk#101,cr_item_sk#39,cr_refunded_customer_sk#102,cr_refunded_cdemo_sk#103,cr_refunded_hdemo_sk#104,cr_refunded_addr_sk#105,cr_returning_customer_sk#106,cr_returning_cdemo_sk#107,cr_returning_hdemo_sk#108,cr_returning_addr_sk#109,cr_call_center_sk#110,cr_catalog_page_sk#111,cr_ship_mode_sk#112,cr_warehouse_sk#113,cr_reason_sk#114,cr_order_number#37,cr_return_quantity#32,cr_return_amount#34,cr_return_tax#115,cr_return_amt_inc_tax#116,cr_fee#117,cr_return_ship_cost#118,cr_refunded_cash#119,... 3 more fields] parquet
                                 :        +- Project [d_year#268, i_brand_id#269, i_class_id#270, i_category_id#271, i_manufact_id#272, sales_cnt#273, cast(sales_amt#274 as decimal(8,2)) AS sales_amt#275]
                                 :           +- Project [d_year#16 AS d_year#268, i_brand_id#27 AS i_brand_id#269, i_class_id#28 AS i_class_id#270, i_category_id#29 AS i_category_id#271, i_manufact_id#30 AS i_manufact_id#272, sales_cnt#5 AS sales_cnt#273, sales_amt#6 AS sales_amt#274]
                                 :              +- Project [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, (ss_quantity#128 - coalesce(sr_return_quantity#129, 0)) AS sales_cnt#5, CheckOverflow((promote_precision(cast(ss_ext_sales_price#130 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#131, cast(0.0 as decimal(7,2))) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#6]
                                 :                 +- Filter (i_category#227 = Books)
                                 :                    +- Join LeftOuter, ((cast(ss_ticket_number#132 as bigint) = sr_ticket_number#133) AND (cast(ss_item_sk#134 as bigint) = sr_item_sk#135))
                                 :                       :- Join Inner, (d_date_sk#228 = ss_sold_date_sk#136)
                                 :                       :  :- Join Inner, (i_item_sk#229 = ss_item_sk#134)
                                 :                       :  :  :- SubqueryAlias spark_catalog.default.store_sales
                                 :                       :  :  :  +- Relation[ss_sold_date_sk#136,ss_sold_time_sk#137,ss_item_sk#134,ss_customer_sk#138,ss_cdemo_sk#139,ss_hdemo_sk#140,ss_addr_sk#141,ss_store_sk#142,ss_promo_sk#143,ss_ticket_number#132,ss_quantity#128,ss_wholesale_cost#144,ss_list_price#145,ss_sales_price#146,ss_ext_discount_amt#147,ss_ext_sales_price#130,ss_ext_wholesale_cost#148,ss_ext_list_price#149,ss_ext_tax#150,ss_coupon_amt#151,ss_net_paid#152,ss_net_paid_inc_tax#153,ss_net_profit#154] parquet
                                 :                       :  :  +- SubqueryAlias spark_catalog.default.item
                                 :                       :  :     +- Relation[i_item_sk#229,i_item_id#230,i_rec_start_date#231,i_rec_end_date#232,i_item_desc#233,i_current_price#234,i_wholesale_cost#235,i_brand_id#27,i_brand#236,i_class_id#28,i_class#237,i_category_id#29,i_category#227,i_manufact_id#30,i_manufact#238,i_size#239,i_formulation#240,i_color#241,i_units#242,i_container#243,i_manager_id#244,i_product_name#245] parquet
                                 :                       :  +- SubqueryAlias spark_catalog.default.date_dim
                                 :                       :     +- Relation[d_date_sk#228,d_date_id#246,d_date#247,d_month_seq#248,d_week_seq#249,d_quarter_seq#250,d_year#16,d_dow#251,d_moy#252,d_dom#253,d_qoy#254,d_fy_year#255,d_fy_quarter_seq#256,d_fy_week_seq#257,d_day_name#258,d_quarter_name#259,d_holiday#260,d_weekend#261,d_following_holiday#262,d_first_dom#263,d_last_dom#264,d_same_day_ly#265,d_same_day_lq#266,d_current_day#267,... 4 more fields] parquet
                                 :                       +- SubqueryAlias spark_catalog.default.store_returns
                                 :                          +- Relation[sr_returned_date_sk#155,sr_return_time_sk#156,sr_item_sk#135,sr_customer_sk#157,sr_cdemo_sk#158,sr_hdemo_sk#159,sr_addr_sk#160,sr_store_sk#161,sr_reason_sk#162,sr_ticket_number#133,sr_return_quantity#129,sr_return_amt#131,sr_return_tax#163,sr_return_amt_inc_tax#164,sr_fee#165,sr_return_ship_cost#166,sr_refunded_cash#167,sr_reversed_charge#168,sr_store_credit#169,sr_net_loss#170] parquet
                                 +- Project [d_year#16 AS d_year#276, i_brand_id#27 AS i_brand_id#277, i_class_id#28 AS i_class_id#278, i_category_id#29 AS i_category_id#279, i_manufact_id#30 AS i_manufact_id#280, sales_cnt#7 AS sales_cnt#281, sales_amt#282 AS sales_amt#283]
                                    +- Project [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#7, cast(sales_amt#8 as decimal(8,2)) AS sales_amt#282]
                                       +- Project [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, (ws_quantity#179 - coalesce(wr_return_quantity#180, 0)) AS sales_cnt#7, CheckOverflow((promote_precision(cast(ws_ext_sales_price#181 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#182, cast(0.0 as decimal(7,2))) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#8]
                                          +- Filter (i_category#227 = Books)
                                             +- Join LeftOuter, ((cast(ws_order_number#183 as bigint) = wr_order_number#184) AND (cast(ws_item_sk#185 as bigint) = wr_item_sk#186))
                                                :- Join Inner, (d_date_sk#228 = ws_sold_date_sk#187)
                                                :  :- Join Inner, (i_item_sk#229 = ws_item_sk#185)
                                                :  :  :- SubqueryAlias spark_catalog.default.web_sales
                                                :  :  :  +- Relation[ws_sold_date_sk#187,ws_sold_time_sk#188,ws_ship_date_sk#189,ws_item_sk#185,ws_bill_customer_sk#190,ws_bill_cdemo_sk#191,ws_bill_hdemo_sk#192,ws_bill_addr_sk#193,ws_ship_customer_sk#194,ws_ship_cdemo_sk#195,ws_ship_hdemo_sk#196,ws_ship_addr_sk#197,ws_web_page_sk#198,ws_web_site_sk#199,ws_ship_mode_sk#200,ws_warehouse_sk#201,ws_promo_sk#202,ws_order_number#183,ws_quantity#179,ws_wholesale_cost#203,ws_list_price#204,ws_sales_price#205,ws_ext_discount_amt#206,ws_ext_sales_price#181,... 10 more fields] parquet
                                                :  :  +- SubqueryAlias spark_catalog.default.item
                                                :  :     +- Relation[i_item_sk#229,i_item_id#230,i_rec_start_date#231,i_rec_end_date#232,i_item_desc#233,i_current_price#234,i_wholesale_cost#235,i_brand_id#27,i_brand#236,i_class_id#28,i_class#237,i_category_id#29,i_category#227,i_manufact_id#30,i_manufact#238,i_size#239,i_formulation#240,i_color#241,i_units#242,i_container#243,i_manager_id#244,i_product_name#245] parquet
                                                :  +- SubqueryAlias spark_catalog.default.date_dim
                                                :     +- Relation[d_date_sk#228,d_date_id#246,d_date#247,d_month_seq#248,d_week_seq#249,d_quarter_seq#250,d_year#16,d_dow#251,d_moy#252,d_dom#253,d_qoy#254,d_fy_year#255,d_fy_quarter_seq#256,d_fy_week_seq#257,d_day_name#258,d_quarter_name#259,d_holiday#260,d_weekend#261,d_following_holiday#262,d_first_dom#263,d_last_dom#264,d_same_day_ly#265,d_same_day_lq#266,d_current_day#267,... 4 more fields] parquet
                                                +- SubqueryAlias spark_catalog.default.web_returns
                                                   +- Relation[wr_returned_date_sk#207,wr_returned_time_sk#208,wr_item_sk#186,wr_refunded_customer_sk#209,wr_refunded_cdemo_sk#210,wr_refunded_hdemo_sk#211,wr_refunded_addr_sk#212,wr_returning_customer_sk#213,wr_returning_cdemo_sk#214,wr_returning_hdemo_sk#215,wr_returning_addr_sk#216,wr_web_page_sk#217,wr_reason_sk#218,wr_order_number#184,wr_return_quantity#180,wr_return_amt#182,wr_return_tax#219,wr_return_amt_inc_tax#220,wr_fee#221,wr_return_ship_cost#222,wr_refunded_cash#223,wr_reversed_charge#224,wr_account_credit#225,wr_net_loss#226] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Sort [sales_cnt_diff#15 ASC NULLS FIRST, sales_amt_diff#14 ASC NULLS FIRST], true
      +- Project [d_year#16 AS prev_year#9, d_year#17 AS year#10, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#22 AS prev_yr_cnt#23, sales_cnt#24 AS curr_yr_cnt#25, (sales_cnt#24 - sales_cnt#22) AS sales_cnt_diff#15, CheckOverflow((promote_precision(cast(sales_amt#2 as decimal(19,2))) - promote_precision(cast(sales_amt#26 as decimal(19,2)))), DecimalType(19,2), true) AS sales_amt_diff#14]
         +- Join Inner, (((((i_brand_id#18 = i_brand_id#27) AND (i_class_id#19 = i_class_id#28)) AND (i_category_id#20 = i_category_id#29)) AND (i_manufact_id#21 = i_manufact_id#30)) AND (CheckOverflow((promote_precision(cast(sales_cnt#24 as decimal(17,2))) / promote_precision(cast(sales_cnt#22 as decimal(17,2)))), DecimalType(37,20), true) < 0.90000000000000000000))
            :- Aggregate [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21], [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sum(cast(sales_cnt#3 as bigint)) AS sales_cnt#24, MakeDecimal(sum(UnscaledValue(sales_amt#4)),18,2) AS sales_amt#2]
            :  +- Aggregate [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#3, sales_amt#4], [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#3, sales_amt#4]
            :     +- Union false, false
            :        :- Aggregate [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#3, sales_amt#4], [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#3, sales_amt#4]
            :        :  +- Union false, false
            :        :     :- Project [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, (cs_quantity#31 - coalesce(cr_return_quantity#32, 0)) AS sales_cnt#3, CheckOverflow((promote_precision(cast(cs_ext_sales_price#33 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#34, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#4]
            :        :     :  +- Join LeftOuter, ((cs_order_number#36 = cr_order_number#37) AND (cs_item_sk#38 = cr_item_sk#39))
            :        :     :     :- Project [cs_item_sk#38, cs_order_number#36, cs_quantity#31, cs_ext_sales_price#33, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, d_year#17]
            :        :     :     :  +- Join Inner, (d_date_sk#40 = cs_sold_date_sk#41)
            :        :     :     :     :- Project [cs_sold_date_sk#41, cs_item_sk#38, cs_order_number#36, cs_quantity#31, cs_ext_sales_price#33, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21]
            :        :     :     :     :  +- Join Inner, (i_item_sk#42 = cs_item_sk#38)
            :        :     :     :     :     :- Project [cs_sold_date_sk#41, cs_item_sk#38, cs_order_number#36, cs_quantity#31, cs_ext_sales_price#33]
            :        :     :     :     :     :  +- Filter (isnotnull(cs_item_sk#38) AND isnotnull(cs_sold_date_sk#41))
            :        :     :     :     :     :     +- Relation[cs_sold_date_sk#41,cs_sold_time_sk#43,cs_ship_date_sk#44,cs_bill_customer_sk#45,cs_bill_cdemo_sk#46,cs_bill_hdemo_sk#47,cs_bill_addr_sk#48,cs_ship_customer_sk#49,cs_ship_cdemo_sk#50,cs_ship_hdemo_sk#51,cs_ship_addr_sk#52,cs_call_center_sk#53,cs_catalog_page_sk#54,cs_ship_mode_sk#55,cs_warehouse_sk#56,cs_item_sk#38,cs_promo_sk#57,cs_order_number#36,cs_quantity#31,cs_wholesale_cost#58,cs_list_price#59,cs_sales_price#60,cs_ext_discount_amt#61,cs_ext_sales_price#33,... 10 more fields] parquet
            :        :     :     :     :     +- Project [i_item_sk#42, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21]
            :        :     :     :     :        +- Filter ((((((isnotnull(i_category#35) AND (i_category#35 = Books)) AND isnotnull(i_item_sk#42)) AND isnotnull(i_class_id#19)) AND isnotnull(i_brand_id#18)) AND isnotnull(i_category_id#20)) AND isnotnull(i_manufact_id#21))
            :        :     :     :     :           +- Relation[i_item_sk#42,i_item_id#62,i_rec_start_date#63,i_rec_end_date#64,i_item_desc#65,i_current_price#66,i_wholesale_cost#67,i_brand_id#18,i_brand#68,i_class_id#19,i_class#69,i_category_id#20,i_category#35,i_manufact_id#21,i_manufact#70,i_size#71,i_formulation#72,i_color#73,i_units#74,i_container#75,i_manager_id#76,i_product_name#77] parquet
            :        :     :     :     +- Project [d_date_sk#40, d_year#17]
            :        :     :     :        +- Filter ((isnotnull(d_year#17) AND (d_year#17 = 2002)) AND isnotnull(d_date_sk#40))
            :        :     :     :           +- Relation[d_date_sk#40,d_date_id#78,d_date#79,d_month_seq#80,d_week_seq#81,d_quarter_seq#82,d_year#17,d_dow#83,d_moy#84,d_dom#85,d_qoy#86,d_fy_year#87,d_fy_quarter_seq#88,d_fy_week_seq#89,d_day_name#90,d_quarter_name#91,d_holiday#92,d_weekend#93,d_following_holiday#94,d_first_dom#95,d_last_dom#96,d_same_day_ly#97,d_same_day_lq#98,d_current_day#99,... 4 more fields] parquet
            :        :     :     +- Project [cr_item_sk#39, cr_order_number#37, cr_return_quantity#32, cr_return_amount#34]
            :        :     :        +- Filter (isnotnull(cr_item_sk#39) AND isnotnull(cr_order_number#37))
            :        :     :           +- Relation[cr_returned_date_sk#100,cr_returned_time_sk#101,cr_item_sk#39,cr_refunded_customer_sk#102,cr_refunded_cdemo_sk#103,cr_refunded_hdemo_sk#104,cr_refunded_addr_sk#105,cr_returning_customer_sk#106,cr_returning_cdemo_sk#107,cr_returning_hdemo_sk#108,cr_returning_addr_sk#109,cr_call_center_sk#110,cr_catalog_page_sk#111,cr_ship_mode_sk#112,cr_warehouse_sk#113,cr_reason_sk#114,cr_order_number#37,cr_return_quantity#32,cr_return_amount#34,cr_return_tax#115,cr_return_amt_inc_tax#116,cr_fee#117,cr_return_ship_cost#118,cr_refunded_cash#119,... 3 more fields] parquet
            :        :     +- Project [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, (ss_quantity#128 - coalesce(sr_return_quantity#129, 0)) AS sales_cnt#125, CheckOverflow((promote_precision(cast(ss_ext_sales_price#130 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#131, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#127]
            :        :        +- Join LeftOuter, ((cast(ss_ticket_number#132 as bigint) = sr_ticket_number#133) AND (cast(ss_item_sk#134 as bigint) = sr_item_sk#135))
            :        :           :- Project [ss_item_sk#134, ss_ticket_number#132, ss_quantity#128, ss_ext_sales_price#130, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, d_year#17]
            :        :           :  +- Join Inner, (d_date_sk#40 = ss_sold_date_sk#136)
            :        :           :     :- Project [ss_sold_date_sk#136, ss_item_sk#134, ss_ticket_number#132, ss_quantity#128, ss_ext_sales_price#130, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21]
            :        :           :     :  +- Join Inner, (i_item_sk#42 = ss_item_sk#134)
            :        :           :     :     :- Project [ss_sold_date_sk#136, ss_item_sk#134, ss_ticket_number#132, ss_quantity#128, ss_ext_sales_price#130]
            :        :           :     :     :  +- Filter (isnotnull(ss_item_sk#134) AND isnotnull(ss_sold_date_sk#136))
            :        :           :     :     :     +- Relation[ss_sold_date_sk#136,ss_sold_time_sk#137,ss_item_sk#134,ss_customer_sk#138,ss_cdemo_sk#139,ss_hdemo_sk#140,ss_addr_sk#141,ss_store_sk#142,ss_promo_sk#143,ss_ticket_number#132,ss_quantity#128,ss_wholesale_cost#144,ss_list_price#145,ss_sales_price#146,ss_ext_discount_amt#147,ss_ext_sales_price#130,ss_ext_wholesale_cost#148,ss_ext_list_price#149,ss_ext_tax#150,ss_coupon_amt#151,ss_net_paid#152,ss_net_paid_inc_tax#153,ss_net_profit#154] parquet
            :        :           :     :     +- Project [i_item_sk#42, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21]
            :        :           :     :        +- Filter ((((((isnotnull(i_category#35) AND (i_category#35 = Books)) AND isnotnull(i_item_sk#42)) AND isnotnull(i_class_id#19)) AND isnotnull(i_brand_id#18)) AND isnotnull(i_category_id#20)) AND isnotnull(i_manufact_id#21))
            :        :           :     :           +- Relation[i_item_sk#42,i_item_id#62,i_rec_start_date#63,i_rec_end_date#64,i_item_desc#65,i_current_price#66,i_wholesale_cost#67,i_brand_id#18,i_brand#68,i_class_id#19,i_class#69,i_category_id#20,i_category#35,i_manufact_id#21,i_manufact#70,i_size#71,i_formulation#72,i_color#73,i_units#74,i_container#75,i_manager_id#76,i_product_name#77] parquet
            :        :           :     +- Project [d_date_sk#40, d_year#17]
            :        :           :        +- Filter ((isnotnull(d_year#17) AND (d_year#17 = 2002)) AND isnotnull(d_date_sk#40))
            :        :           :           +- Relation[d_date_sk#40,d_date_id#78,d_date#79,d_month_seq#80,d_week_seq#81,d_quarter_seq#82,d_year#17,d_dow#83,d_moy#84,d_dom#85,d_qoy#86,d_fy_year#87,d_fy_quarter_seq#88,d_fy_week_seq#89,d_day_name#90,d_quarter_name#91,d_holiday#92,d_weekend#93,d_following_holiday#94,d_first_dom#95,d_last_dom#96,d_same_day_ly#97,d_same_day_lq#98,d_current_day#99,... 4 more fields] parquet
            :        :           +- Project [sr_item_sk#135, sr_ticket_number#133, sr_return_quantity#129, sr_return_amt#131]
            :        :              +- Filter (isnotnull(sr_item_sk#135) AND isnotnull(sr_ticket_number#133))
            :        :                 +- Relation[sr_returned_date_sk#155,sr_return_time_sk#156,sr_item_sk#135,sr_customer_sk#157,sr_cdemo_sk#158,sr_hdemo_sk#159,sr_addr_sk#160,sr_store_sk#161,sr_reason_sk#162,sr_ticket_number#133,sr_return_quantity#129,sr_return_amt#131,sr_return_tax#163,sr_return_amt_inc_tax#164,sr_fee#165,sr_return_ship_cost#166,sr_refunded_cash#167,sr_reversed_charge#168,sr_store_credit#169,sr_net_loss#170] parquet
            :        +- Project [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, (ws_quantity#179 - coalesce(wr_return_quantity#180, 0)) AS sales_cnt#176, CheckOverflow((promote_precision(cast(ws_ext_sales_price#181 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#182, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#178]
            :           +- Join LeftOuter, ((cast(ws_order_number#183 as bigint) = wr_order_number#184) AND (cast(ws_item_sk#185 as bigint) = wr_item_sk#186))
            :              :- Project [ws_item_sk#185, ws_order_number#183, ws_quantity#179, ws_ext_sales_price#181, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, d_year#17]
            :              :  +- Join Inner, (d_date_sk#40 = ws_sold_date_sk#187)
            :              :     :- Project [ws_sold_date_sk#187, ws_item_sk#185, ws_order_number#183, ws_quantity#179, ws_ext_sales_price#181, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21]
            :              :     :  +- Join Inner, (i_item_sk#42 = ws_item_sk#185)
            :              :     :     :- Project [ws_sold_date_sk#187, ws_item_sk#185, ws_order_number#183, ws_quantity#179, ws_ext_sales_price#181]
            :              :     :     :  +- Filter (isnotnull(ws_item_sk#185) AND isnotnull(ws_sold_date_sk#187))
            :              :     :     :     +- Relation[ws_sold_date_sk#187,ws_sold_time_sk#188,ws_ship_date_sk#189,ws_item_sk#185,ws_bill_customer_sk#190,ws_bill_cdemo_sk#191,ws_bill_hdemo_sk#192,ws_bill_addr_sk#193,ws_ship_customer_sk#194,ws_ship_cdemo_sk#195,ws_ship_hdemo_sk#196,ws_ship_addr_sk#197,ws_web_page_sk#198,ws_web_site_sk#199,ws_ship_mode_sk#200,ws_warehouse_sk#201,ws_promo_sk#202,ws_order_number#183,ws_quantity#179,ws_wholesale_cost#203,ws_list_price#204,ws_sales_price#205,ws_ext_discount_amt#206,ws_ext_sales_price#181,... 10 more fields] parquet
            :              :     :     +- Project [i_item_sk#42, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21]
            :              :     :        +- Filter ((((((isnotnull(i_category#35) AND (i_category#35 = Books)) AND isnotnull(i_item_sk#42)) AND isnotnull(i_class_id#19)) AND isnotnull(i_brand_id#18)) AND isnotnull(i_category_id#20)) AND isnotnull(i_manufact_id#21))
            :              :     :           +- Relation[i_item_sk#42,i_item_id#62,i_rec_start_date#63,i_rec_end_date#64,i_item_desc#65,i_current_price#66,i_wholesale_cost#67,i_brand_id#18,i_brand#68,i_class_id#19,i_class#69,i_category_id#20,i_category#35,i_manufact_id#21,i_manufact#70,i_size#71,i_formulation#72,i_color#73,i_units#74,i_container#75,i_manager_id#76,i_product_name#77] parquet
            :              :     +- Project [d_date_sk#40, d_year#17]
            :              :        +- Filter ((isnotnull(d_year#17) AND (d_year#17 = 2002)) AND isnotnull(d_date_sk#40))
            :              :           +- Relation[d_date_sk#40,d_date_id#78,d_date#79,d_month_seq#80,d_week_seq#81,d_quarter_seq#82,d_year#17,d_dow#83,d_moy#84,d_dom#85,d_qoy#86,d_fy_year#87,d_fy_quarter_seq#88,d_fy_week_seq#89,d_day_name#90,d_quarter_name#91,d_holiday#92,d_weekend#93,d_following_holiday#94,d_first_dom#95,d_last_dom#96,d_same_day_ly#97,d_same_day_lq#98,d_current_day#99,... 4 more fields] parquet
            :              +- Project [wr_item_sk#186, wr_order_number#184, wr_return_quantity#180, wr_return_amt#182]
            :                 +- Filter (isnotnull(wr_item_sk#186) AND isnotnull(wr_order_number#184))
            :                    +- Relation[wr_returned_date_sk#207,wr_returned_time_sk#208,wr_item_sk#186,wr_refunded_customer_sk#209,wr_refunded_cdemo_sk#210,wr_refunded_hdemo_sk#211,wr_refunded_addr_sk#212,wr_returning_customer_sk#213,wr_returning_cdemo_sk#214,wr_returning_hdemo_sk#215,wr_returning_addr_sk#216,wr_web_page_sk#217,wr_reason_sk#218,wr_order_number#184,wr_return_quantity#180,wr_return_amt#182,wr_return_tax#219,wr_return_amt_inc_tax#220,wr_fee#221,wr_return_ship_cost#222,wr_refunded_cash#223,wr_reversed_charge#224,wr_account_credit#225,wr_net_loss#226] parquet
            +- Aggregate [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30], [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sum(cast(sales_cnt#3 as bigint)) AS sales_cnt#22, MakeDecimal(sum(UnscaledValue(sales_amt#4)),18,2) AS sales_amt#26]
               +- Aggregate [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#3, sales_amt#4], [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#3, sales_amt#4]
                  +- Union false, false
                     :- Aggregate [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#3, sales_amt#4], [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#3, sales_amt#4]
                     :  +- Union false, false
                     :     :- Project [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, (cs_quantity#31 - coalesce(cr_return_quantity#32, 0)) AS sales_cnt#3, CheckOverflow((promote_precision(cast(cs_ext_sales_price#33 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#34, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#4]
                     :     :  +- Join LeftOuter, ((cs_order_number#36 = cr_order_number#37) AND (cs_item_sk#38 = cr_item_sk#39))
                     :     :     :- Project [cs_item_sk#38, cs_order_number#36, cs_quantity#31, cs_ext_sales_price#33, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, d_year#16]
                     :     :     :  +- Join Inner, (d_date_sk#228 = cs_sold_date_sk#41)
                     :     :     :     :- Project [cs_sold_date_sk#41, cs_item_sk#38, cs_order_number#36, cs_quantity#31, cs_ext_sales_price#33, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30]
                     :     :     :     :  +- Join Inner, (i_item_sk#229 = cs_item_sk#38)
                     :     :     :     :     :- Project [cs_sold_date_sk#41, cs_item_sk#38, cs_order_number#36, cs_quantity#31, cs_ext_sales_price#33]
                     :     :     :     :     :  +- Filter (isnotnull(cs_item_sk#38) AND isnotnull(cs_sold_date_sk#41))
                     :     :     :     :     :     +- Relation[cs_sold_date_sk#41,cs_sold_time_sk#43,cs_ship_date_sk#44,cs_bill_customer_sk#45,cs_bill_cdemo_sk#46,cs_bill_hdemo_sk#47,cs_bill_addr_sk#48,cs_ship_customer_sk#49,cs_ship_cdemo_sk#50,cs_ship_hdemo_sk#51,cs_ship_addr_sk#52,cs_call_center_sk#53,cs_catalog_page_sk#54,cs_ship_mode_sk#55,cs_warehouse_sk#56,cs_item_sk#38,cs_promo_sk#57,cs_order_number#36,cs_quantity#31,cs_wholesale_cost#58,cs_list_price#59,cs_sales_price#60,cs_ext_discount_amt#61,cs_ext_sales_price#33,... 10 more fields] parquet
                     :     :     :     :     +- Project [i_item_sk#229, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30]
                     :     :     :     :        +- Filter ((((((isnotnull(i_category#227) AND (i_category#227 = Books)) AND isnotnull(i_item_sk#229)) AND isnotnull(i_class_id#28)) AND isnotnull(i_brand_id#27)) AND isnotnull(i_manufact_id#30)) AND isnotnull(i_category_id#29))
                     :     :     :     :           +- Relation[i_item_sk#229,i_item_id#230,i_rec_start_date#231,i_rec_end_date#232,i_item_desc#233,i_current_price#234,i_wholesale_cost#235,i_brand_id#27,i_brand#236,i_class_id#28,i_class#237,i_category_id#29,i_category#227,i_manufact_id#30,i_manufact#238,i_size#239,i_formulation#240,i_color#241,i_units#242,i_container#243,i_manager_id#244,i_product_name#245] parquet
                     :     :     :     +- Project [d_date_sk#228, d_year#16]
                     :     :     :        +- Filter ((isnotnull(d_year#16) AND (d_year#16 = 2001)) AND isnotnull(d_date_sk#228))
                     :     :     :           +- Relation[d_date_sk#228,d_date_id#246,d_date#247,d_month_seq#248,d_week_seq#249,d_quarter_seq#250,d_year#16,d_dow#251,d_moy#252,d_dom#253,d_qoy#254,d_fy_year#255,d_fy_quarter_seq#256,d_fy_week_seq#257,d_day_name#258,d_quarter_name#259,d_holiday#260,d_weekend#261,d_following_holiday#262,d_first_dom#263,d_last_dom#264,d_same_day_ly#265,d_same_day_lq#266,d_current_day#267,... 4 more fields] parquet
                     :     :     +- Project [cr_item_sk#39, cr_order_number#37, cr_return_quantity#32, cr_return_amount#34]
                     :     :        +- Filter (isnotnull(cr_item_sk#39) AND isnotnull(cr_order_number#37))
                     :     :           +- Relation[cr_returned_date_sk#100,cr_returned_time_sk#101,cr_item_sk#39,cr_refunded_customer_sk#102,cr_refunded_cdemo_sk#103,cr_refunded_hdemo_sk#104,cr_refunded_addr_sk#105,cr_returning_customer_sk#106,cr_returning_cdemo_sk#107,cr_returning_hdemo_sk#108,cr_returning_addr_sk#109,cr_call_center_sk#110,cr_catalog_page_sk#111,cr_ship_mode_sk#112,cr_warehouse_sk#113,cr_reason_sk#114,cr_order_number#37,cr_return_quantity#32,cr_return_amount#34,cr_return_tax#115,cr_return_amt_inc_tax#116,cr_fee#117,cr_return_ship_cost#118,cr_refunded_cash#119,... 3 more fields] parquet
                     :     +- Project [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, (ss_quantity#128 - coalesce(sr_return_quantity#129, 0)) AS sales_cnt#273, CheckOverflow((promote_precision(cast(ss_ext_sales_price#130 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#131, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#275]
                     :        +- Join LeftOuter, ((cast(ss_ticket_number#132 as bigint) = sr_ticket_number#133) AND (cast(ss_item_sk#134 as bigint) = sr_item_sk#135))
                     :           :- Project [ss_item_sk#134, ss_ticket_number#132, ss_quantity#128, ss_ext_sales_price#130, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, d_year#16]
                     :           :  +- Join Inner, (d_date_sk#228 = ss_sold_date_sk#136)
                     :           :     :- Project [ss_sold_date_sk#136, ss_item_sk#134, ss_ticket_number#132, ss_quantity#128, ss_ext_sales_price#130, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30]
                     :           :     :  +- Join Inner, (i_item_sk#229 = ss_item_sk#134)
                     :           :     :     :- Project [ss_sold_date_sk#136, ss_item_sk#134, ss_ticket_number#132, ss_quantity#128, ss_ext_sales_price#130]
                     :           :     :     :  +- Filter (isnotnull(ss_item_sk#134) AND isnotnull(ss_sold_date_sk#136))
                     :           :     :     :     +- Relation[ss_sold_date_sk#136,ss_sold_time_sk#137,ss_item_sk#134,ss_customer_sk#138,ss_cdemo_sk#139,ss_hdemo_sk#140,ss_addr_sk#141,ss_store_sk#142,ss_promo_sk#143,ss_ticket_number#132,ss_quantity#128,ss_wholesale_cost#144,ss_list_price#145,ss_sales_price#146,ss_ext_discount_amt#147,ss_ext_sales_price#130,ss_ext_wholesale_cost#148,ss_ext_list_price#149,ss_ext_tax#150,ss_coupon_amt#151,ss_net_paid#152,ss_net_paid_inc_tax#153,ss_net_profit#154] parquet
                     :           :     :     +- Project [i_item_sk#229, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30]
                     :           :     :        +- Filter ((((((isnotnull(i_category#227) AND (i_category#227 = Books)) AND isnotnull(i_item_sk#229)) AND isnotnull(i_class_id#28)) AND isnotnull(i_brand_id#27)) AND isnotnull(i_manufact_id#30)) AND isnotnull(i_category_id#29))
                     :           :     :           +- Relation[i_item_sk#229,i_item_id#230,i_rec_start_date#231,i_rec_end_date#232,i_item_desc#233,i_current_price#234,i_wholesale_cost#235,i_brand_id#27,i_brand#236,i_class_id#28,i_class#237,i_category_id#29,i_category#227,i_manufact_id#30,i_manufact#238,i_size#239,i_formulation#240,i_color#241,i_units#242,i_container#243,i_manager_id#244,i_product_name#245] parquet
                     :           :     +- Project [d_date_sk#228, d_year#16]
                     :           :        +- Filter ((isnotnull(d_year#16) AND (d_year#16 = 2001)) AND isnotnull(d_date_sk#228))
                     :           :           +- Relation[d_date_sk#228,d_date_id#246,d_date#247,d_month_seq#248,d_week_seq#249,d_quarter_seq#250,d_year#16,d_dow#251,d_moy#252,d_dom#253,d_qoy#254,d_fy_year#255,d_fy_quarter_seq#256,d_fy_week_seq#257,d_day_name#258,d_quarter_name#259,d_holiday#260,d_weekend#261,d_following_holiday#262,d_first_dom#263,d_last_dom#264,d_same_day_ly#265,d_same_day_lq#266,d_current_day#267,... 4 more fields] parquet
                     :           +- Project [sr_item_sk#135, sr_ticket_number#133, sr_return_quantity#129, sr_return_amt#131]
                     :              +- Filter (isnotnull(sr_item_sk#135) AND isnotnull(sr_ticket_number#133))
                     :                 +- Relation[sr_returned_date_sk#155,sr_return_time_sk#156,sr_item_sk#135,sr_customer_sk#157,sr_cdemo_sk#158,sr_hdemo_sk#159,sr_addr_sk#160,sr_store_sk#161,sr_reason_sk#162,sr_ticket_number#133,sr_return_quantity#129,sr_return_amt#131,sr_return_tax#163,sr_return_amt_inc_tax#164,sr_fee#165,sr_return_ship_cost#166,sr_refunded_cash#167,sr_reversed_charge#168,sr_store_credit#169,sr_net_loss#170] parquet
                     +- Project [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, (ws_quantity#179 - coalesce(wr_return_quantity#180, 0)) AS sales_cnt#281, CheckOverflow((promote_precision(cast(ws_ext_sales_price#181 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#182, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#283]
                        +- Join LeftOuter, ((cast(ws_order_number#183 as bigint) = wr_order_number#184) AND (cast(ws_item_sk#185 as bigint) = wr_item_sk#186))
                           :- Project [ws_item_sk#185, ws_order_number#183, ws_quantity#179, ws_ext_sales_price#181, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, d_year#16]
                           :  +- Join Inner, (d_date_sk#228 = ws_sold_date_sk#187)
                           :     :- Project [ws_sold_date_sk#187, ws_item_sk#185, ws_order_number#183, ws_quantity#179, ws_ext_sales_price#181, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30]
                           :     :  +- Join Inner, (i_item_sk#229 = ws_item_sk#185)
                           :     :     :- Project [ws_sold_date_sk#187, ws_item_sk#185, ws_order_number#183, ws_quantity#179, ws_ext_sales_price#181]
                           :     :     :  +- Filter (isnotnull(ws_item_sk#185) AND isnotnull(ws_sold_date_sk#187))
                           :     :     :     +- Relation[ws_sold_date_sk#187,ws_sold_time_sk#188,ws_ship_date_sk#189,ws_item_sk#185,ws_bill_customer_sk#190,ws_bill_cdemo_sk#191,ws_bill_hdemo_sk#192,ws_bill_addr_sk#193,ws_ship_customer_sk#194,ws_ship_cdemo_sk#195,ws_ship_hdemo_sk#196,ws_ship_addr_sk#197,ws_web_page_sk#198,ws_web_site_sk#199,ws_ship_mode_sk#200,ws_warehouse_sk#201,ws_promo_sk#202,ws_order_number#183,ws_quantity#179,ws_wholesale_cost#203,ws_list_price#204,ws_sales_price#205,ws_ext_discount_amt#206,ws_ext_sales_price#181,... 10 more fields] parquet
                           :     :     +- Project [i_item_sk#229, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30]
                           :     :        +- Filter ((((((isnotnull(i_category#227) AND (i_category#227 = Books)) AND isnotnull(i_item_sk#229)) AND isnotnull(i_class_id#28)) AND isnotnull(i_brand_id#27)) AND isnotnull(i_manufact_id#30)) AND isnotnull(i_category_id#29))
                           :     :           +- Relation[i_item_sk#229,i_item_id#230,i_rec_start_date#231,i_rec_end_date#232,i_item_desc#233,i_current_price#234,i_wholesale_cost#235,i_brand_id#27,i_brand#236,i_class_id#28,i_class#237,i_category_id#29,i_category#227,i_manufact_id#30,i_manufact#238,i_size#239,i_formulation#240,i_color#241,i_units#242,i_container#243,i_manager_id#244,i_product_name#245] parquet
                           :     +- Project [d_date_sk#228, d_year#16]
                           :        +- Filter ((isnotnull(d_year#16) AND (d_year#16 = 2001)) AND isnotnull(d_date_sk#228))
                           :           +- Relation[d_date_sk#228,d_date_id#246,d_date#247,d_month_seq#248,d_week_seq#249,d_quarter_seq#250,d_year#16,d_dow#251,d_moy#252,d_dom#253,d_qoy#254,d_fy_year#255,d_fy_quarter_seq#256,d_fy_week_seq#257,d_day_name#258,d_quarter_name#259,d_holiday#260,d_weekend#261,d_following_holiday#262,d_first_dom#263,d_last_dom#264,d_same_day_ly#265,d_same_day_lq#266,d_current_day#267,... 4 more fields] parquet
                           +- Project [wr_item_sk#186, wr_order_number#184, wr_return_quantity#180, wr_return_amt#182]
                              +- Filter (isnotnull(wr_item_sk#186) AND isnotnull(wr_order_number#184))
                                 +- Relation[wr_returned_date_sk#207,wr_returned_time_sk#208,wr_item_sk#186,wr_refunded_customer_sk#209,wr_refunded_cdemo_sk#210,wr_refunded_hdemo_sk#211,wr_refunded_addr_sk#212,wr_returning_customer_sk#213,wr_returning_cdemo_sk#214,wr_returning_hdemo_sk#215,wr_returning_addr_sk#216,wr_web_page_sk#217,wr_reason_sk#218,wr_order_number#184,wr_return_quantity#180,wr_return_amt#182,wr_return_tax#219,wr_return_amt_inc_tax#220,wr_fee#221,wr_return_ship_cost#222,wr_refunded_cash#223,wr_reversed_charge#224,wr_account_credit#225,wr_net_loss#226] parquet

== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[sales_cnt_diff#15 ASC NULLS FIRST,sales_amt_diff#14 ASC NULLS FIRST], output=[prev_year#9,year#10,i_brand_id#18,i_class_id#19,i_category_id#20,i_manufact_id#21,prev_yr_cnt#23,curr_yr_cnt#25,sales_cnt_diff#15,sales_amt_diff#14])
+- *(55) Project [d_year#16 AS prev_year#9, d_year#17 AS year#10, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#22 AS prev_yr_cnt#23, sales_cnt#24 AS curr_yr_cnt#25, (sales_cnt#24 - sales_cnt#22) AS sales_cnt_diff#15, CheckOverflow((promote_precision(cast(sales_amt#2 as decimal(19,2))) - promote_precision(cast(sales_amt#26 as decimal(19,2)))), DecimalType(19,2), true) AS sales_amt_diff#14]
   +- *(55) SortMergeJoin [i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21], [i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30], Inner, (CheckOverflow((promote_precision(cast(sales_cnt#24 as decimal(17,2))) / promote_precision(cast(sales_cnt#22 as decimal(17,2)))), DecimalType(37,20), true) < 0.90000000000000000000)
      :- *(27) Sort [i_brand_id#18 ASC NULLS FIRST, i_class_id#19 ASC NULLS FIRST, i_category_id#20 ASC NULLS FIRST, i_manufact_id#21 ASC NULLS FIRST], false, 0
      :  +- Exchange hashpartitioning(i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, 5), true, [id=#284]
      :     +- *(26) HashAggregate(keys=[d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21], functions=[sum(cast(sales_cnt#3 as bigint)), sum(UnscaledValue(sales_amt#4))], output=[d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#24, sales_amt#2])
      :        +- Exchange hashpartitioning(d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, 5), true, [id=#285]
      :           +- *(25) HashAggregate(keys=[d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21], functions=[partial_sum(cast(sales_cnt#3 as bigint)), partial_sum(UnscaledValue(sales_amt#4))], output=[d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sum#286, sum#287])
      :              +- *(25) HashAggregate(keys=[d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#3, sales_amt#4], functions=[], output=[d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#3, sales_amt#4])
      :                 +- Exchange hashpartitioning(d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#3, sales_amt#4, 5), true, [id=#288]
      :                    +- *(24) HashAggregate(keys=[d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#3, sales_amt#4], functions=[], output=[d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#3, sales_amt#4])
      :                       +- Union
      :                          :- *(16) HashAggregate(keys=[d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#3, sales_amt#4], functions=[], output=[d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#3, sales_amt#4])
      :                          :  +- Exchange hashpartitioning(d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#3, sales_amt#4, 5), true, [id=#289]
      :                          :     +- *(15) HashAggregate(keys=[d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#3, sales_amt#4], functions=[], output=[d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, sales_cnt#3, sales_amt#4])
      :                          :        +- Union
      :                          :           :- *(7) Project [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, (cs_quantity#31 - coalesce(cr_return_quantity#32, 0)) AS sales_cnt#3, CheckOverflow((promote_precision(cast(cs_ext_sales_price#33 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#34, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#4]
      :                          :           :  +- SortMergeJoin [cs_order_number#36, cs_item_sk#38], [cr_order_number#37, cr_item_sk#39], LeftOuter
      :                          :           :     :- *(4) Sort [cs_order_number#36 ASC NULLS FIRST, cs_item_sk#38 ASC NULLS FIRST], false, 0
      :                          :           :     :  +- Exchange hashpartitioning(cs_order_number#36, cs_item_sk#38, 5), true, [id=#290]
      :                          :           :     :     +- *(3) Project [cs_item_sk#38, cs_order_number#36, cs_quantity#31, cs_ext_sales_price#33, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, d_year#17]
      :                          :           :     :        +- *(3) BroadcastHashJoin [cs_sold_date_sk#41], [d_date_sk#40], Inner, BuildRight, false
      :                          :           :     :           :- *(3) Project [cs_sold_date_sk#41, cs_item_sk#38, cs_order_number#36, cs_quantity#31, cs_ext_sales_price#33, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21]
      :                          :           :     :           :  +- *(3) BroadcastHashJoin [cs_item_sk#38], [i_item_sk#42], Inner, BuildRight, false
      :                          :           :     :           :     :- *(3) Filter (isnotnull(cs_item_sk#38) AND isnotnull(cs_sold_date_sk#41))
      :                          :           :     :           :     :  +- *(3) ColumnarToRow
      :                          :           :     :           :     :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#41,cs_item_sk#38,cs_order_number#36,cs_quantity#31,cs_ext_sales_price#33] Batched: true, DataFilters: [isnotnull(cs_item_sk#38), isnotnull(cs_sold_date_sk#41)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_ext_sales_price:...
      :                          :           :     :           :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#291]
      :                          :           :     :           :        +- *(1) Project [i_item_sk#42, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21]
      :                          :           :     :           :           +- *(1) Filter ((((((isnotnull(i_category#35) AND (i_category#35 = Books)) AND isnotnull(i_item_sk#42)) AND isnotnull(i_class_id#19)) AND isnotnull(i_brand_id#18)) AND isnotnull(i_category_id#20)) AND isnotnull(i_manufact_id#21))
      :                          :           :     :           :              +- *(1) ColumnarToRow
      :                          :           :     :           :                 +- FileScan parquet default.item[i_item_sk#42,i_brand_id#18,i_class_id#19,i_category_id#20,i_category#35,i_manufact_id#21] Batched: true, DataFilters: [isnotnull(i_category#35), (i_category#35 = Books), isnotnull(i_item_sk#42), isnotnull(i..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books), IsNotNull(i_item_sk), IsNotNull(i_class_id), I..., ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact...
      :                          :           :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#292]
      :                          :           :     :              +- *(2) Filter ((isnotnull(d_year#17) AND (d_year#17 = 2002)) AND isnotnull(d_date_sk#40))
      :                          :           :     :                 +- *(2) ColumnarToRow
      :                          :           :     :                    +- FileScan parquet default.date_dim[d_date_sk#40,d_year#17] Batched: true, DataFilters: [isnotnull(d_year#17), (d_year#17 = 2002), isnotnull(d_date_sk#40)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :                          :           :     +- *(6) Sort [cr_order_number#37 ASC NULLS FIRST, cr_item_sk#39 ASC NULLS FIRST], false, 0
      :                          :           :        +- Exchange hashpartitioning(cr_order_number#37, cr_item_sk#39, 5), true, [id=#293]
      :                          :           :           +- *(5) Filter (isnotnull(cr_item_sk#39) AND isnotnull(cr_order_number#37))
      :                          :           :              +- *(5) ColumnarToRow
      :                          :           :                 +- FileScan parquet default.catalog_returns[cr_item_sk#39,cr_order_number#37,cr_return_quantity#32,cr_return_amount#34] Batched: true, DataFilters: [isnotnull(cr_item_sk#39), isnotnull(cr_order_number#37)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)], ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2)>
      :                          :           +- *(14) Project [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, (ss_quantity#128 - coalesce(sr_return_quantity#129, 0)) AS sales_cnt#125, CheckOverflow((promote_precision(cast(ss_ext_sales_price#130 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#131, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#127]
      :                          :              +- SortMergeJoin [cast(ss_ticket_number#132 as bigint), cast(ss_item_sk#134 as bigint)], [sr_ticket_number#133, sr_item_sk#135], LeftOuter
      :                          :                 :- *(11) Sort [cast(ss_ticket_number#132 as bigint) ASC NULLS FIRST, cast(ss_item_sk#134 as bigint) ASC NULLS FIRST], false, 0
      :                          :                 :  +- Exchange hashpartitioning(cast(ss_ticket_number#132 as bigint), cast(ss_item_sk#134 as bigint), 5), true, [id=#294]
      :                          :                 :     +- *(10) Project [ss_item_sk#134, ss_ticket_number#132, ss_quantity#128, ss_ext_sales_price#130, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, d_year#17]
      :                          :                 :        +- *(10) BroadcastHashJoin [ss_sold_date_sk#136], [d_date_sk#40], Inner, BuildRight, false
      :                          :                 :           :- *(10) Project [ss_sold_date_sk#136, ss_item_sk#134, ss_ticket_number#132, ss_quantity#128, ss_ext_sales_price#130, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21]
      :                          :                 :           :  +- *(10) BroadcastHashJoin [ss_item_sk#134], [i_item_sk#42], Inner, BuildRight, false
      :                          :                 :           :     :- *(10) Filter (isnotnull(ss_item_sk#134) AND isnotnull(ss_sold_date_sk#136))
      :                          :                 :           :     :  +- *(10) ColumnarToRow
      :                          :                 :           :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#136,ss_item_sk#134,ss_ticket_number#132,ss_quantity#128,ss_ext_sales_price#130] Batched: true, DataFilters: [isnotnull(ss_item_sk#134), isnotnull(ss_sold_date_sk#136)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_ext_sales_price...
      :                          :                 :           :     +- ReusedExchange [i_item_sk#42, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#291]
      :                          :                 :           +- ReusedExchange [d_date_sk#40, d_year#17], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#292]
      :                          :                 +- *(13) Sort [sr_ticket_number#133 ASC NULLS FIRST, sr_item_sk#135 ASC NULLS FIRST], false, 0
      :                          :                    +- Exchange hashpartitioning(sr_ticket_number#133, sr_item_sk#135, 5), true, [id=#295]
      :                          :                       +- *(12) Filter (isnotnull(sr_item_sk#135) AND isnotnull(sr_ticket_number#133))
      :                          :                          +- *(12) ColumnarToRow
      :                          :                             +- FileScan parquet default.store_returns[sr_item_sk#135,sr_ticket_number#133,sr_return_quantity#129,sr_return_amt#131] Batched: true, DataFilters: [isnotnull(sr_item_sk#135), isnotnull(sr_ticket_number#133)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint,sr_return_quantity:int,sr_return_amt:decimal(7,2)>
      :                          +- *(23) Project [d_year#17, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, (ws_quantity#179 - coalesce(wr_return_quantity#180, 0)) AS sales_cnt#176, CheckOverflow((promote_precision(cast(ws_ext_sales_price#181 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#182, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#178]
      :                             +- SortMergeJoin [cast(ws_order_number#183 as bigint), cast(ws_item_sk#185 as bigint)], [wr_order_number#184, wr_item_sk#186], LeftOuter
      :                                :- *(20) Sort [cast(ws_order_number#183 as bigint) ASC NULLS FIRST, cast(ws_item_sk#185 as bigint) ASC NULLS FIRST], false, 0
      :                                :  +- Exchange hashpartitioning(cast(ws_order_number#183 as bigint), cast(ws_item_sk#185 as bigint), 5), true, [id=#296]
      :                                :     +- *(19) Project [ws_item_sk#185, ws_order_number#183, ws_quantity#179, ws_ext_sales_price#181, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21, d_year#17]
      :                                :        +- *(19) BroadcastHashJoin [ws_sold_date_sk#187], [d_date_sk#40], Inner, BuildRight, false
      :                                :           :- *(19) Project [ws_sold_date_sk#187, ws_item_sk#185, ws_order_number#183, ws_quantity#179, ws_ext_sales_price#181, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21]
      :                                :           :  +- *(19) BroadcastHashJoin [ws_item_sk#185], [i_item_sk#42], Inner, BuildRight, false
      :                                :           :     :- *(19) Filter (isnotnull(ws_item_sk#185) AND isnotnull(ws_sold_date_sk#187))
      :                                :           :     :  +- *(19) ColumnarToRow
      :                                :           :     :     +- FileScan parquet default.web_sales[ws_sold_date_sk#187,ws_item_sk#185,ws_order_number#183,ws_quantity#179,ws_ext_sales_price#181] Batched: true, DataFilters: [isnotnull(ws_item_sk#185), isnotnull(ws_sold_date_sk#187)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_ext_sales_price:...
      :                                :           :     +- ReusedExchange [i_item_sk#42, i_brand_id#18, i_class_id#19, i_category_id#20, i_manufact_id#21], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#291]
      :                                :           +- ReusedExchange [d_date_sk#40, d_year#17], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#292]
      :                                +- *(22) Sort [wr_order_number#184 ASC NULLS FIRST, wr_item_sk#186 ASC NULLS FIRST], false, 0
      :                                   +- Exchange hashpartitioning(wr_order_number#184, wr_item_sk#186, 5), true, [id=#297]
      :                                      +- *(21) Filter (isnotnull(wr_item_sk#186) AND isnotnull(wr_order_number#184))
      :                                         +- *(21) ColumnarToRow
      :                                            +- FileScan parquet default.web_returns[wr_item_sk#186,wr_order_number#184,wr_return_quantity#180,wr_return_amt#182] Batched: true, DataFilters: [isnotnull(wr_item_sk#186), isnotnull(wr_order_number#184)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)], ReadSchema: struct<wr_item_sk:bigint,wr_order_number:bigint,wr_return_quantity:int,wr_return_amt:decimal(7,2)>
      +- *(54) Sort [i_brand_id#27 ASC NULLS FIRST, i_class_id#28 ASC NULLS FIRST, i_category_id#29 ASC NULLS FIRST, i_manufact_id#30 ASC NULLS FIRST], false, 0
         +- Exchange hashpartitioning(i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, 5), true, [id=#298]
            +- *(53) HashAggregate(keys=[d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30], functions=[sum(cast(sales_cnt#3 as bigint)), sum(UnscaledValue(sales_amt#4))], output=[d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#22, sales_amt#26])
               +- Exchange hashpartitioning(d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, 5), true, [id=#299]
                  +- *(52) HashAggregate(keys=[d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30], functions=[partial_sum(cast(sales_cnt#3 as bigint)), partial_sum(UnscaledValue(sales_amt#4))], output=[d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sum#300, sum#301])
                     +- *(52) HashAggregate(keys=[d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#3, sales_amt#4], functions=[], output=[d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#3, sales_amt#4])
                        +- Exchange hashpartitioning(d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#3, sales_amt#4, 5), true, [id=#302]
                           +- *(51) HashAggregate(keys=[d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#3, sales_amt#4], functions=[], output=[d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#3, sales_amt#4])
                              +- Union
                                 :- *(43) HashAggregate(keys=[d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#3, sales_amt#4], functions=[], output=[d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#3, sales_amt#4])
                                 :  +- Exchange hashpartitioning(d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#3, sales_amt#4, 5), true, [id=#303]
                                 :     +- *(42) HashAggregate(keys=[d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#3, sales_amt#4], functions=[], output=[d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, sales_cnt#3, sales_amt#4])
                                 :        +- Union
                                 :           :- *(34) Project [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, (cs_quantity#31 - coalesce(cr_return_quantity#32, 0)) AS sales_cnt#3, CheckOverflow((promote_precision(cast(cs_ext_sales_price#33 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#34, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#4]
                                 :           :  +- SortMergeJoin [cs_order_number#36, cs_item_sk#38], [cr_order_number#37, cr_item_sk#39], LeftOuter
                                 :           :     :- *(31) Sort [cs_order_number#36 ASC NULLS FIRST, cs_item_sk#38 ASC NULLS FIRST], false, 0
                                 :           :     :  +- Exchange hashpartitioning(cs_order_number#36, cs_item_sk#38, 5), true, [id=#304]
                                 :           :     :     +- *(30) Project [cs_item_sk#38, cs_order_number#36, cs_quantity#31, cs_ext_sales_price#33, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, d_year#16]
                                 :           :     :        +- *(30) BroadcastHashJoin [cs_sold_date_sk#41], [d_date_sk#228], Inner, BuildRight, false
                                 :           :     :           :- *(30) Project [cs_sold_date_sk#41, cs_item_sk#38, cs_order_number#36, cs_quantity#31, cs_ext_sales_price#33, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30]
                                 :           :     :           :  +- *(30) BroadcastHashJoin [cs_item_sk#38], [i_item_sk#229], Inner, BuildRight, false
                                 :           :     :           :     :- *(30) Filter (isnotnull(cs_item_sk#38) AND isnotnull(cs_sold_date_sk#41))
                                 :           :     :           :     :  +- *(30) ColumnarToRow
                                 :           :     :           :     :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#41,cs_item_sk#38,cs_order_number#36,cs_quantity#31,cs_ext_sales_price#33] Batched: true, DataFilters: [isnotnull(cs_item_sk#38), isnotnull(cs_sold_date_sk#41)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_ext_sales_price:...
                                 :           :     :           :     +- ReusedExchange [i_item_sk#229, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#291]
                                 :           :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#305]
                                 :           :     :              +- *(29) Filter ((isnotnull(d_year#16) AND (d_year#16 = 2001)) AND isnotnull(d_date_sk#228))
                                 :           :     :                 +- *(29) ColumnarToRow
                                 :           :     :                    +- FileScan parquet default.date_dim[d_date_sk#228,d_year#16] Batched: true, DataFilters: [isnotnull(d_year#16), (d_year#16 = 2001), isnotnull(d_date_sk#228)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                 :           :     +- *(33) Sort [cr_order_number#37 ASC NULLS FIRST, cr_item_sk#39 ASC NULLS FIRST], false, 0
                                 :           :        +- ReusedExchange [cr_item_sk#39, cr_order_number#37, cr_return_quantity#32, cr_return_amount#34], Exchange hashpartitioning(cr_order_number#37, cr_item_sk#39, 5), true, [id=#293]
                                 :           +- *(41) Project [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, (ss_quantity#128 - coalesce(sr_return_quantity#129, 0)) AS sales_cnt#273, CheckOverflow((promote_precision(cast(ss_ext_sales_price#130 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#131, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#275]
                                 :              +- SortMergeJoin [cast(ss_ticket_number#132 as bigint), cast(ss_item_sk#134 as bigint)], [sr_ticket_number#133, sr_item_sk#135], LeftOuter
                                 :                 :- *(38) Sort [cast(ss_ticket_number#132 as bigint) ASC NULLS FIRST, cast(ss_item_sk#134 as bigint) ASC NULLS FIRST], false, 0
                                 :                 :  +- Exchange hashpartitioning(cast(ss_ticket_number#132 as bigint), cast(ss_item_sk#134 as bigint), 5), true, [id=#306]
                                 :                 :     +- *(37) Project [ss_item_sk#134, ss_ticket_number#132, ss_quantity#128, ss_ext_sales_price#130, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, d_year#16]
                                 :                 :        +- *(37) BroadcastHashJoin [ss_sold_date_sk#136], [d_date_sk#228], Inner, BuildRight, false
                                 :                 :           :- *(37) Project [ss_sold_date_sk#136, ss_item_sk#134, ss_ticket_number#132, ss_quantity#128, ss_ext_sales_price#130, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30]
                                 :                 :           :  +- *(37) BroadcastHashJoin [ss_item_sk#134], [i_item_sk#229], Inner, BuildRight, false
                                 :                 :           :     :- *(37) Filter (isnotnull(ss_item_sk#134) AND isnotnull(ss_sold_date_sk#136))
                                 :                 :           :     :  +- *(37) ColumnarToRow
                                 :                 :           :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#136,ss_item_sk#134,ss_ticket_number#132,ss_quantity#128,ss_ext_sales_price#130] Batched: true, DataFilters: [isnotnull(ss_item_sk#134), isnotnull(ss_sold_date_sk#136)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_ext_sales_price...
                                 :                 :           :     +- ReusedExchange [i_item_sk#229, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#291]
                                 :                 :           +- ReusedExchange [d_date_sk#228, d_year#16], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#305]
                                 :                 +- *(40) Sort [sr_ticket_number#133 ASC NULLS FIRST, sr_item_sk#135 ASC NULLS FIRST], false, 0
                                 :                    +- ReusedExchange [sr_item_sk#135, sr_ticket_number#133, sr_return_quantity#129, sr_return_amt#131], Exchange hashpartitioning(sr_ticket_number#133, sr_item_sk#135, 5), true, [id=#295]
                                 +- *(50) Project [d_year#16, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, (ws_quantity#179 - coalesce(wr_return_quantity#180, 0)) AS sales_cnt#281, CheckOverflow((promote_precision(cast(ws_ext_sales_price#181 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#182, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#283]
                                    +- SortMergeJoin [cast(ws_order_number#183 as bigint), cast(ws_item_sk#185 as bigint)], [wr_order_number#184, wr_item_sk#186], LeftOuter
                                       :- *(47) Sort [cast(ws_order_number#183 as bigint) ASC NULLS FIRST, cast(ws_item_sk#185 as bigint) ASC NULLS FIRST], false, 0
                                       :  +- Exchange hashpartitioning(cast(ws_order_number#183 as bigint), cast(ws_item_sk#185 as bigint), 5), true, [id=#307]
                                       :     +- *(46) Project [ws_item_sk#185, ws_order_number#183, ws_quantity#179, ws_ext_sales_price#181, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30, d_year#16]
                                       :        +- *(46) BroadcastHashJoin [ws_sold_date_sk#187], [d_date_sk#228], Inner, BuildRight, false
                                       :           :- *(46) Project [ws_sold_date_sk#187, ws_item_sk#185, ws_order_number#183, ws_quantity#179, ws_ext_sales_price#181, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30]
                                       :           :  +- *(46) BroadcastHashJoin [ws_item_sk#185], [i_item_sk#229], Inner, BuildRight, false
                                       :           :     :- *(46) Filter (isnotnull(ws_item_sk#185) AND isnotnull(ws_sold_date_sk#187))
                                       :           :     :  +- *(46) ColumnarToRow
                                       :           :     :     +- FileScan parquet default.web_sales[ws_sold_date_sk#187,ws_item_sk#185,ws_order_number#183,ws_quantity#179,ws_ext_sales_price#181] Batched: true, DataFilters: [isnotnull(ws_item_sk#185), isnotnull(ws_sold_date_sk#187)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_ext_sales_price:...
                                       :           :     +- ReusedExchange [i_item_sk#229, i_brand_id#27, i_class_id#28, i_category_id#29, i_manufact_id#30], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#291]
                                       :           +- ReusedExchange [d_date_sk#228, d_year#16], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#305]
                                       +- *(49) Sort [wr_order_number#184 ASC NULLS FIRST, wr_item_sk#186 ASC NULLS FIRST], false, 0
                                          +- ReusedExchange [wr_item_sk#186, wr_order_number#184, wr_return_quantity#180, wr_return_amt#182], Exchange hashpartitioning(wr_order_number#184, wr_item_sk#186, 5), true, [id=#297]
