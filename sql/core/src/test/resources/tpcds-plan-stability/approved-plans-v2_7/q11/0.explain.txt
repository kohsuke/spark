== Parsed Logical Plan ==
CTE [year_total]
:  +- 'SubqueryAlias year_total
:     +- 'Union
:        :- 'Aggregate ['c_customer_id, 'c_first_name, 'c_last_name, 'd_year, 'c_preferred_cust_flag, 'c_birth_country, 'c_login, 'c_email_address, 'd_year], ['c_customer_id AS customer_id#1, 'c_first_name AS customer_first_name#2, 'c_last_name AS customer_last_name#3, 'c_preferred_cust_flag AS customer_preferred_cust_flag#4, 'c_birth_country AS customer_birth_country#5, 'c_login AS customer_login#6, 'c_email_address AS customer_email_address#7, 'd_year AS dyear#8, 'sum(('ss_ext_list_price - 'ss_ext_discount_amt)) AS year_total#9, s AS sale_type#10]
:        :  +- 'Filter (('c_customer_sk = 'ss_customer_sk) AND ('ss_sold_date_sk = 'd_date_sk))
:        :     +- 'Join Inner
:        :        :- 'Join Inner
:        :        :  :- 'UnresolvedRelation [customer]
:        :        :  +- 'UnresolvedRelation [store_sales]
:        :        +- 'UnresolvedRelation [date_dim]
:        +- 'Aggregate ['c_customer_id, 'c_first_name, 'c_last_name, 'c_preferred_cust_flag, 'c_birth_country, 'c_login, 'c_email_address, 'd_year], ['c_customer_id AS customer_id#11, 'c_first_name AS customer_first_name#12, 'c_last_name AS customer_last_name#13, 'c_preferred_cust_flag AS customer_preferred_cust_flag#14, 'c_birth_country AS customer_birth_country#15, 'c_login AS customer_login#16, 'c_email_address AS customer_email_address#17, 'd_year AS dyear#18, 'sum(('ws_ext_list_price - 'ws_ext_discount_amt)) AS year_total#19, w AS sale_type#20]
:           +- 'Filter (('c_customer_sk = 'ws_bill_customer_sk) AND ('ws_sold_date_sk = 'd_date_sk))
:              +- 'Join Inner
:                 :- 'Join Inner
:                 :  :- 'UnresolvedRelation [customer]
:                 :  +- 'UnresolvedRelation [web_sales]
:                 +- 'UnresolvedRelation [date_dim]
+- 'GlobalLimit 100
   +- 'LocalLimit 100
      +- 'Sort ['t_s_secyear.customer_id ASC NULLS FIRST, 't_s_secyear.customer_first_name ASC NULLS FIRST, 't_s_secyear.customer_last_name ASC NULLS FIRST, 't_s_secyear.customer_email_address ASC NULLS FIRST], true
         +- 'Project ['t_s_secyear.customer_id, 't_s_secyear.customer_first_name, 't_s_secyear.customer_last_name, 't_s_secyear.customer_email_address]
            +- 'Filter ((((('t_s_secyear.customer_id = 't_s_firstyear.customer_id) AND ('t_s_firstyear.customer_id = 't_w_secyear.customer_id)) AND (('t_s_firstyear.customer_id = 't_w_firstyear.customer_id) AND ('t_s_firstyear.sale_type = s))) AND ((('t_w_firstyear.sale_type = w) AND ('t_s_secyear.sale_type = s)) AND ('t_w_secyear.sale_type = w))) AND (((('t_s_firstyear.dyear = 2001) AND ('t_s_secyear.dyear = (2001 + 1))) AND (('t_w_firstyear.dyear = 2001) AND ('t_w_secyear.dyear = (2001 + 1)))) AND ((('t_s_firstyear.year_total > 0) AND ('t_w_firstyear.year_total > 0)) AND (CASE WHEN ('t_w_firstyear.year_total > 0) THEN ('t_w_secyear.year_total / 't_w_firstyear.year_total) ELSE 0.0 END > CASE WHEN ('t_s_firstyear.year_total > 0) THEN ('t_s_secyear.year_total / 't_s_firstyear.year_total) ELSE 0.0 END))))
               +- 'Join Inner
                  :- 'Join Inner
                  :  :- 'Join Inner
                  :  :  :- 'SubqueryAlias t_s_firstyear
                  :  :  :  +- 'UnresolvedRelation [year_total]
                  :  :  +- 'SubqueryAlias t_s_secyear
                  :  :     +- 'UnresolvedRelation [year_total]
                  :  +- 'SubqueryAlias t_w_firstyear
                  :     +- 'UnresolvedRelation [year_total]
                  +- 'SubqueryAlias t_w_secyear
                     +- 'UnresolvedRelation [year_total]

== Analyzed Logical Plan ==
customer_id: string, customer_first_name: string, customer_last_name: string, customer_email_address: string
GlobalLimit 100
+- LocalLimit 100
   +- Sort [customer_id#21 ASC NULLS FIRST, customer_first_name#22 ASC NULLS FIRST, customer_last_name#23 ASC NULLS FIRST, customer_email_address#24 ASC NULLS FIRST], true
      +- Project [customer_id#21, customer_first_name#22, customer_last_name#23, customer_email_address#24]
         +- Filter (((((customer_id#21 = customer_id#1) AND (customer_id#1 = customer_id#25)) AND ((customer_id#1 = customer_id#26) AND (sale_type#10 = s))) AND (((sale_type#27 = w) AND (sale_type#28 = s)) AND (sale_type#29 = w))) AND ((((dyear#8 = 2001) AND (dyear#30 = (2001 + 1))) AND ((dyear#31 = 2001) AND (dyear#32 = (2001 + 1)))) AND (((cast(year_total#9 as decimal(18,2)) > cast(cast(0 as decimal(1,0)) as decimal(18,2))) AND (cast(year_total#33 as decimal(18,2)) > cast(cast(0 as decimal(1,0)) as decimal(18,2)))) AND (CASE WHEN (cast(year_total#33 as decimal(18,2)) > cast(cast(0 as decimal(1,0)) as decimal(18,2))) THEN CheckOverflow((promote_precision(cast(year_total#34 as decimal(18,2))) / promote_precision(cast(year_total#33 as decimal(18,2)))), DecimalType(38,20), true) ELSE cast(0.0 as decimal(38,20)) END > CASE WHEN (cast(year_total#9 as decimal(18,2)) > cast(cast(0 as decimal(1,0)) as decimal(18,2))) THEN CheckOverflow((promote_precision(cast(year_total#35 as decimal(18,2))) / promote_precision(cast(year_total#9 as decimal(18,2)))), DecimalType(38,20), true) ELSE cast(0.0 as decimal(38,20)) END))))
            +- Join Inner
               :- Join Inner
               :  :- Join Inner
               :  :  :- SubqueryAlias t_s_firstyear
               :  :  :  +- SubqueryAlias year_total
               :  :  :     +- Union
               :  :  :        :- Aggregate [c_customer_id#36, c_first_name#37, c_last_name#38, d_year#39, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39], [c_customer_id#36 AS customer_id#1, c_first_name#37 AS customer_first_name#2, c_last_name#38 AS customer_last_name#3, c_preferred_cust_flag#40 AS customer_preferred_cust_flag#4, c_birth_country#41 AS customer_birth_country#5, c_login#42 AS customer_login#6, c_email_address#43 AS customer_email_address#7, d_year#39 AS dyear#8, sum(CheckOverflow((promote_precision(cast(ss_ext_list_price#44 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#45 as decimal(8,2)))), DecimalType(8,2), true)) AS year_total#9, s AS sale_type#10]
               :  :  :        :  +- Filter ((c_customer_sk#46 = ss_customer_sk#47) AND (ss_sold_date_sk#48 = d_date_sk#49))
               :  :  :        :     +- Join Inner
               :  :  :        :        :- Join Inner
               :  :  :        :        :  :- SubqueryAlias spark_catalog.default.customer
               :  :  :        :        :  :  +- Relation[c_customer_sk#46,c_customer_id#36,c_current_cdemo_sk#50,c_current_hdemo_sk#51,c_current_addr_sk#52,c_first_shipto_date_sk#53,c_first_sales_date_sk#54,c_salutation#55,c_first_name#37,c_last_name#38,c_preferred_cust_flag#40,c_birth_day#56,c_birth_month#57,c_birth_year#58,c_birth_country#41,c_login#42,c_email_address#43,c_last_review_date#59] parquet
               :  :  :        :        :  +- SubqueryAlias spark_catalog.default.store_sales
               :  :  :        :        :     +- Relation[ss_sold_date_sk#48,ss_sold_time_sk#60,ss_item_sk#61,ss_customer_sk#47,ss_cdemo_sk#62,ss_hdemo_sk#63,ss_addr_sk#64,ss_store_sk#65,ss_promo_sk#66,ss_ticket_number#67,ss_quantity#68,ss_wholesale_cost#69,ss_list_price#70,ss_sales_price#71,ss_ext_discount_amt#45,ss_ext_sales_price#72,ss_ext_wholesale_cost#73,ss_ext_list_price#44,ss_ext_tax#74,ss_coupon_amt#75,ss_net_paid#76,ss_net_paid_inc_tax#77,ss_net_profit#78] parquet
               :  :  :        :        +- SubqueryAlias spark_catalog.default.date_dim
               :  :  :        :           +- Relation[d_date_sk#49,d_date_id#79,d_date#80,d_month_seq#81,d_week_seq#82,d_quarter_seq#83,d_year#39,d_dow#84,d_moy#85,d_dom#86,d_qoy#87,d_fy_year#88,d_fy_quarter_seq#89,d_fy_week_seq#90,d_day_name#91,d_quarter_name#92,d_holiday#93,d_weekend#94,d_following_holiday#95,d_first_dom#96,d_last_dom#97,d_same_day_ly#98,d_same_day_lq#99,d_current_day#100,d_current_week#101,d_current_month#102,d_current_quarter#103,d_current_year#104] parquet
               :  :  :        +- Aggregate [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39], [c_customer_id#36 AS customer_id#11, c_first_name#37 AS customer_first_name#12, c_last_name#38 AS customer_last_name#13, c_preferred_cust_flag#40 AS customer_preferred_cust_flag#14, c_birth_country#41 AS customer_birth_country#15, c_login#42 AS customer_login#16, c_email_address#43 AS customer_email_address#17, d_year#39 AS dyear#18, sum(CheckOverflow((promote_precision(cast(ws_ext_list_price#105 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#106 as decimal(8,2)))), DecimalType(8,2), true)) AS year_total#19, w AS sale_type#20]
               :  :  :           +- Filter ((c_customer_sk#46 = ws_bill_customer_sk#107) AND (ws_sold_date_sk#108 = d_date_sk#49))
               :  :  :              +- Join Inner
               :  :  :                 :- Join Inner
               :  :  :                 :  :- SubqueryAlias spark_catalog.default.customer
               :  :  :                 :  :  +- Relation[c_customer_sk#46,c_customer_id#36,c_current_cdemo_sk#50,c_current_hdemo_sk#51,c_current_addr_sk#52,c_first_shipto_date_sk#53,c_first_sales_date_sk#54,c_salutation#55,c_first_name#37,c_last_name#38,c_preferred_cust_flag#40,c_birth_day#56,c_birth_month#57,c_birth_year#58,c_birth_country#41,c_login#42,c_email_address#43,c_last_review_date#59] parquet
               :  :  :                 :  +- SubqueryAlias spark_catalog.default.web_sales
               :  :  :                 :     +- Relation[ws_sold_date_sk#108,ws_sold_time_sk#109,ws_ship_date_sk#110,ws_item_sk#111,ws_bill_customer_sk#107,ws_bill_cdemo_sk#112,ws_bill_hdemo_sk#113,ws_bill_addr_sk#114,ws_ship_customer_sk#115,ws_ship_cdemo_sk#116,ws_ship_hdemo_sk#117,ws_ship_addr_sk#118,ws_web_page_sk#119,ws_web_site_sk#120,ws_ship_mode_sk#121,ws_warehouse_sk#122,ws_promo_sk#123,ws_order_number#124,ws_quantity#125,ws_wholesale_cost#126,ws_list_price#127,ws_sales_price#128,ws_ext_discount_amt#106,ws_ext_sales_price#129,ws_ext_wholesale_cost#130,ws_ext_list_price#105,ws_ext_tax#131,ws_coupon_amt#132,ws_ext_ship_cost#133,ws_net_paid#134,ws_net_paid_inc_tax#135,ws_net_paid_inc_ship#136,ws_net_paid_inc_ship_tax#137,ws_net_profit#138] parquet
               :  :  :                 +- SubqueryAlias spark_catalog.default.date_dim
               :  :  :                    +- Relation[d_date_sk#49,d_date_id#79,d_date#80,d_month_seq#81,d_week_seq#82,d_quarter_seq#83,d_year#39,d_dow#84,d_moy#85,d_dom#86,d_qoy#87,d_fy_year#88,d_fy_quarter_seq#89,d_fy_week_seq#90,d_day_name#91,d_quarter_name#92,d_holiday#93,d_weekend#94,d_following_holiday#95,d_first_dom#96,d_last_dom#97,d_same_day_ly#98,d_same_day_lq#99,d_current_day#100,d_current_week#101,d_current_month#102,d_current_quarter#103,d_current_year#104] parquet
               :  :  +- SubqueryAlias t_s_secyear
               :  :     +- SubqueryAlias year_total
               :  :        +- Union
               :  :           :- Aggregate [c_customer_id#36, c_first_name#37, c_last_name#38, d_year#39, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39], [c_customer_id#36 AS customer_id#21, c_first_name#37 AS customer_first_name#22, c_last_name#38 AS customer_last_name#23, c_preferred_cust_flag#40 AS customer_preferred_cust_flag#139, c_birth_country#41 AS customer_birth_country#140, c_login#42 AS customer_login#141, c_email_address#43 AS customer_email_address#24, d_year#39 AS dyear#30, sum(CheckOverflow((promote_precision(cast(ss_ext_list_price#44 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#45 as decimal(8,2)))), DecimalType(8,2), true)) AS year_total#35, s AS sale_type#28]
               :  :           :  +- Filter ((c_customer_sk#46 = ss_customer_sk#47) AND (ss_sold_date_sk#48 = d_date_sk#49))
               :  :           :     +- Join Inner
               :  :           :        :- Join Inner
               :  :           :        :  :- SubqueryAlias spark_catalog.default.customer
               :  :           :        :  :  +- Relation[c_customer_sk#46,c_customer_id#36,c_current_cdemo_sk#50,c_current_hdemo_sk#51,c_current_addr_sk#52,c_first_shipto_date_sk#53,c_first_sales_date_sk#54,c_salutation#55,c_first_name#37,c_last_name#38,c_preferred_cust_flag#40,c_birth_day#56,c_birth_month#57,c_birth_year#58,c_birth_country#41,c_login#42,c_email_address#43,c_last_review_date#59] parquet
               :  :           :        :  +- SubqueryAlias spark_catalog.default.store_sales
               :  :           :        :     +- Relation[ss_sold_date_sk#48,ss_sold_time_sk#60,ss_item_sk#61,ss_customer_sk#47,ss_cdemo_sk#62,ss_hdemo_sk#63,ss_addr_sk#64,ss_store_sk#65,ss_promo_sk#66,ss_ticket_number#67,ss_quantity#68,ss_wholesale_cost#69,ss_list_price#70,ss_sales_price#71,ss_ext_discount_amt#45,ss_ext_sales_price#72,ss_ext_wholesale_cost#73,ss_ext_list_price#44,ss_ext_tax#74,ss_coupon_amt#75,ss_net_paid#76,ss_net_paid_inc_tax#77,ss_net_profit#78] parquet
               :  :           :        +- SubqueryAlias spark_catalog.default.date_dim
               :  :           :           +- Relation[d_date_sk#49,d_date_id#79,d_date#80,d_month_seq#81,d_week_seq#82,d_quarter_seq#83,d_year#39,d_dow#84,d_moy#85,d_dom#86,d_qoy#87,d_fy_year#88,d_fy_quarter_seq#89,d_fy_week_seq#90,d_day_name#91,d_quarter_name#92,d_holiday#93,d_weekend#94,d_following_holiday#95,d_first_dom#96,d_last_dom#97,d_same_day_ly#98,d_same_day_lq#99,d_current_day#100,d_current_week#101,d_current_month#102,d_current_quarter#103,d_current_year#104] parquet
               :  :           +- Aggregate [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39], [c_customer_id#36 AS customer_id#11, c_first_name#37 AS customer_first_name#12, c_last_name#38 AS customer_last_name#13, c_preferred_cust_flag#40 AS customer_preferred_cust_flag#14, c_birth_country#41 AS customer_birth_country#15, c_login#42 AS customer_login#16, c_email_address#43 AS customer_email_address#17, d_year#39 AS dyear#18, sum(CheckOverflow((promote_precision(cast(ws_ext_list_price#105 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#106 as decimal(8,2)))), DecimalType(8,2), true)) AS year_total#19, w AS sale_type#20]
               :  :              +- Filter ((c_customer_sk#46 = ws_bill_customer_sk#107) AND (ws_sold_date_sk#108 = d_date_sk#49))
               :  :                 +- Join Inner
               :  :                    :- Join Inner
               :  :                    :  :- SubqueryAlias spark_catalog.default.customer
               :  :                    :  :  +- Relation[c_customer_sk#46,c_customer_id#36,c_current_cdemo_sk#50,c_current_hdemo_sk#51,c_current_addr_sk#52,c_first_shipto_date_sk#53,c_first_sales_date_sk#54,c_salutation#55,c_first_name#37,c_last_name#38,c_preferred_cust_flag#40,c_birth_day#56,c_birth_month#57,c_birth_year#58,c_birth_country#41,c_login#42,c_email_address#43,c_last_review_date#59] parquet
               :  :                    :  +- SubqueryAlias spark_catalog.default.web_sales
               :  :                    :     +- Relation[ws_sold_date_sk#108,ws_sold_time_sk#109,ws_ship_date_sk#110,ws_item_sk#111,ws_bill_customer_sk#107,ws_bill_cdemo_sk#112,ws_bill_hdemo_sk#113,ws_bill_addr_sk#114,ws_ship_customer_sk#115,ws_ship_cdemo_sk#116,ws_ship_hdemo_sk#117,ws_ship_addr_sk#118,ws_web_page_sk#119,ws_web_site_sk#120,ws_ship_mode_sk#121,ws_warehouse_sk#122,ws_promo_sk#123,ws_order_number#124,ws_quantity#125,ws_wholesale_cost#126,ws_list_price#127,ws_sales_price#128,ws_ext_discount_amt#106,ws_ext_sales_price#129,ws_ext_wholesale_cost#130,ws_ext_list_price#105,ws_ext_tax#131,ws_coupon_amt#132,ws_ext_ship_cost#133,ws_net_paid#134,ws_net_paid_inc_tax#135,ws_net_paid_inc_ship#136,ws_net_paid_inc_ship_tax#137,ws_net_profit#138] parquet
               :  :                    +- SubqueryAlias spark_catalog.default.date_dim
               :  :                       +- Relation[d_date_sk#49,d_date_id#79,d_date#80,d_month_seq#81,d_week_seq#82,d_quarter_seq#83,d_year#39,d_dow#84,d_moy#85,d_dom#86,d_qoy#87,d_fy_year#88,d_fy_quarter_seq#89,d_fy_week_seq#90,d_day_name#91,d_quarter_name#92,d_holiday#93,d_weekend#94,d_following_holiday#95,d_first_dom#96,d_last_dom#97,d_same_day_ly#98,d_same_day_lq#99,d_current_day#100,d_current_week#101,d_current_month#102,d_current_quarter#103,d_current_year#104] parquet
               :  +- SubqueryAlias t_w_firstyear
               :     +- SubqueryAlias year_total
               :        +- Union
               :           :- Aggregate [c_customer_id#36, c_first_name#37, c_last_name#38, d_year#39, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39], [c_customer_id#36 AS customer_id#26, c_first_name#37 AS customer_first_name#142, c_last_name#38 AS customer_last_name#143, c_preferred_cust_flag#40 AS customer_preferred_cust_flag#144, c_birth_country#41 AS customer_birth_country#145, c_login#42 AS customer_login#146, c_email_address#43 AS customer_email_address#147, d_year#39 AS dyear#31, sum(CheckOverflow((promote_precision(cast(ss_ext_list_price#44 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#45 as decimal(8,2)))), DecimalType(8,2), true)) AS year_total#33, s AS sale_type#27]
               :           :  +- Filter ((c_customer_sk#46 = ss_customer_sk#47) AND (ss_sold_date_sk#48 = d_date_sk#49))
               :           :     +- Join Inner
               :           :        :- Join Inner
               :           :        :  :- SubqueryAlias spark_catalog.default.customer
               :           :        :  :  +- Relation[c_customer_sk#46,c_customer_id#36,c_current_cdemo_sk#50,c_current_hdemo_sk#51,c_current_addr_sk#52,c_first_shipto_date_sk#53,c_first_sales_date_sk#54,c_salutation#55,c_first_name#37,c_last_name#38,c_preferred_cust_flag#40,c_birth_day#56,c_birth_month#57,c_birth_year#58,c_birth_country#41,c_login#42,c_email_address#43,c_last_review_date#59] parquet
               :           :        :  +- SubqueryAlias spark_catalog.default.store_sales
               :           :        :     +- Relation[ss_sold_date_sk#48,ss_sold_time_sk#60,ss_item_sk#61,ss_customer_sk#47,ss_cdemo_sk#62,ss_hdemo_sk#63,ss_addr_sk#64,ss_store_sk#65,ss_promo_sk#66,ss_ticket_number#67,ss_quantity#68,ss_wholesale_cost#69,ss_list_price#70,ss_sales_price#71,ss_ext_discount_amt#45,ss_ext_sales_price#72,ss_ext_wholesale_cost#73,ss_ext_list_price#44,ss_ext_tax#74,ss_coupon_amt#75,ss_net_paid#76,ss_net_paid_inc_tax#77,ss_net_profit#78] parquet
               :           :        +- SubqueryAlias spark_catalog.default.date_dim
               :           :           +- Relation[d_date_sk#49,d_date_id#79,d_date#80,d_month_seq#81,d_week_seq#82,d_quarter_seq#83,d_year#39,d_dow#84,d_moy#85,d_dom#86,d_qoy#87,d_fy_year#88,d_fy_quarter_seq#89,d_fy_week_seq#90,d_day_name#91,d_quarter_name#92,d_holiday#93,d_weekend#94,d_following_holiday#95,d_first_dom#96,d_last_dom#97,d_same_day_ly#98,d_same_day_lq#99,d_current_day#100,d_current_week#101,d_current_month#102,d_current_quarter#103,d_current_year#104] parquet
               :           +- Aggregate [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39], [c_customer_id#36 AS customer_id#11, c_first_name#37 AS customer_first_name#12, c_last_name#38 AS customer_last_name#13, c_preferred_cust_flag#40 AS customer_preferred_cust_flag#14, c_birth_country#41 AS customer_birth_country#15, c_login#42 AS customer_login#16, c_email_address#43 AS customer_email_address#17, d_year#39 AS dyear#18, sum(CheckOverflow((promote_precision(cast(ws_ext_list_price#105 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#106 as decimal(8,2)))), DecimalType(8,2), true)) AS year_total#19, w AS sale_type#20]
               :              +- Filter ((c_customer_sk#46 = ws_bill_customer_sk#107) AND (ws_sold_date_sk#108 = d_date_sk#49))
               :                 +- Join Inner
               :                    :- Join Inner
               :                    :  :- SubqueryAlias spark_catalog.default.customer
               :                    :  :  +- Relation[c_customer_sk#46,c_customer_id#36,c_current_cdemo_sk#50,c_current_hdemo_sk#51,c_current_addr_sk#52,c_first_shipto_date_sk#53,c_first_sales_date_sk#54,c_salutation#55,c_first_name#37,c_last_name#38,c_preferred_cust_flag#40,c_birth_day#56,c_birth_month#57,c_birth_year#58,c_birth_country#41,c_login#42,c_email_address#43,c_last_review_date#59] parquet
               :                    :  +- SubqueryAlias spark_catalog.default.web_sales
               :                    :     +- Relation[ws_sold_date_sk#108,ws_sold_time_sk#109,ws_ship_date_sk#110,ws_item_sk#111,ws_bill_customer_sk#107,ws_bill_cdemo_sk#112,ws_bill_hdemo_sk#113,ws_bill_addr_sk#114,ws_ship_customer_sk#115,ws_ship_cdemo_sk#116,ws_ship_hdemo_sk#117,ws_ship_addr_sk#118,ws_web_page_sk#119,ws_web_site_sk#120,ws_ship_mode_sk#121,ws_warehouse_sk#122,ws_promo_sk#123,ws_order_number#124,ws_quantity#125,ws_wholesale_cost#126,ws_list_price#127,ws_sales_price#128,ws_ext_discount_amt#106,ws_ext_sales_price#129,ws_ext_wholesale_cost#130,ws_ext_list_price#105,ws_ext_tax#131,ws_coupon_amt#132,ws_ext_ship_cost#133,ws_net_paid#134,ws_net_paid_inc_tax#135,ws_net_paid_inc_ship#136,ws_net_paid_inc_ship_tax#137,ws_net_profit#138] parquet
               :                    +- SubqueryAlias spark_catalog.default.date_dim
               :                       +- Relation[d_date_sk#49,d_date_id#79,d_date#80,d_month_seq#81,d_week_seq#82,d_quarter_seq#83,d_year#39,d_dow#84,d_moy#85,d_dom#86,d_qoy#87,d_fy_year#88,d_fy_quarter_seq#89,d_fy_week_seq#90,d_day_name#91,d_quarter_name#92,d_holiday#93,d_weekend#94,d_following_holiday#95,d_first_dom#96,d_last_dom#97,d_same_day_ly#98,d_same_day_lq#99,d_current_day#100,d_current_week#101,d_current_month#102,d_current_quarter#103,d_current_year#104] parquet
               +- SubqueryAlias t_w_secyear
                  +- SubqueryAlias year_total
                     +- Union
                        :- Aggregate [c_customer_id#36, c_first_name#37, c_last_name#38, d_year#39, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39], [c_customer_id#36 AS customer_id#25, c_first_name#37 AS customer_first_name#148, c_last_name#38 AS customer_last_name#149, c_preferred_cust_flag#40 AS customer_preferred_cust_flag#150, c_birth_country#41 AS customer_birth_country#151, c_login#42 AS customer_login#152, c_email_address#43 AS customer_email_address#153, d_year#39 AS dyear#32, sum(CheckOverflow((promote_precision(cast(ss_ext_list_price#44 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#45 as decimal(8,2)))), DecimalType(8,2), true)) AS year_total#34, s AS sale_type#29]
                        :  +- Filter ((c_customer_sk#46 = ss_customer_sk#47) AND (ss_sold_date_sk#48 = d_date_sk#49))
                        :     +- Join Inner
                        :        :- Join Inner
                        :        :  :- SubqueryAlias spark_catalog.default.customer
                        :        :  :  +- Relation[c_customer_sk#46,c_customer_id#36,c_current_cdemo_sk#50,c_current_hdemo_sk#51,c_current_addr_sk#52,c_first_shipto_date_sk#53,c_first_sales_date_sk#54,c_salutation#55,c_first_name#37,c_last_name#38,c_preferred_cust_flag#40,c_birth_day#56,c_birth_month#57,c_birth_year#58,c_birth_country#41,c_login#42,c_email_address#43,c_last_review_date#59] parquet
                        :        :  +- SubqueryAlias spark_catalog.default.store_sales
                        :        :     +- Relation[ss_sold_date_sk#48,ss_sold_time_sk#60,ss_item_sk#61,ss_customer_sk#47,ss_cdemo_sk#62,ss_hdemo_sk#63,ss_addr_sk#64,ss_store_sk#65,ss_promo_sk#66,ss_ticket_number#67,ss_quantity#68,ss_wholesale_cost#69,ss_list_price#70,ss_sales_price#71,ss_ext_discount_amt#45,ss_ext_sales_price#72,ss_ext_wholesale_cost#73,ss_ext_list_price#44,ss_ext_tax#74,ss_coupon_amt#75,ss_net_paid#76,ss_net_paid_inc_tax#77,ss_net_profit#78] parquet
                        :        +- SubqueryAlias spark_catalog.default.date_dim
                        :           +- Relation[d_date_sk#49,d_date_id#79,d_date#80,d_month_seq#81,d_week_seq#82,d_quarter_seq#83,d_year#39,d_dow#84,d_moy#85,d_dom#86,d_qoy#87,d_fy_year#88,d_fy_quarter_seq#89,d_fy_week_seq#90,d_day_name#91,d_quarter_name#92,d_holiday#93,d_weekend#94,d_following_holiday#95,d_first_dom#96,d_last_dom#97,d_same_day_ly#98,d_same_day_lq#99,d_current_day#100,d_current_week#101,d_current_month#102,d_current_quarter#103,d_current_year#104] parquet
                        +- Aggregate [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39], [c_customer_id#36 AS customer_id#11, c_first_name#37 AS customer_first_name#12, c_last_name#38 AS customer_last_name#13, c_preferred_cust_flag#40 AS customer_preferred_cust_flag#14, c_birth_country#41 AS customer_birth_country#15, c_login#42 AS customer_login#16, c_email_address#43 AS customer_email_address#17, d_year#39 AS dyear#18, sum(CheckOverflow((promote_precision(cast(ws_ext_list_price#105 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#106 as decimal(8,2)))), DecimalType(8,2), true)) AS year_total#19, w AS sale_type#20]
                           +- Filter ((c_customer_sk#46 = ws_bill_customer_sk#107) AND (ws_sold_date_sk#108 = d_date_sk#49))
                              +- Join Inner
                                 :- Join Inner
                                 :  :- SubqueryAlias spark_catalog.default.customer
                                 :  :  +- Relation[c_customer_sk#46,c_customer_id#36,c_current_cdemo_sk#50,c_current_hdemo_sk#51,c_current_addr_sk#52,c_first_shipto_date_sk#53,c_first_sales_date_sk#54,c_salutation#55,c_first_name#37,c_last_name#38,c_preferred_cust_flag#40,c_birth_day#56,c_birth_month#57,c_birth_year#58,c_birth_country#41,c_login#42,c_email_address#43,c_last_review_date#59] parquet
                                 :  +- SubqueryAlias spark_catalog.default.web_sales
                                 :     +- Relation[ws_sold_date_sk#108,ws_sold_time_sk#109,ws_ship_date_sk#110,ws_item_sk#111,ws_bill_customer_sk#107,ws_bill_cdemo_sk#112,ws_bill_hdemo_sk#113,ws_bill_addr_sk#114,ws_ship_customer_sk#115,ws_ship_cdemo_sk#116,ws_ship_hdemo_sk#117,ws_ship_addr_sk#118,ws_web_page_sk#119,ws_web_site_sk#120,ws_ship_mode_sk#121,ws_warehouse_sk#122,ws_promo_sk#123,ws_order_number#124,ws_quantity#125,ws_wholesale_cost#126,ws_list_price#127,ws_sales_price#128,ws_ext_discount_amt#106,ws_ext_sales_price#129,ws_ext_wholesale_cost#130,ws_ext_list_price#105,ws_ext_tax#131,ws_coupon_amt#132,ws_ext_ship_cost#133,ws_net_paid#134,ws_net_paid_inc_tax#135,ws_net_paid_inc_ship#136,ws_net_paid_inc_ship_tax#137,ws_net_profit#138] parquet
                                 +- SubqueryAlias spark_catalog.default.date_dim
                                    +- Relation[d_date_sk#49,d_date_id#79,d_date#80,d_month_seq#81,d_week_seq#82,d_quarter_seq#83,d_year#39,d_dow#84,d_moy#85,d_dom#86,d_qoy#87,d_fy_year#88,d_fy_quarter_seq#89,d_fy_week_seq#90,d_day_name#91,d_quarter_name#92,d_holiday#93,d_weekend#94,d_following_holiday#95,d_first_dom#96,d_last_dom#97,d_same_day_ly#98,d_same_day_lq#99,d_current_day#100,d_current_week#101,d_current_month#102,d_current_quarter#103,d_current_year#104] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Sort [customer_id#21 ASC NULLS FIRST, customer_first_name#22 ASC NULLS FIRST, customer_last_name#23 ASC NULLS FIRST, customer_email_address#24 ASC NULLS FIRST], true
      +- Project [customer_id#21, customer_first_name#22, customer_last_name#23, customer_email_address#24]
         +- Join Inner, ((customer_id#1 = customer_id#25) AND (CASE WHEN (year_total#33 > 0.00) THEN CheckOverflow((promote_precision(year_total#34) / promote_precision(year_total#33)), DecimalType(38,20), true) ELSE 0E-20 END > CASE WHEN (year_total#9 > 0.00) THEN CheckOverflow((promote_precision(year_total#35) / promote_precision(year_total#9)), DecimalType(38,20), true) ELSE 0E-20 END))
            :- Project [customer_id#1, year_total#9, customer_id#21, customer_first_name#22, customer_last_name#23, customer_email_address#24, year_total#35, year_total#33]
            :  +- Join Inner, (customer_id#1 = customer_id#26)
            :     :- Join Inner, (customer_id#21 = customer_id#1)
            :     :  :- Filter (isnotnull(year_total#9) AND (year_total#9 > 0.00))
            :     :  :  +- Aggregate [c_customer_id#36, c_first_name#37, c_last_name#38, d_year#39, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43], [c_customer_id#36 AS customer_id#1, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#44 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#45 as decimal(8,2)))), DecimalType(8,2), true))),18,2) AS year_total#9]
            :     :  :     +- Project [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, ss_ext_discount_amt#45, ss_ext_list_price#44, d_year#39]
            :     :  :        +- Join Inner, (ss_sold_date_sk#48 = d_date_sk#49)
            :     :  :           :- Project [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, ss_sold_date_sk#48, ss_ext_discount_amt#45, ss_ext_list_price#44]
            :     :  :           :  +- Join Inner, (c_customer_sk#46 = ss_customer_sk#47)
            :     :  :           :     :- Project [c_customer_sk#46, c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43]
            :     :  :           :     :  +- Filter (isnotnull(c_customer_sk#46) AND isnotnull(c_customer_id#36))
            :     :  :           :     :     +- Relation[c_customer_sk#46,c_customer_id#36,c_current_cdemo_sk#50,c_current_hdemo_sk#51,c_current_addr_sk#52,c_first_shipto_date_sk#53,c_first_sales_date_sk#54,c_salutation#55,c_first_name#37,c_last_name#38,c_preferred_cust_flag#40,c_birth_day#56,c_birth_month#57,c_birth_year#58,c_birth_country#41,c_login#42,c_email_address#43,c_last_review_date#59] parquet
            :     :  :           :     +- Project [ss_sold_date_sk#48, ss_customer_sk#47, ss_ext_discount_amt#45, ss_ext_list_price#44]
            :     :  :           :        +- Filter (isnotnull(ss_customer_sk#47) AND isnotnull(ss_sold_date_sk#48))
            :     :  :           :           +- Relation[ss_sold_date_sk#48,ss_sold_time_sk#60,ss_item_sk#61,ss_customer_sk#47,ss_cdemo_sk#62,ss_hdemo_sk#63,ss_addr_sk#64,ss_store_sk#65,ss_promo_sk#66,ss_ticket_number#67,ss_quantity#68,ss_wholesale_cost#69,ss_list_price#70,ss_sales_price#71,ss_ext_discount_amt#45,ss_ext_sales_price#72,ss_ext_wholesale_cost#73,ss_ext_list_price#44,ss_ext_tax#74,ss_coupon_amt#75,ss_net_paid#76,ss_net_paid_inc_tax#77,ss_net_profit#78] parquet
            :     :  :           +- Project [d_date_sk#49, d_year#39]
            :     :  :              +- Filter ((isnotnull(d_year#39) AND (d_year#39 = 2001)) AND isnotnull(d_date_sk#49))
            :     :  :                 +- Relation[d_date_sk#49,d_date_id#79,d_date#80,d_month_seq#81,d_week_seq#82,d_quarter_seq#83,d_year#39,d_dow#84,d_moy#85,d_dom#86,d_qoy#87,d_fy_year#88,d_fy_quarter_seq#89,d_fy_week_seq#90,d_day_name#91,d_quarter_name#92,d_holiday#93,d_weekend#94,d_following_holiday#95,d_first_dom#96,d_last_dom#97,d_same_day_ly#98,d_same_day_lq#99,d_current_day#100,d_current_week#101,d_current_month#102,d_current_quarter#103,d_current_year#104] parquet
            :     :  +- Aggregate [c_customer_id#36, c_first_name#37, c_last_name#38, d_year#39, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43], [c_customer_id#36 AS customer_id#21, c_first_name#37 AS customer_first_name#22, c_last_name#38 AS customer_last_name#23, c_email_address#43 AS customer_email_address#24, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#44 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#45 as decimal(8,2)))), DecimalType(8,2), true))),18,2) AS year_total#35]
            :     :     +- Project [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, ss_ext_discount_amt#45, ss_ext_list_price#44, d_year#39]
            :     :        +- Join Inner, (ss_sold_date_sk#48 = d_date_sk#49)
            :     :           :- Project [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, ss_sold_date_sk#48, ss_ext_discount_amt#45, ss_ext_list_price#44]
            :     :           :  +- Join Inner, (c_customer_sk#46 = ss_customer_sk#47)
            :     :           :     :- Project [c_customer_sk#46, c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43]
            :     :           :     :  +- Filter (isnotnull(c_customer_sk#46) AND isnotnull(c_customer_id#36))
            :     :           :     :     +- Relation[c_customer_sk#46,c_customer_id#36,c_current_cdemo_sk#50,c_current_hdemo_sk#51,c_current_addr_sk#52,c_first_shipto_date_sk#53,c_first_sales_date_sk#54,c_salutation#55,c_first_name#37,c_last_name#38,c_preferred_cust_flag#40,c_birth_day#56,c_birth_month#57,c_birth_year#58,c_birth_country#41,c_login#42,c_email_address#43,c_last_review_date#59] parquet
            :     :           :     +- Project [ss_sold_date_sk#48, ss_customer_sk#47, ss_ext_discount_amt#45, ss_ext_list_price#44]
            :     :           :        +- Filter (isnotnull(ss_customer_sk#47) AND isnotnull(ss_sold_date_sk#48))
            :     :           :           +- Relation[ss_sold_date_sk#48,ss_sold_time_sk#60,ss_item_sk#61,ss_customer_sk#47,ss_cdemo_sk#62,ss_hdemo_sk#63,ss_addr_sk#64,ss_store_sk#65,ss_promo_sk#66,ss_ticket_number#67,ss_quantity#68,ss_wholesale_cost#69,ss_list_price#70,ss_sales_price#71,ss_ext_discount_amt#45,ss_ext_sales_price#72,ss_ext_wholesale_cost#73,ss_ext_list_price#44,ss_ext_tax#74,ss_coupon_amt#75,ss_net_paid#76,ss_net_paid_inc_tax#77,ss_net_profit#78] parquet
            :     :           +- Project [d_date_sk#49, d_year#39]
            :     :              +- Filter ((isnotnull(d_year#39) AND (d_year#39 = 2002)) AND isnotnull(d_date_sk#49))
            :     :                 +- Relation[d_date_sk#49,d_date_id#79,d_date#80,d_month_seq#81,d_week_seq#82,d_quarter_seq#83,d_year#39,d_dow#84,d_moy#85,d_dom#86,d_qoy#87,d_fy_year#88,d_fy_quarter_seq#89,d_fy_week_seq#90,d_day_name#91,d_quarter_name#92,d_holiday#93,d_weekend#94,d_following_holiday#95,d_first_dom#96,d_last_dom#97,d_same_day_ly#98,d_same_day_lq#99,d_current_day#100,d_current_week#101,d_current_month#102,d_current_quarter#103,d_current_year#104] parquet
            :     +- Project [customer_id#11 AS customer_id#26, year_total#19 AS year_total#33]
            :        +- Filter (isnotnull(year_total#19) AND (year_total#19 > 0.00))
            :           +- Aggregate [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39], [c_customer_id#36 AS customer_id#11, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#105 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#106 as decimal(8,2)))), DecimalType(8,2), true))),18,2) AS year_total#19]
            :              +- Project [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, ws_ext_discount_amt#106, ws_ext_list_price#105, d_year#39]
            :                 +- Join Inner, (ws_sold_date_sk#108 = d_date_sk#49)
            :                    :- Project [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, ws_sold_date_sk#108, ws_ext_discount_amt#106, ws_ext_list_price#105]
            :                    :  +- Join Inner, (c_customer_sk#46 = ws_bill_customer_sk#107)
            :                    :     :- Project [c_customer_sk#46, c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43]
            :                    :     :  +- Filter (isnotnull(c_customer_sk#46) AND isnotnull(c_customer_id#36))
            :                    :     :     +- Relation[c_customer_sk#46,c_customer_id#36,c_current_cdemo_sk#50,c_current_hdemo_sk#51,c_current_addr_sk#52,c_first_shipto_date_sk#53,c_first_sales_date_sk#54,c_salutation#55,c_first_name#37,c_last_name#38,c_preferred_cust_flag#40,c_birth_day#56,c_birth_month#57,c_birth_year#58,c_birth_country#41,c_login#42,c_email_address#43,c_last_review_date#59] parquet
            :                    :     +- Project [ws_sold_date_sk#108, ws_bill_customer_sk#107, ws_ext_discount_amt#106, ws_ext_list_price#105]
            :                    :        +- Filter (isnotnull(ws_bill_customer_sk#107) AND isnotnull(ws_sold_date_sk#108))
            :                    :           +- Relation[ws_sold_date_sk#108,ws_sold_time_sk#109,ws_ship_date_sk#110,ws_item_sk#111,ws_bill_customer_sk#107,ws_bill_cdemo_sk#112,ws_bill_hdemo_sk#113,ws_bill_addr_sk#114,ws_ship_customer_sk#115,ws_ship_cdemo_sk#116,ws_ship_hdemo_sk#117,ws_ship_addr_sk#118,ws_web_page_sk#119,ws_web_site_sk#120,ws_ship_mode_sk#121,ws_warehouse_sk#122,ws_promo_sk#123,ws_order_number#124,ws_quantity#125,ws_wholesale_cost#126,ws_list_price#127,ws_sales_price#128,ws_ext_discount_amt#106,ws_ext_sales_price#129,ws_ext_wholesale_cost#130,ws_ext_list_price#105,ws_ext_tax#131,ws_coupon_amt#132,ws_ext_ship_cost#133,ws_net_paid#134,ws_net_paid_inc_tax#135,ws_net_paid_inc_ship#136,ws_net_paid_inc_ship_tax#137,ws_net_profit#138] parquet
            :                    +- Project [d_date_sk#49, d_year#39]
            :                       +- Filter ((isnotnull(d_year#39) AND (d_year#39 = 2001)) AND isnotnull(d_date_sk#49))
            :                          +- Relation[d_date_sk#49,d_date_id#79,d_date#80,d_month_seq#81,d_week_seq#82,d_quarter_seq#83,d_year#39,d_dow#84,d_moy#85,d_dom#86,d_qoy#87,d_fy_year#88,d_fy_quarter_seq#89,d_fy_week_seq#90,d_day_name#91,d_quarter_name#92,d_holiday#93,d_weekend#94,d_following_holiday#95,d_first_dom#96,d_last_dom#97,d_same_day_ly#98,d_same_day_lq#99,d_current_day#100,d_current_week#101,d_current_month#102,d_current_quarter#103,d_current_year#104] parquet
            +- Aggregate [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39], [c_customer_id#36 AS customer_id#25, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#105 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#106 as decimal(8,2)))), DecimalType(8,2), true))),18,2) AS year_total#34]
               +- Project [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, ws_ext_discount_amt#106, ws_ext_list_price#105, d_year#39]
                  +- Join Inner, (ws_sold_date_sk#108 = d_date_sk#49)
                     :- Project [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, ws_sold_date_sk#108, ws_ext_discount_amt#106, ws_ext_list_price#105]
                     :  +- Join Inner, (c_customer_sk#46 = ws_bill_customer_sk#107)
                     :     :- Project [c_customer_sk#46, c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43]
                     :     :  +- Filter (isnotnull(c_customer_sk#46) AND isnotnull(c_customer_id#36))
                     :     :     +- Relation[c_customer_sk#46,c_customer_id#36,c_current_cdemo_sk#50,c_current_hdemo_sk#51,c_current_addr_sk#52,c_first_shipto_date_sk#53,c_first_sales_date_sk#54,c_salutation#55,c_first_name#37,c_last_name#38,c_preferred_cust_flag#40,c_birth_day#56,c_birth_month#57,c_birth_year#58,c_birth_country#41,c_login#42,c_email_address#43,c_last_review_date#59] parquet
                     :     +- Project [ws_sold_date_sk#108, ws_bill_customer_sk#107, ws_ext_discount_amt#106, ws_ext_list_price#105]
                     :        +- Filter (isnotnull(ws_bill_customer_sk#107) AND isnotnull(ws_sold_date_sk#108))
                     :           +- Relation[ws_sold_date_sk#108,ws_sold_time_sk#109,ws_ship_date_sk#110,ws_item_sk#111,ws_bill_customer_sk#107,ws_bill_cdemo_sk#112,ws_bill_hdemo_sk#113,ws_bill_addr_sk#114,ws_ship_customer_sk#115,ws_ship_cdemo_sk#116,ws_ship_hdemo_sk#117,ws_ship_addr_sk#118,ws_web_page_sk#119,ws_web_site_sk#120,ws_ship_mode_sk#121,ws_warehouse_sk#122,ws_promo_sk#123,ws_order_number#124,ws_quantity#125,ws_wholesale_cost#126,ws_list_price#127,ws_sales_price#128,ws_ext_discount_amt#106,ws_ext_sales_price#129,ws_ext_wholesale_cost#130,ws_ext_list_price#105,ws_ext_tax#131,ws_coupon_amt#132,ws_ext_ship_cost#133,ws_net_paid#134,ws_net_paid_inc_tax#135,ws_net_paid_inc_ship#136,ws_net_paid_inc_ship_tax#137,ws_net_profit#138] parquet
                     +- Project [d_date_sk#49, d_year#39]
                        +- Filter ((isnotnull(d_year#39) AND (d_year#39 = 2002)) AND isnotnull(d_date_sk#49))
                           +- Relation[d_date_sk#49,d_date_id#79,d_date#80,d_month_seq#81,d_week_seq#82,d_quarter_seq#83,d_year#39,d_dow#84,d_moy#85,d_dom#86,d_qoy#87,d_fy_year#88,d_fy_quarter_seq#89,d_fy_week_seq#90,d_day_name#91,d_quarter_name#92,d_holiday#93,d_weekend#94,d_following_holiday#95,d_first_dom#96,d_last_dom#97,d_same_day_ly#98,d_same_day_lq#99,d_current_day#100,d_current_week#101,d_current_month#102,d_current_quarter#103,d_current_year#104] parquet

== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[customer_id#21 ASC NULLS FIRST,customer_first_name#22 ASC NULLS FIRST,customer_last_name#23 ASC NULLS FIRST,customer_email_address#24 ASC NULLS FIRST], output=[customer_id#21,customer_first_name#22,customer_last_name#23,customer_email_address#24])
+- *(16) Project [customer_id#21, customer_first_name#22, customer_last_name#23, customer_email_address#24]
   +- *(16) BroadcastHashJoin [customer_id#1], [customer_id#25], Inner, BuildRight, (CASE WHEN (year_total#33 > 0.00) THEN CheckOverflow((promote_precision(year_total#34) / promote_precision(year_total#33)), DecimalType(38,20), true) ELSE 0E-20 END > CASE WHEN (year_total#9 > 0.00) THEN CheckOverflow((promote_precision(year_total#35) / promote_precision(year_total#9)), DecimalType(38,20), true) ELSE 0E-20 END)
      :- *(16) Project [customer_id#1, year_total#9, customer_id#21, customer_first_name#22, customer_last_name#23, customer_email_address#24, year_total#35, year_total#33]
      :  +- *(16) BroadcastHashJoin [customer_id#1], [customer_id#26], Inner, BuildRight
      :     :- *(16) BroadcastHashJoin [customer_id#1], [customer_id#21], Inner, BuildRight
      :     :  :- *(16) Filter (isnotnull(year_total#9) AND (year_total#9 > 0.00))
      :     :  :  +- *(16) HashAggregate(keys=[c_customer_id#36, c_first_name#37, c_last_name#38, d_year#39, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43], functions=[sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#44 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#45 as decimal(8,2)))), DecimalType(8,2), true)))], output=[customer_id#1, year_total#9])
      :     :  :     +- Exchange hashpartitioning(c_customer_id#36, c_first_name#37, c_last_name#38, d_year#39, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, 5), true, [id=#154]
      :     :  :        +- *(3) HashAggregate(keys=[c_customer_id#36, c_first_name#37, c_last_name#38, d_year#39, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43], functions=[partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#44 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#45 as decimal(8,2)))), DecimalType(8,2), true)))], output=[c_customer_id#36, c_first_name#37, c_last_name#38, d_year#39, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, sum#155])
      :     :  :           +- *(3) Project [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, ss_ext_discount_amt#45, ss_ext_list_price#44, d_year#39]
      :     :  :              +- *(3) BroadcastHashJoin [ss_sold_date_sk#48], [d_date_sk#49], Inner, BuildRight
      :     :  :                 :- *(3) Project [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, ss_sold_date_sk#48, ss_ext_discount_amt#45, ss_ext_list_price#44]
      :     :  :                 :  +- *(3) BroadcastHashJoin [c_customer_sk#46], [ss_customer_sk#47], Inner, BuildRight
      :     :  :                 :     :- *(3) Project [c_customer_sk#46, c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43]
      :     :  :                 :     :  +- *(3) Filter (isnotnull(c_customer_sk#46) AND isnotnull(c_customer_id#36))
      :     :  :                 :     :     +- *(3) ColumnarToRow
      :     :  :                 :     :        +- FileScan parquet default.customer[c_customer_sk#46,c_customer_id#36,c_first_name#37,c_last_name#38,c_preferred_cust_flag#40,c_birth_country#41,c_login#42,c_email_address#43] Batched: true, DataFilters: [isnotnull(c_customer_sk#46), isnotnull(c_customer_id#36)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
      :     :  :                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint))), [id=#156]
      :     :  :                 :        +- *(1) Project [ss_sold_date_sk#48, ss_customer_sk#47, ss_ext_discount_amt#45, ss_ext_list_price#44]
      :     :  :                 :           +- *(1) Filter (isnotnull(ss_customer_sk#47) AND isnotnull(ss_sold_date_sk#48))
      :     :  :                 :              +- *(1) ColumnarToRow
      :     :  :                 :                 +- FileScan parquet default.store_sales[ss_sold_date_sk#48,ss_customer_sk#47,ss_ext_discount_amt#45,ss_ext_list_price#44] Batched: true, DataFilters: [isnotnull(ss_customer_sk#47), isnotnull(ss_sold_date_sk#48)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:...
      :     :  :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint))), [id=#157]
      :     :  :                    +- *(2) Project [d_date_sk#49, d_year#39]
      :     :  :                       +- *(2) Filter ((isnotnull(d_year#39) AND (d_year#39 = 2001)) AND isnotnull(d_date_sk#49))
      :     :  :                          +- *(2) ColumnarToRow
      :     :  :                             +- FileScan parquet default.date_dim[d_date_sk#49,d_year#39] Batched: true, DataFilters: [isnotnull(d_year#39), (d_year#39 = 2001), isnotnull(d_date_sk#49)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true])), [id=#158]
      :     :     +- *(7) HashAggregate(keys=[c_customer_id#36, c_first_name#37, c_last_name#38, d_year#39, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43], functions=[sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#44 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#45 as decimal(8,2)))), DecimalType(8,2), true)))], output=[customer_id#21, customer_first_name#22, customer_last_name#23, customer_email_address#24, year_total#35])
      :     :        +- Exchange hashpartitioning(c_customer_id#36, c_first_name#37, c_last_name#38, d_year#39, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, 5), true, [id=#159]
      :     :           +- *(6) HashAggregate(keys=[c_customer_id#36, c_first_name#37, c_last_name#38, d_year#39, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43], functions=[partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#44 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#45 as decimal(8,2)))), DecimalType(8,2), true)))], output=[c_customer_id#36, c_first_name#37, c_last_name#38, d_year#39, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, sum#160])
      :     :              +- *(6) Project [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, ss_ext_discount_amt#45, ss_ext_list_price#44, d_year#39]
      :     :                 +- *(6) BroadcastHashJoin [ss_sold_date_sk#48], [d_date_sk#49], Inner, BuildRight
      :     :                    :- *(6) Project [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, ss_sold_date_sk#48, ss_ext_discount_amt#45, ss_ext_list_price#44]
      :     :                    :  +- *(6) BroadcastHashJoin [c_customer_sk#46], [ss_customer_sk#47], Inner, BuildRight
      :     :                    :     :- *(6) Project [c_customer_sk#46, c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43]
      :     :                    :     :  +- *(6) Filter (isnotnull(c_customer_sk#46) AND isnotnull(c_customer_id#36))
      :     :                    :     :     +- *(6) ColumnarToRow
      :     :                    :     :        +- FileScan parquet default.customer[c_customer_sk#46,c_customer_id#36,c_first_name#37,c_last_name#38,c_preferred_cust_flag#40,c_birth_country#41,c_login#42,c_email_address#43] Batched: true, DataFilters: [isnotnull(c_customer_sk#46), isnotnull(c_customer_id#36)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
      :     :                    :     +- ReusedExchange [ss_sold_date_sk#48, ss_customer_sk#47, ss_ext_discount_amt#45, ss_ext_list_price#44], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint))), [id=#156]
      :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint))), [id=#161]
      :     :                       +- *(5) Project [d_date_sk#49, d_year#39]
      :     :                          +- *(5) Filter ((isnotnull(d_year#39) AND (d_year#39 = 2002)) AND isnotnull(d_date_sk#49))
      :     :                             +- *(5) ColumnarToRow
      :     :                                +- FileScan parquet default.date_dim[d_date_sk#49,d_year#39] Batched: true, DataFilters: [isnotnull(d_year#39), (d_year#39 = 2002), isnotnull(d_date_sk#49)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true])), [id=#162]
      :        +- *(11) Project [customer_id#11 AS customer_id#26, year_total#19 AS year_total#33]
      :           +- *(11) Filter (isnotnull(year_total#19) AND (year_total#19 > 0.00))
      :              +- *(11) HashAggregate(keys=[c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39], functions=[sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#105 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#106 as decimal(8,2)))), DecimalType(8,2), true)))], output=[customer_id#11, year_total#19])
      :                 +- Exchange hashpartitioning(c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39, 5), true, [id=#163]
      :                    +- *(10) HashAggregate(keys=[c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39], functions=[partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#105 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#106 as decimal(8,2)))), DecimalType(8,2), true)))], output=[c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39, sum#164])
      :                       +- *(10) Project [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, ws_ext_discount_amt#106, ws_ext_list_price#105, d_year#39]
      :                          +- *(10) BroadcastHashJoin [ws_sold_date_sk#108], [d_date_sk#49], Inner, BuildRight
      :                             :- *(10) Project [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, ws_sold_date_sk#108, ws_ext_discount_amt#106, ws_ext_list_price#105]
      :                             :  +- *(10) BroadcastHashJoin [c_customer_sk#46], [ws_bill_customer_sk#107], Inner, BuildRight
      :                             :     :- *(10) Project [c_customer_sk#46, c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43]
      :                             :     :  +- *(10) Filter (isnotnull(c_customer_sk#46) AND isnotnull(c_customer_id#36))
      :                             :     :     +- *(10) ColumnarToRow
      :                             :     :        +- FileScan parquet default.customer[c_customer_sk#46,c_customer_id#36,c_first_name#37,c_last_name#38,c_preferred_cust_flag#40,c_birth_country#41,c_login#42,c_email_address#43] Batched: true, DataFilters: [isnotnull(c_customer_sk#46), isnotnull(c_customer_id#36)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
      :                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint))), [id=#165]
      :                             :        +- *(8) Project [ws_sold_date_sk#108, ws_bill_customer_sk#107, ws_ext_discount_amt#106, ws_ext_list_price#105]
      :                             :           +- *(8) Filter (isnotnull(ws_bill_customer_sk#107) AND isnotnull(ws_sold_date_sk#108))
      :                             :              +- *(8) ColumnarToRow
      :                             :                 +- FileScan parquet default.web_sales[ws_sold_date_sk#108,ws_bill_customer_sk#107,ws_ext_discount_amt#106,ws_ext_list_price#105] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#107), isnotnull(ws_sold_date_sk#108)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_p...
      :                             +- ReusedExchange [d_date_sk#49, d_year#39], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint))), [id=#157]
      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true])), [id=#166]
         +- *(15) HashAggregate(keys=[c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39], functions=[sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#105 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#106 as decimal(8,2)))), DecimalType(8,2), true)))], output=[customer_id#25, year_total#34])
            +- Exchange hashpartitioning(c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39, 5), true, [id=#167]
               +- *(14) HashAggregate(keys=[c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39], functions=[partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#105 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#106 as decimal(8,2)))), DecimalType(8,2), true)))], output=[c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, d_year#39, sum#168])
                  +- *(14) Project [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, ws_ext_discount_amt#106, ws_ext_list_price#105, d_year#39]
                     +- *(14) BroadcastHashJoin [ws_sold_date_sk#108], [d_date_sk#49], Inner, BuildRight
                        :- *(14) Project [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43, ws_sold_date_sk#108, ws_ext_discount_amt#106, ws_ext_list_price#105]
                        :  +- *(14) BroadcastHashJoin [c_customer_sk#46], [ws_bill_customer_sk#107], Inner, BuildRight
                        :     :- *(14) Project [c_customer_sk#46, c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#40, c_birth_country#41, c_login#42, c_email_address#43]
                        :     :  +- *(14) Filter (isnotnull(c_customer_sk#46) AND isnotnull(c_customer_id#36))
                        :     :     +- *(14) ColumnarToRow
                        :     :        +- FileScan parquet default.customer[c_customer_sk#46,c_customer_id#36,c_first_name#37,c_last_name#38,c_preferred_cust_flag#40,c_birth_country#41,c_login#42,c_email_address#43] Batched: true, DataFilters: [isnotnull(c_customer_sk#46), isnotnull(c_customer_id#36)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
                        :     +- ReusedExchange [ws_sold_date_sk#108, ws_bill_customer_sk#107, ws_ext_discount_amt#106, ws_ext_list_price#105], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint))), [id=#165]
                        +- ReusedExchange [d_date_sk#49, d_year#39], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint))), [id=#161]
