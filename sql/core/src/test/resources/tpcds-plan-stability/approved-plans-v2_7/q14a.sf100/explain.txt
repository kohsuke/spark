== Physical Plan ==
TakeOrderedAndProject (166)
+- * HashAggregate (165)
   +- Exchange (164)
      +- * HashAggregate (163)
         +- Union (162)
            :- * HashAggregate (156)
            :  +- Exchange (155)
            :     +- * HashAggregate (154)
            :        +- Union (153)
            :           :- * HashAggregate (147)
            :           :  +- Exchange (146)
            :           :     +- * HashAggregate (145)
            :           :        +- Union (144)
            :           :           :- * HashAggregate (138)
            :           :           :  +- Exchange (137)
            :           :           :     +- * HashAggregate (136)
            :           :           :        +- Union (135)
            :           :           :           :- * HashAggregate (129)
            :           :           :           :  +- Exchange (128)
            :           :           :           :     +- * HashAggregate (127)
            :           :           :           :        +- Union (126)
            :           :           :           :           :- * Project (87)
            :           :           :           :           :  +- * Filter (86)
            :           :           :           :           :     +- * HashAggregate (85)
            :           :           :           :           :        +- Exchange (84)
            :           :           :           :           :           +- * HashAggregate (83)
            :           :           :           :           :              +- * Project (82)
            :           :           :           :           :                 +- * BroadcastHashJoin Inner BuildRight (81)
            :           :           :           :           :                    :- * Project (71)
            :           :           :           :           :                    :  +- * BroadcastHashJoin Inner BuildRight (70)
            :           :           :           :           :                    :     :- SortMergeJoin LeftSemi (64)
            :           :           :           :           :                    :     :  :- * Sort (5)
            :           :           :           :           :                    :     :  :  +- Exchange (4)
            :           :           :           :           :                    :     :  :     +- * Filter (3)
            :           :           :           :           :                    :     :  :        +- * ColumnarToRow (2)
            :           :           :           :           :                    :     :  :           +- Scan parquet default.store_sales (1)
            :           :           :           :           :                    :     :  +- * Sort (63)
            :           :           :           :           :                    :     :     +- Exchange (62)
            :           :           :           :           :                    :     :        +- * Project (61)
            :           :           :           :           :                    :     :           +- * BroadcastHashJoin Inner BuildRight (60)
            :           :           :           :           :                    :     :              :- * Filter (8)
            :           :           :           :           :                    :     :              :  +- * ColumnarToRow (7)
            :           :           :           :           :                    :     :              :     +- Scan parquet default.item (6)
            :           :           :           :           :                    :     :              +- BroadcastExchange (59)
            :           :           :           :           :                    :     :                 +- * HashAggregate (58)
            :           :           :           :           :                    :     :                    +- * HashAggregate (57)
            :           :           :           :           :                    :     :                       +- * HashAggregate (56)
            :           :           :           :           :                    :     :                          +- Exchange (55)
            :           :           :           :           :                    :     :                             +- * HashAggregate (54)
            :           :           :           :           :                    :     :                                +- SortMergeJoin LeftSemi (53)
            :           :           :           :           :                    :     :                                   :- SortMergeJoin LeftSemi (41)
            :           :           :           :           :                    :     :                                   :  :- * Sort (26)
            :           :           :           :           :                    :     :                                   :  :  +- Exchange (25)
            :           :           :           :           :                    :     :                                   :  :     +- * Project (24)
            :           :           :           :           :                    :     :                                   :  :        +- * BroadcastHashJoin Inner BuildRight (23)
            :           :           :           :           :                    :     :                                   :  :           :- * Project (18)
            :           :           :           :           :                    :     :                                   :  :           :  +- * BroadcastHashJoin Inner BuildRight (17)
            :           :           :           :           :                    :     :                                   :  :           :     :- * Filter (11)
            :           :           :           :           :                    :     :                                   :  :           :     :  +- * ColumnarToRow (10)
            :           :           :           :           :                    :     :                                   :  :           :     :     +- Scan parquet default.store_sales (9)
            :           :           :           :           :                    :     :                                   :  :           :     +- BroadcastExchange (16)
            :           :           :           :           :                    :     :                                   :  :           :        +- * Project (15)
            :           :           :           :           :                    :     :                                   :  :           :           +- * Filter (14)
            :           :           :           :           :                    :     :                                   :  :           :              +- * ColumnarToRow (13)
            :           :           :           :           :                    :     :                                   :  :           :                 +- Scan parquet default.date_dim (12)
            :           :           :           :           :                    :     :                                   :  :           +- BroadcastExchange (22)
            :           :           :           :           :                    :     :                                   :  :              +- * Filter (21)
            :           :           :           :           :                    :     :                                   :  :                 +- * ColumnarToRow (20)
            :           :           :           :           :                    :     :                                   :  :                    +- Scan parquet default.item (19)
            :           :           :           :           :                    :     :                                   :  +- * Sort (40)
            :           :           :           :           :                    :     :                                   :     +- Exchange (39)
            :           :           :           :           :                    :     :                                   :        +- * Project (38)
            :           :           :           :           :                    :     :                                   :           +- * BroadcastHashJoin Inner BuildRight (37)
            :           :           :           :           :                    :     :                                   :              :- * Project (32)
            :           :           :           :           :                    :     :                                   :              :  +- * BroadcastHashJoin Inner BuildRight (31)
            :           :           :           :           :                    :     :                                   :              :     :- * Filter (29)
            :           :           :           :           :                    :     :                                   :              :     :  +- * ColumnarToRow (28)
            :           :           :           :           :                    :     :                                   :              :     :     +- Scan parquet default.catalog_sales (27)
            :           :           :           :           :                    :     :                                   :              :     +- ReusedExchange (30)
            :           :           :           :           :                    :     :                                   :              +- BroadcastExchange (36)
            :           :           :           :           :                    :     :                                   :                 +- * Filter (35)
            :           :           :           :           :                    :     :                                   :                    +- * ColumnarToRow (34)
            :           :           :           :           :                    :     :                                   :                       +- Scan parquet default.item (33)
            :           :           :           :           :                    :     :                                   +- * Sort (52)
            :           :           :           :           :                    :     :                                      +- Exchange (51)
            :           :           :           :           :                    :     :                                         +- * Project (50)
            :           :           :           :           :                    :     :                                            +- * BroadcastHashJoin Inner BuildRight (49)
            :           :           :           :           :                    :     :                                               :- * Project (47)
            :           :           :           :           :                    :     :                                               :  +- * BroadcastHashJoin Inner BuildRight (46)
            :           :           :           :           :                    :     :                                               :     :- * Filter (44)
            :           :           :           :           :                    :     :                                               :     :  +- * ColumnarToRow (43)
            :           :           :           :           :                    :     :                                               :     :     +- Scan parquet default.web_sales (42)
            :           :           :           :           :                    :     :                                               :     +- ReusedExchange (45)
            :           :           :           :           :                    :     :                                               +- ReusedExchange (48)
            :           :           :           :           :                    :     +- BroadcastExchange (69)
            :           :           :           :           :                    :        +- * Project (68)
            :           :           :           :           :                    :           +- * Filter (67)
            :           :           :           :           :                    :              +- * ColumnarToRow (66)
            :           :           :           :           :                    :                 +- Scan parquet default.date_dim (65)
            :           :           :           :           :                    +- BroadcastExchange (80)
            :           :           :           :           :                       +- SortMergeJoin LeftSemi (79)
            :           :           :           :           :                          :- * Sort (76)
            :           :           :           :           :                          :  +- Exchange (75)
            :           :           :           :           :                          :     +- * Filter (74)
            :           :           :           :           :                          :        +- * ColumnarToRow (73)
            :           :           :           :           :                          :           +- Scan parquet default.item (72)
            :           :           :           :           :                          +- * Sort (78)
            :           :           :           :           :                             +- ReusedExchange (77)
            :           :           :           :           :- * Project (106)
            :           :           :           :           :  +- * Filter (105)
            :           :           :           :           :     +- * HashAggregate (104)
            :           :           :           :           :        +- Exchange (103)
            :           :           :           :           :           +- * HashAggregate (102)
            :           :           :           :           :              +- * Project (101)
            :           :           :           :           :                 +- * BroadcastHashJoin Inner BuildRight (100)
            :           :           :           :           :                    :- * Project (98)
            :           :           :           :           :                    :  +- * BroadcastHashJoin Inner BuildRight (97)
            :           :           :           :           :                    :     :- SortMergeJoin LeftSemi (95)
            :           :           :           :           :                    :     :  :- * Sort (92)
            :           :           :           :           :                    :     :  :  +- Exchange (91)
            :           :           :           :           :                    :     :  :     +- * Filter (90)
            :           :           :           :           :                    :     :  :        +- * ColumnarToRow (89)
            :           :           :           :           :                    :     :  :           +- Scan parquet default.catalog_sales (88)
            :           :           :           :           :                    :     :  +- * Sort (94)
            :           :           :           :           :                    :     :     +- ReusedExchange (93)
            :           :           :           :           :                    :     +- ReusedExchange (96)
            :           :           :           :           :                    +- ReusedExchange (99)
            :           :           :           :           +- * Project (125)
            :           :           :           :              +- * Filter (124)
            :           :           :           :                 +- * HashAggregate (123)
            :           :           :           :                    +- Exchange (122)
            :           :           :           :                       +- * HashAggregate (121)
            :           :           :           :                          +- * Project (120)
            :           :           :           :                             +- * BroadcastHashJoin Inner BuildRight (119)
            :           :           :           :                                :- * Project (117)
            :           :           :           :                                :  +- * BroadcastHashJoin Inner BuildRight (116)
            :           :           :           :                                :     :- SortMergeJoin LeftSemi (114)
            :           :           :           :                                :     :  :- * Sort (111)
            :           :           :           :                                :     :  :  +- Exchange (110)
            :           :           :           :                                :     :  :     +- * Filter (109)
            :           :           :           :                                :     :  :        +- * ColumnarToRow (108)
            :           :           :           :                                :     :  :           +- Scan parquet default.web_sales (107)
            :           :           :           :                                :     :  +- * Sort (113)
            :           :           :           :                                :     :     +- ReusedExchange (112)
            :           :           :           :                                :     +- ReusedExchange (115)
            :           :           :           :                                +- ReusedExchange (118)
            :           :           :           +- * HashAggregate (134)
            :           :           :              +- Exchange (133)
            :           :           :                 +- * HashAggregate (132)
            :           :           :                    +- * HashAggregate (131)
            :           :           :                       +- ReusedExchange (130)
            :           :           +- * HashAggregate (143)
            :           :              +- Exchange (142)
            :           :                 +- * HashAggregate (141)
            :           :                    +- * HashAggregate (140)
            :           :                       +- ReusedExchange (139)
            :           +- * HashAggregate (152)
            :              +- Exchange (151)
            :                 +- * HashAggregate (150)
            :                    +- * HashAggregate (149)
            :                       +- ReusedExchange (148)
            +- * HashAggregate (161)
               +- Exchange (160)
                  +- * HashAggregate (159)
                     +- * HashAggregate (158)
                        +- ReusedExchange (157)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Exchange
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: hashpartitioning(ss_item_sk#2, 5), true, [id=#5]

(5) Sort [codegen id : 2]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(8) Filter [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(9) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(10) ColumnarToRow [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(11) Filter [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(16) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(18) Project [codegen id : 5]
Output [1]: [ss_item_sk#2]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, d_date_sk#10]

(19) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(22) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(24) Project [codegen id : 5]
Output [3]: [i_brand_id#7 AS brand_id#14, i_class_id#8 AS class_id#15, i_category_id#9 AS category_id#16]
Input [5]: [ss_item_sk#2, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(25) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16), 5), true, [id=#17]

(26) Sort [codegen id : 6]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: [coalesce(brand_id#14, 0) ASC NULLS FIRST, isnull(brand_id#14) ASC NULLS FIRST, coalesce(class_id#15, 0) ASC NULLS FIRST, isnull(class_id#15) ASC NULLS FIRST, coalesce(category_id#16, 0) ASC NULLS FIRST, isnull(category_id#16) ASC NULLS FIRST], false, 0

(27) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#18, cs_item_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(28) ColumnarToRow [codegen id : 9]
Input [2]: [cs_sold_date_sk#18, cs_item_sk#19]

(29) Filter [codegen id : 9]
Input [2]: [cs_sold_date_sk#18, cs_item_sk#19]
Condition : (isnotnull(cs_item_sk#19) AND isnotnull(cs_sold_date_sk#18))

(30) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#10]

(31) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(32) Project [codegen id : 9]
Output [1]: [cs_item_sk#19]
Input [3]: [cs_sold_date_sk#18, cs_item_sk#19, d_date_sk#10]

(33) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(34) ColumnarToRow [codegen id : 8]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(35) Filter [codegen id : 8]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(36) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20]

(37) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#6]
Join condition: None

(38) Project [codegen id : 9]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [cs_item_sk#19, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(39) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9), 5), true, [id=#21]

(40) Sort [codegen id : 10]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [coalesce(i_brand_id#7, 0) ASC NULLS FIRST, isnull(i_brand_id#7) ASC NULLS FIRST, coalesce(i_class_id#8, 0) ASC NULLS FIRST, isnull(i_class_id#8) ASC NULLS FIRST, coalesce(i_category_id#9, 0) ASC NULLS FIRST, isnull(i_category_id#9) ASC NULLS FIRST], false, 0

(41) SortMergeJoin
Left keys [6]: [coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(42) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#22, ws_item_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(43) ColumnarToRow [codegen id : 13]
Input [2]: [ws_sold_date_sk#22, ws_item_sk#23]

(44) Filter [codegen id : 13]
Input [2]: [ws_sold_date_sk#22, ws_item_sk#23]
Condition : (isnotnull(ws_item_sk#23) AND isnotnull(ws_sold_date_sk#22))

(45) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#10]

(46) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#10]
Join condition: None

(47) Project [codegen id : 13]
Output [1]: [ws_item_sk#23]
Input [3]: [ws_sold_date_sk#22, ws_item_sk#23, d_date_sk#10]

(48) ReusedExchange [Reuses operator id: 36]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(49) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [i_item_sk#6]
Join condition: None

(50) Project [codegen id : 13]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [ws_item_sk#23, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(51) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9), 5), true, [id=#24]

(52) Sort [codegen id : 14]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [coalesce(i_brand_id#7, 0) ASC NULLS FIRST, isnull(i_brand_id#7) ASC NULLS FIRST, coalesce(i_class_id#8, 0) ASC NULLS FIRST, isnull(i_class_id#8) ASC NULLS FIRST, coalesce(i_category_id#9, 0) ASC NULLS FIRST, isnull(i_category_id#9) ASC NULLS FIRST], false, 0

(53) SortMergeJoin
Left keys [6]: [coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(54) HashAggregate [codegen id : 15]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(55) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(brand_id#14, class_id#15, category_id#16, 5), true, [id=#25]

(56) HashAggregate [codegen id : 16]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(57) HashAggregate [codegen id : 16]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(58) HashAggregate [codegen id : 16]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(59) BroadcastExchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#26]

(60) BroadcastHashJoin [codegen id : 17]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#14, class_id#15, category_id#16]
Join condition: None

(61) Project [codegen id : 17]
Output [1]: [i_item_sk#6 AS ss_item_sk#27]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#14, class_id#15, category_id#16]

(62) Exchange
Input [1]: [ss_item_sk#27]
Arguments: hashpartitioning(ss_item_sk#27, 5), true, [id=#28]

(63) Sort [codegen id : 18]
Input [1]: [ss_item_sk#27]
Arguments: [ss_item_sk#27 ASC NULLS FIRST], false, 0

(64) SortMergeJoin
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(65) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(66) ColumnarToRow [codegen id : 19]
Input [3]: [d_date_sk#10, d_year#11, d_moy#29]

(67) Filter [codegen id : 19]
Input [3]: [d_date_sk#10, d_year#11, d_moy#29]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#29)) AND (d_year#11 = 2000)) AND (d_moy#29 = 11)) AND isnotnull(d_date_sk#10))

(68) Project [codegen id : 19]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#29]

(69) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30]

(70) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(71) Project [codegen id : 38]
Output [3]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(72) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(73) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(74) Filter [codegen id : 20]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(75) Exchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(i_item_sk#6, 5), true, [id=#31]

(76) Sort [codegen id : 21]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [i_item_sk#6 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#27]

(78) Sort [codegen id : 37]
Input [1]: [ss_item_sk#27]
Arguments: [ss_item_sk#27 ASC NULLS FIRST], false, 0

(79) SortMergeJoin
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(80) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#32]

(81) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(82) Project [codegen id : 38]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(83) HashAggregate [codegen id : 38]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#33, isEmpty#34, count#35]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#36, isEmpty#37, count#38]

(84) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#36, isEmpty#37, count#38]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), true, [id=#39]

(85) HashAggregate [codegen id : 39]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#36, isEmpty#37, count#38]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#40, count(1)#41]
Results [7]: [store AS channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#40 AS sales#43, count(1)#41 AS number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#40 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45]

(86) Filter [codegen id : 39]
Input [7]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45 as decimal(32,6)) > cast(Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(87) Project [codegen id : 39]
Output [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Input [7]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45]

(88) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#48, cs_list_price#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(89) ColumnarToRow [codegen id : 40]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#48, cs_list_price#49]

(90) Filter [codegen id : 40]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#48, cs_list_price#49]
Condition : (isnotnull(cs_item_sk#19) AND isnotnull(cs_sold_date_sk#18))

(91) Exchange
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#48, cs_list_price#49]
Arguments: hashpartitioning(cs_item_sk#19, 5), true, [id=#50]

(92) Sort [codegen id : 41]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#48, cs_list_price#49]
Arguments: [cs_item_sk#19 ASC NULLS FIRST], false, 0

(93) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#27]

(94) Sort [codegen id : 57]
Input [1]: [ss_item_sk#27]
Arguments: [ss_item_sk#27 ASC NULLS FIRST], false, 0

(95) SortMergeJoin
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(96) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#10]

(97) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(98) Project [codegen id : 77]
Output [3]: [cs_item_sk#19, cs_quantity#48, cs_list_price#49]
Input [5]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#48, cs_list_price#49, d_date_sk#10]

(99) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(100) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#6]
Join condition: None

(101) Project [codegen id : 77]
Output [5]: [cs_quantity#48, cs_list_price#49, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [cs_item_sk#19, cs_quantity#48, cs_list_price#49, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(102) HashAggregate [codegen id : 77]
Input [5]: [cs_quantity#48, cs_list_price#49, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#51, isEmpty#52, count#53]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#54, isEmpty#55, count#56]

(103) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#54, isEmpty#55, count#56]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), true, [id=#57]

(104) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#54, isEmpty#55, count#56]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#58, count(1)#59]
Results [7]: [catalog AS channel#60, i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#58 AS sales#61, count(1)#59 AS number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#58 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#63]

(105) Filter [codegen id : 78]
Input [7]: [channel#60, i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#63]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#63) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#63 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(106) Project [codegen id : 78]
Output [6]: [channel#60, i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62]
Input [7]: [channel#60, i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#63]

(107) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#64, ws_list_price#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(108) ColumnarToRow [codegen id : 79]
Input [4]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#64, ws_list_price#65]

(109) Filter [codegen id : 79]
Input [4]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#64, ws_list_price#65]
Condition : (isnotnull(ws_item_sk#23) AND isnotnull(ws_sold_date_sk#22))

(110) Exchange
Input [4]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#64, ws_list_price#65]
Arguments: hashpartitioning(ws_item_sk#23, 5), true, [id=#66]

(111) Sort [codegen id : 80]
Input [4]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#64, ws_list_price#65]
Arguments: [ws_item_sk#23 ASC NULLS FIRST], false, 0

(112) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#27]

(113) Sort [codegen id : 96]
Input [1]: [ss_item_sk#27]
Arguments: [ss_item_sk#27 ASC NULLS FIRST], false, 0

(114) SortMergeJoin
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(115) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#10]

(116) BroadcastHashJoin [codegen id : 116]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#10]
Join condition: None

(117) Project [codegen id : 116]
Output [3]: [ws_item_sk#23, ws_quantity#64, ws_list_price#65]
Input [5]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#64, ws_list_price#65, d_date_sk#10]

(118) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(119) BroadcastHashJoin [codegen id : 116]
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [i_item_sk#6]
Join condition: None

(120) Project [codegen id : 116]
Output [5]: [ws_quantity#64, ws_list_price#65, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ws_item_sk#23, ws_quantity#64, ws_list_price#65, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(121) HashAggregate [codegen id : 116]
Input [5]: [ws_quantity#64, ws_list_price#65, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#67, isEmpty#68, count#69]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#70, isEmpty#71, count#72]

(122) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#70, isEmpty#71, count#72]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), true, [id=#73]

(123) HashAggregate [codegen id : 117]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#70, isEmpty#71, count#72]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#74, count(1)#75]
Results [7]: [web AS channel#76, i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#74 AS sales#77, count(1)#75 AS number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#74 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#79]

(124) Filter [codegen id : 117]
Input [7]: [channel#76, i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#79]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#79) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#79 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(125) Project [codegen id : 117]
Output [6]: [channel#76, i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78]
Input [7]: [channel#76, i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#79]

(126) Union

(127) HashAggregate [codegen id : 118]
Input [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Keys [4]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#43), partial_sum(number_sales#44)]
Aggregate Attributes [3]: [sum#80, isEmpty#81, sum#82]
Results [7]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum#83, isEmpty#84, sum#85]

(128) Exchange
Input [7]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum#83, isEmpty#84, sum#85]
Arguments: hashpartitioning(channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, 5), true, [id=#86]

(129) HashAggregate [codegen id : 119]
Input [7]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum#83, isEmpty#84, sum#85]
Keys [4]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#87, sum(number_sales#44)#88]
Results [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum(sales#43)#87 AS sum_sales#89, sum(number_sales#44)#88 AS number_sales#90]

(130) ReusedExchange [Reuses operator id: 128]
Output [7]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum#91, isEmpty#92, sum#93]

(131) HashAggregate [codegen id : 238]
Input [7]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum#91, isEmpty#92, sum#93]
Keys [4]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#94, sum(number_sales#44)#95]
Results [5]: [channel#42, i_brand_id#7, i_class_id#8, sum(sales#43)#94 AS sum_sales#89, sum(number_sales#44)#95 AS number_sales#90]

(132) HashAggregate [codegen id : 238]
Input [5]: [channel#42, i_brand_id#7, i_class_id#8, sum_sales#89, number_sales#90]
Keys [3]: [channel#42, i_brand_id#7, i_class_id#8]
Functions [2]: [partial_sum(sum_sales#89), partial_sum(number_sales#90)]
Aggregate Attributes [3]: [sum#96, isEmpty#97, sum#98]
Results [6]: [channel#42, i_brand_id#7, i_class_id#8, sum#99, isEmpty#100, sum#101]

(133) Exchange
Input [6]: [channel#42, i_brand_id#7, i_class_id#8, sum#99, isEmpty#100, sum#101]
Arguments: hashpartitioning(channel#42, i_brand_id#7, i_class_id#8, 5), true, [id=#102]

(134) HashAggregate [codegen id : 239]
Input [6]: [channel#42, i_brand_id#7, i_class_id#8, sum#99, isEmpty#100, sum#101]
Keys [3]: [channel#42, i_brand_id#7, i_class_id#8]
Functions [2]: [sum(sum_sales#89), sum(number_sales#90)]
Aggregate Attributes [2]: [sum(sum_sales#89)#103, sum(number_sales#90)#104]
Results [6]: [channel#42, i_brand_id#7, i_class_id#8, null AS i_category_id#105, sum(sum_sales#89)#103 AS sum(sum_sales)#106, sum(number_sales#90)#104 AS sum(number_sales)#107]

(135) Union

(136) HashAggregate [codegen id : 240]
Input [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Keys [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]

(137) Exchange
Input [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Arguments: hashpartitioning(channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90, 5), true, [id=#108]

(138) HashAggregate [codegen id : 241]
Input [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Keys [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]

(139) ReusedExchange [Reuses operator id: 128]
Output [7]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum#109, isEmpty#110, sum#111]

(140) HashAggregate [codegen id : 360]
Input [7]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum#109, isEmpty#110, sum#111]
Keys [4]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#112, sum(number_sales#44)#113]
Results [4]: [channel#42, i_brand_id#7, sum(sales#43)#112 AS sum_sales#89, sum(number_sales#44)#113 AS number_sales#90]

(141) HashAggregate [codegen id : 360]
Input [4]: [channel#42, i_brand_id#7, sum_sales#89, number_sales#90]
Keys [2]: [channel#42, i_brand_id#7]
Functions [2]: [partial_sum(sum_sales#89), partial_sum(number_sales#90)]
Aggregate Attributes [3]: [sum#114, isEmpty#115, sum#116]
Results [5]: [channel#42, i_brand_id#7, sum#117, isEmpty#118, sum#119]

(142) Exchange
Input [5]: [channel#42, i_brand_id#7, sum#117, isEmpty#118, sum#119]
Arguments: hashpartitioning(channel#42, i_brand_id#7, 5), true, [id=#120]

(143) HashAggregate [codegen id : 361]
Input [5]: [channel#42, i_brand_id#7, sum#117, isEmpty#118, sum#119]
Keys [2]: [channel#42, i_brand_id#7]
Functions [2]: [sum(sum_sales#89), sum(number_sales#90)]
Aggregate Attributes [2]: [sum(sum_sales#89)#121, sum(number_sales#90)#122]
Results [6]: [channel#42, i_brand_id#7, null AS i_class_id#123, null AS i_category_id#124, sum(sum_sales#89)#121 AS sum(sum_sales)#125, sum(number_sales#90)#122 AS sum(number_sales)#126]

(144) Union

(145) HashAggregate [codegen id : 362]
Input [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Keys [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]

(146) Exchange
Input [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Arguments: hashpartitioning(channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90, 5), true, [id=#127]

(147) HashAggregate [codegen id : 363]
Input [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Keys [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]

(148) ReusedExchange [Reuses operator id: 128]
Output [7]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum#128, isEmpty#129, sum#130]

(149) HashAggregate [codegen id : 482]
Input [7]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum#128, isEmpty#129, sum#130]
Keys [4]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#131, sum(number_sales#44)#132]
Results [3]: [channel#42, sum(sales#43)#131 AS sum_sales#89, sum(number_sales#44)#132 AS number_sales#90]

(150) HashAggregate [codegen id : 482]
Input [3]: [channel#42, sum_sales#89, number_sales#90]
Keys [1]: [channel#42]
Functions [2]: [partial_sum(sum_sales#89), partial_sum(number_sales#90)]
Aggregate Attributes [3]: [sum#133, isEmpty#134, sum#135]
Results [4]: [channel#42, sum#136, isEmpty#137, sum#138]

(151) Exchange
Input [4]: [channel#42, sum#136, isEmpty#137, sum#138]
Arguments: hashpartitioning(channel#42, 5), true, [id=#139]

(152) HashAggregate [codegen id : 483]
Input [4]: [channel#42, sum#136, isEmpty#137, sum#138]
Keys [1]: [channel#42]
Functions [2]: [sum(sum_sales#89), sum(number_sales#90)]
Aggregate Attributes [2]: [sum(sum_sales#89)#140, sum(number_sales#90)#141]
Results [6]: [channel#42, null AS i_brand_id#142, null AS i_class_id#143, null AS i_category_id#144, sum(sum_sales#89)#140 AS sum(sum_sales)#145, sum(number_sales#90)#141 AS sum(number_sales)#146]

(153) Union

(154) HashAggregate [codegen id : 484]
Input [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Keys [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]

(155) Exchange
Input [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Arguments: hashpartitioning(channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90, 5), true, [id=#147]

(156) HashAggregate [codegen id : 485]
Input [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Keys [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]

(157) ReusedExchange [Reuses operator id: 128]
Output [7]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum#148, isEmpty#149, sum#150]

(158) HashAggregate [codegen id : 604]
Input [7]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum#148, isEmpty#149, sum#150]
Keys [4]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#151, sum(number_sales#44)#152]
Results [2]: [sum(sales#43)#151 AS sum_sales#89, sum(number_sales#44)#152 AS number_sales#90]

(159) HashAggregate [codegen id : 604]
Input [2]: [sum_sales#89, number_sales#90]
Keys: []
Functions [2]: [partial_sum(sum_sales#89), partial_sum(number_sales#90)]
Aggregate Attributes [3]: [sum#153, isEmpty#154, sum#155]
Results [3]: [sum#156, isEmpty#157, sum#158]

(160) Exchange
Input [3]: [sum#156, isEmpty#157, sum#158]
Arguments: SinglePartition, true, [id=#159]

(161) HashAggregate [codegen id : 605]
Input [3]: [sum#156, isEmpty#157, sum#158]
Keys: []
Functions [2]: [sum(sum_sales#89), sum(number_sales#90)]
Aggregate Attributes [2]: [sum(sum_sales#89)#160, sum(number_sales#90)#161]
Results [6]: [null AS channel#162, null AS i_brand_id#163, null AS i_class_id#164, null AS i_category_id#165, sum(sum_sales#89)#160 AS sum(sum_sales)#166, sum(number_sales#90)#161 AS sum(number_sales)#167]

(162) Union

(163) HashAggregate [codegen id : 606]
Input [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Keys [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]

(164) Exchange
Input [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Arguments: hashpartitioning(channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90, 5), true, [id=#168]

(165) HashAggregate [codegen id : 607]
Input [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Keys [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]

(166) TakeOrderedAndProject
Input [6]: [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]
Arguments: 100, [channel#42 ASC NULLS FIRST, i_brand_id#7 ASC NULLS FIRST, i_class_id#8 ASC NULLS FIRST, i_category_id#9 ASC NULLS FIRST], [channel#42, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#89, number_sales#90]

===== Subqueries =====

Subquery:1 Hosting operator id = 86 Hosting Expression = Subquery scalar-subquery#46, [id=#47]
* HashAggregate (192)
+- Exchange (191)
   +- * HashAggregate (190)
      +- Union (189)
         :- * Project (172)
         :  +- * BroadcastHashJoin Inner BuildRight (171)
         :     :- * Filter (169)
         :     :  +- * ColumnarToRow (168)
         :     :     +- Scan parquet default.store_sales (167)
         :     +- ReusedExchange (170)
         :- * Project (182)
         :  +- * BroadcastHashJoin Inner BuildRight (181)
         :     :- * Filter (175)
         :     :  +- * ColumnarToRow (174)
         :     :     +- Scan parquet default.catalog_sales (173)
         :     +- BroadcastExchange (180)
         :        +- * Project (179)
         :           +- * Filter (178)
         :              +- * ColumnarToRow (177)
         :                 +- Scan parquet default.date_dim (176)
         +- * Project (188)
            +- * BroadcastHashJoin Inner BuildRight (187)
               :- * Filter (185)
               :  +- * ColumnarToRow (184)
               :     +- Scan parquet default.web_sales (183)
               +- ReusedExchange (186)


(167) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(168) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(169) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(170) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#10]

(171) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(172) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#169, ss_list_price#4 AS list_price#170]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(173) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#18, cs_quantity#48, cs_list_price#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(174) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#18, cs_quantity#48, cs_list_price#49]

(175) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#18, cs_quantity#48, cs_list_price#49]
Condition : isnotnull(cs_sold_date_sk#18)

(176) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(177) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]

(178) Filter [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1998)) AND (d_year#11 <= 2000)) AND isnotnull(d_date_sk#10))

(179) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(180) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#171]

(181) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(182) Project [codegen id : 4]
Output [2]: [cs_quantity#48 AS quantity#172, cs_list_price#49 AS list_price#173]
Input [4]: [cs_sold_date_sk#18, cs_quantity#48, cs_list_price#49, d_date_sk#10]

(183) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#22, ws_quantity#64, ws_list_price#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(184) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#22, ws_quantity#64, ws_list_price#65]

(185) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#22, ws_quantity#64, ws_list_price#65]
Condition : isnotnull(ws_sold_date_sk#22)

(186) ReusedExchange [Reuses operator id: 180]
Output [1]: [d_date_sk#10]

(187) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#10]
Join condition: None

(188) Project [codegen id : 6]
Output [2]: [ws_quantity#64 AS quantity#174, ws_list_price#65 AS list_price#175]
Input [4]: [ws_sold_date_sk#22, ws_quantity#64, ws_list_price#65, d_date_sk#10]

(189) Union

(190) HashAggregate [codegen id : 7]
Input [2]: [quantity#169, list_price#170]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#169 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#170 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#176, count#177]
Results [2]: [sum#178, count#179]

(191) Exchange
Input [2]: [sum#178, count#179]
Arguments: SinglePartition, true, [id=#180]

(192) HashAggregate [codegen id : 8]
Input [2]: [sum#178, count#179]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#169 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#170 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#169 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#170 as decimal(12,2)))), DecimalType(18,2), true))#181]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#169 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#170 as decimal(12,2)))), DecimalType(18,2), true))#181 AS average_sales#182]

Subquery:2 Hosting operator id = 105 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:3 Hosting operator id = 124 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]


