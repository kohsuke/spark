== Physical Plan ==
TakeOrderedAndProject (150)
+- * HashAggregate (149)
   +- Exchange (148)
      +- * HashAggregate (147)
         +- Union (146)
            :- * HashAggregate (140)
            :  +- Exchange (139)
            :     +- * HashAggregate (138)
            :        +- Union (137)
            :           :- * HashAggregate (131)
            :           :  +- Exchange (130)
            :           :     +- * HashAggregate (129)
            :           :        +- Union (128)
            :           :           :- * HashAggregate (122)
            :           :           :  +- Exchange (121)
            :           :           :     +- * HashAggregate (120)
            :           :           :        +- Union (119)
            :           :           :           :- * HashAggregate (113)
            :           :           :           :  +- Exchange (112)
            :           :           :           :     +- * HashAggregate (111)
            :           :           :           :        +- Union (110)
            :           :           :           :           :- * Project (77)
            :           :           :           :           :  +- * Filter (76)
            :           :           :           :           :     +- * HashAggregate (75)
            :           :           :           :           :        +- Exchange (74)
            :           :           :           :           :           +- * HashAggregate (73)
            :           :           :           :           :              +- * Project (72)
            :           :           :           :           :                 +- * BroadcastHashJoin Inner BuildRight (71)
            :           :           :           :           :                    :- * Project (65)
            :           :           :           :           :                    :  +- * BroadcastHashJoin Inner BuildRight (64)
            :           :           :           :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (57)
            :           :           :           :           :                    :     :  :- * Filter (3)
            :           :           :           :           :                    :     :  :  +- * ColumnarToRow (2)
            :           :           :           :           :                    :     :  :     +- Scan parquet default.store_sales (1)
            :           :           :           :           :                    :     :  +- BroadcastExchange (56)
            :           :           :           :           :                    :     :     +- * Project (55)
            :           :           :           :           :                    :     :        +- * BroadcastHashJoin Inner BuildRight (54)
            :           :           :           :           :                    :     :           :- * Filter (6)
            :           :           :           :           :                    :     :           :  +- * ColumnarToRow (5)
            :           :           :           :           :                    :     :           :     +- Scan parquet default.item (4)
            :           :           :           :           :                    :     :           +- BroadcastExchange (53)
            :           :           :           :           :                    :     :              +- * HashAggregate (52)
            :           :           :           :           :                    :     :                 +- * HashAggregate (51)
            :           :           :           :           :                    :     :                    +- * HashAggregate (50)
            :           :           :           :           :                    :     :                       +- Exchange (49)
            :           :           :           :           :                    :     :                          +- * HashAggregate (48)
            :           :           :           :           :                    :     :                             +- * BroadcastHashJoin LeftSemi BuildRight (47)
            :           :           :           :           :                    :     :                                :- * BroadcastHashJoin LeftSemi BuildRight (36)
            :           :           :           :           :                    :     :                                :  :- * Project (22)
            :           :           :           :           :                    :     :                                :  :  +- * BroadcastHashJoin Inner BuildRight (21)
            :           :           :           :           :                    :     :                                :  :     :- * Project (15)
            :           :           :           :           :                    :     :                                :  :     :  +- * BroadcastHashJoin Inner BuildRight (14)
            :           :           :           :           :                    :     :                                :  :     :     :- * Filter (9)
            :           :           :           :           :                    :     :                                :  :     :     :  +- * ColumnarToRow (8)
            :           :           :           :           :                    :     :                                :  :     :     :     +- Scan parquet default.store_sales (7)
            :           :           :           :           :                    :     :                                :  :     :     +- BroadcastExchange (13)
            :           :           :           :           :                    :     :                                :  :     :        +- * Filter (12)
            :           :           :           :           :                    :     :                                :  :     :           +- * ColumnarToRow (11)
            :           :           :           :           :                    :     :                                :  :     :              +- Scan parquet default.item (10)
            :           :           :           :           :                    :     :                                :  :     +- BroadcastExchange (20)
            :           :           :           :           :                    :     :                                :  :        +- * Project (19)
            :           :           :           :           :                    :     :                                :  :           +- * Filter (18)
            :           :           :           :           :                    :     :                                :  :              +- * ColumnarToRow (17)
            :           :           :           :           :                    :     :                                :  :                 +- Scan parquet default.date_dim (16)
            :           :           :           :           :                    :     :                                :  +- BroadcastExchange (35)
            :           :           :           :           :                    :     :                                :     +- * Project (34)
            :           :           :           :           :                    :     :                                :        +- * BroadcastHashJoin Inner BuildRight (33)
            :           :           :           :           :                    :     :                                :           :- * Project (31)
            :           :           :           :           :                    :     :                                :           :  +- * BroadcastHashJoin Inner BuildRight (30)
            :           :           :           :           :                    :     :                                :           :     :- * Filter (25)
            :           :           :           :           :                    :     :                                :           :     :  +- * ColumnarToRow (24)
            :           :           :           :           :                    :     :                                :           :     :     +- Scan parquet default.catalog_sales (23)
            :           :           :           :           :                    :     :                                :           :     +- BroadcastExchange (29)
            :           :           :           :           :                    :     :                                :           :        +- * Filter (28)
            :           :           :           :           :                    :     :                                :           :           +- * ColumnarToRow (27)
            :           :           :           :           :                    :     :                                :           :              +- Scan parquet default.item (26)
            :           :           :           :           :                    :     :                                :           +- ReusedExchange (32)
            :           :           :           :           :                    :     :                                +- BroadcastExchange (46)
            :           :           :           :           :                    :     :                                   +- * Project (45)
            :           :           :           :           :                    :     :                                      +- * BroadcastHashJoin Inner BuildRight (44)
            :           :           :           :           :                    :     :                                         :- * Project (42)
            :           :           :           :           :                    :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (41)
            :           :           :           :           :                    :     :                                         :     :- * Filter (39)
            :           :           :           :           :                    :     :                                         :     :  +- * ColumnarToRow (38)
            :           :           :           :           :                    :     :                                         :     :     +- Scan parquet default.web_sales (37)
            :           :           :           :           :                    :     :                                         :     +- ReusedExchange (40)
            :           :           :           :           :                    :     :                                         +- ReusedExchange (43)
            :           :           :           :           :                    :     +- BroadcastExchange (63)
            :           :           :           :           :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (62)
            :           :           :           :           :                    :           :- * Filter (60)
            :           :           :           :           :                    :           :  +- * ColumnarToRow (59)
            :           :           :           :           :                    :           :     +- Scan parquet default.item (58)
            :           :           :           :           :                    :           +- ReusedExchange (61)
            :           :           :           :           :                    +- BroadcastExchange (70)
            :           :           :           :           :                       +- * Project (69)
            :           :           :           :           :                          +- * Filter (68)
            :           :           :           :           :                             +- * ColumnarToRow (67)
            :           :           :           :           :                                +- Scan parquet default.date_dim (66)
            :           :           :           :           :- * Project (93)
            :           :           :           :           :  +- * Filter (92)
            :           :           :           :           :     +- * HashAggregate (91)
            :           :           :           :           :        +- Exchange (90)
            :           :           :           :           :           +- * HashAggregate (89)
            :           :           :           :           :              +- * Project (88)
            :           :           :           :           :                 +- * BroadcastHashJoin Inner BuildRight (87)
            :           :           :           :           :                    :- * Project (85)
            :           :           :           :           :                    :  +- * BroadcastHashJoin Inner BuildRight (84)
            :           :           :           :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (82)
            :           :           :           :           :                    :     :  :- * Filter (80)
            :           :           :           :           :                    :     :  :  +- * ColumnarToRow (79)
            :           :           :           :           :                    :     :  :     +- Scan parquet default.catalog_sales (78)
            :           :           :           :           :                    :     :  +- ReusedExchange (81)
            :           :           :           :           :                    :     +- ReusedExchange (83)
            :           :           :           :           :                    +- ReusedExchange (86)
            :           :           :           :           +- * Project (109)
            :           :           :           :              +- * Filter (108)
            :           :           :           :                 +- * HashAggregate (107)
            :           :           :           :                    +- Exchange (106)
            :           :           :           :                       +- * HashAggregate (105)
            :           :           :           :                          +- * Project (104)
            :           :           :           :                             +- * BroadcastHashJoin Inner BuildRight (103)
            :           :           :           :                                :- * Project (101)
            :           :           :           :                                :  +- * BroadcastHashJoin Inner BuildRight (100)
            :           :           :           :                                :     :- * BroadcastHashJoin LeftSemi BuildRight (98)
            :           :           :           :                                :     :  :- * Filter (96)
            :           :           :           :                                :     :  :  +- * ColumnarToRow (95)
            :           :           :           :                                :     :  :     +- Scan parquet default.web_sales (94)
            :           :           :           :                                :     :  +- ReusedExchange (97)
            :           :           :           :                                :     +- ReusedExchange (99)
            :           :           :           :                                +- ReusedExchange (102)
            :           :           :           +- * HashAggregate (118)
            :           :           :              +- Exchange (117)
            :           :           :                 +- * HashAggregate (116)
            :           :           :                    +- * HashAggregate (115)
            :           :           :                       +- ReusedExchange (114)
            :           :           +- * HashAggregate (127)
            :           :              +- Exchange (126)
            :           :                 +- * HashAggregate (125)
            :           :                    +- * HashAggregate (124)
            :           :                       +- ReusedExchange (123)
            :           +- * HashAggregate (136)
            :              +- Exchange (135)
            :                 +- * HashAggregate (134)
            :                    +- * HashAggregate (133)
            :                       +- ReusedExchange (132)
            +- * HashAggregate (145)
               +- Exchange (144)
                  +- * HashAggregate (143)
                     +- * HashAggregate (142)
                        +- ReusedExchange (141)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : ((isnotnull(i_brand_id#6) AND isnotnull(i_class_id#7)) AND isnotnull(i_category_id#8))

(7) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(8) ColumnarToRow [codegen id : 9]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(9) Filter [codegen id : 9]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(10) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(12) Filter [codegen id : 1]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : (((isnotnull(i_item_sk#5) AND isnotnull(i_brand_id#6)) AND isnotnull(i_class_id#7)) AND isnotnull(i_category_id#8))

(13) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(14) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(15) Project [codegen id : 9]
Output [4]: [ss_sold_date_sk#1, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(16) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(17) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]

(18) Filter [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(19) Project [codegen id : 2]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(20) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(21) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(22) Project [codegen id : 9]
Output [3]: [i_brand_id#6 AS brand_id#13, i_class_id#7 AS class_id#14, i_category_id#8 AS category_id#15]
Input [5]: [ss_sold_date_sk#1, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(23) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#16, cs_item_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(24) ColumnarToRow [codegen id : 5]
Input [2]: [cs_sold_date_sk#16, cs_item_sk#17]

(25) Filter [codegen id : 5]
Input [2]: [cs_sold_date_sk#16, cs_item_sk#17]
Condition : (isnotnull(cs_item_sk#17) AND isnotnull(cs_sold_date_sk#16))

(26) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(28) Filter [codegen id : 3]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : isnotnull(i_item_sk#5)

(29) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#18]

(30) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#5]
Join condition: None

(31) Project [codegen id : 5]
Output [4]: [cs_sold_date_sk#16, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [cs_sold_date_sk#16, cs_item_sk#17, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(32) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#10]

(33) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#10]
Join condition: None

(34) Project [codegen id : 5]
Output [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Input [5]: [cs_sold_date_sk#16, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(35) BroadcastExchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#19]

(36) BroadcastHashJoin [codegen id : 9]
Left keys [6]: [coalesce(brand_id#13, 0), isnull(brand_id#13), coalesce(class_id#14, 0), isnull(class_id#14), coalesce(category_id#15, 0), isnull(category_id#15)]
Right keys [6]: [coalesce(i_brand_id#6, 0), isnull(i_brand_id#6), coalesce(i_class_id#7, 0), isnull(i_class_id#7), coalesce(i_category_id#8, 0), isnull(i_category_id#8)]
Join condition: None

(37) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#20, ws_item_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(38) ColumnarToRow [codegen id : 8]
Input [2]: [ws_sold_date_sk#20, ws_item_sk#21]

(39) Filter [codegen id : 8]
Input [2]: [ws_sold_date_sk#20, ws_item_sk#21]
Condition : (isnotnull(ws_item_sk#21) AND isnotnull(ws_sold_date_sk#20))

(40) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(41) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_item_sk#21]
Right keys [1]: [i_item_sk#5]
Join condition: None

(42) Project [codegen id : 8]
Output [4]: [ws_sold_date_sk#20, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [ws_sold_date_sk#20, ws_item_sk#21, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(43) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#10]

(44) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_sold_date_sk#20]
Right keys [1]: [d_date_sk#10]
Join condition: None

(45) Project [codegen id : 8]
Output [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Input [5]: [ws_sold_date_sk#20, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(46) BroadcastExchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#22]

(47) BroadcastHashJoin [codegen id : 9]
Left keys [6]: [coalesce(brand_id#13, 0), isnull(brand_id#13), coalesce(class_id#14, 0), isnull(class_id#14), coalesce(category_id#15, 0), isnull(category_id#15)]
Right keys [6]: [coalesce(i_brand_id#6, 0), isnull(i_brand_id#6), coalesce(i_class_id#7, 0), isnull(i_class_id#7), coalesce(i_category_id#8, 0), isnull(i_category_id#8)]
Join condition: None

(48) HashAggregate [codegen id : 9]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(49) Exchange
Input [3]: [brand_id#13, class_id#14, category_id#15]
Arguments: hashpartitioning(brand_id#13, class_id#14, category_id#15, 5), true, [id=#23]

(50) HashAggregate [codegen id : 10]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(51) HashAggregate [codegen id : 10]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(52) HashAggregate [codegen id : 10]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(53) BroadcastExchange
Input [3]: [brand_id#13, class_id#14, category_id#15]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#24]

(54) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Right keys [3]: [brand_id#13, class_id#14, category_id#15]
Join condition: None

(55) Project [codegen id : 11]
Output [1]: [i_item_sk#5 AS ss_item_sk#25]
Input [7]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8, brand_id#13, class_id#14, category_id#15]

(56) BroadcastExchange
Input [1]: [ss_item_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26]

(57) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#25]
Join condition: None

(58) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(59) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(60) Filter [codegen id : 23]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : isnotnull(i_item_sk#5)

(61) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#25]

(62) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#5]
Right keys [1]: [ss_item_sk#25]
Join condition: None

(63) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(64) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(65) Project [codegen id : 25]
Output [6]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(66) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(67) ColumnarToRow [codegen id : 24]
Input [3]: [d_date_sk#10, d_year#11, d_moy#28]

(68) Filter [codegen id : 24]
Input [3]: [d_date_sk#10, d_year#11, d_moy#28]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#28)) AND (d_year#11 = 2000)) AND (d_moy#28 = 11)) AND isnotnull(d_date_sk#10))

(69) Project [codegen id : 24]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#28]

(70) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29]

(71) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(72) Project [codegen id : 25]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(73) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#30, isEmpty#31, count#32]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#33, isEmpty#34, count#35]

(74) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#33, isEmpty#34, count#35]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#36]

(75) HashAggregate [codegen id : 26]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#33, isEmpty#34, count#35]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#37, count(1)#38]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#37 AS sales#39, count(1)#38 AS number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#37 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41]

(76) Filter [codegen id : 26]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41 as decimal(32,6)) > cast(Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(77) Project [codegen id : 26]
Output [6]: [store AS channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41]

(78) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#16, cs_item_sk#17, cs_quantity#45, cs_list_price#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(79) ColumnarToRow [codegen id : 51]
Input [4]: [cs_sold_date_sk#16, cs_item_sk#17, cs_quantity#45, cs_list_price#46]

(80) Filter [codegen id : 51]
Input [4]: [cs_sold_date_sk#16, cs_item_sk#17, cs_quantity#45, cs_list_price#46]
Condition : (isnotnull(cs_item_sk#17) AND isnotnull(cs_sold_date_sk#16))

(81) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#25]

(82) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [ss_item_sk#25]
Join condition: None

(83) ReusedExchange [Reuses operator id: 63]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(84) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#5]
Join condition: None

(85) Project [codegen id : 51]
Output [6]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [cs_sold_date_sk#16, cs_item_sk#17, cs_quantity#45, cs_list_price#46, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(86) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#10]

(87) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#10]
Join condition: None

(88) Project [codegen id : 51]
Output [5]: [cs_quantity#45, cs_list_price#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(89) HashAggregate [codegen id : 51]
Input [5]: [cs_quantity#45, cs_list_price#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#47, isEmpty#48, count#49]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#50, isEmpty#51, count#52]

(90) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#50, isEmpty#51, count#52]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#53]

(91) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#50, isEmpty#51, count#52]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#54, count(1)#55]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#54 AS sales#56, count(1)#55 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#54 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#58]

(92) Filter [codegen id : 52]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#58]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#58) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#58 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(93) Project [codegen id : 52]
Output [6]: [catalog AS channel#59, i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#58]

(94) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#20, ws_item_sk#21, ws_quantity#60, ws_list_price#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(95) ColumnarToRow [codegen id : 77]
Input [4]: [ws_sold_date_sk#20, ws_item_sk#21, ws_quantity#60, ws_list_price#61]

(96) Filter [codegen id : 77]
Input [4]: [ws_sold_date_sk#20, ws_item_sk#21, ws_quantity#60, ws_list_price#61]
Condition : (isnotnull(ws_item_sk#21) AND isnotnull(ws_sold_date_sk#20))

(97) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#25]

(98) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#21]
Right keys [1]: [ss_item_sk#25]
Join condition: None

(99) ReusedExchange [Reuses operator id: 63]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(100) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#21]
Right keys [1]: [i_item_sk#5]
Join condition: None

(101) Project [codegen id : 77]
Output [6]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [ws_sold_date_sk#20, ws_item_sk#21, ws_quantity#60, ws_list_price#61, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(102) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#10]

(103) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_sold_date_sk#20]
Right keys [1]: [d_date_sk#10]
Join condition: None

(104) Project [codegen id : 77]
Output [5]: [ws_quantity#60, ws_list_price#61, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(105) HashAggregate [codegen id : 77]
Input [5]: [ws_quantity#60, ws_list_price#61, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#62, isEmpty#63, count#64]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#65, isEmpty#66, count#67]

(106) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#65, isEmpty#66, count#67]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#68]

(107) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#65, isEmpty#66, count#67]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#69, count(1)#70]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#69 AS sales#71, count(1)#70 AS number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#69 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#73]

(108) Filter [codegen id : 78]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#73]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#73) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#73 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(109) Project [codegen id : 78]
Output [6]: [web AS channel#74, i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#73]

(110) Union

(111) HashAggregate [codegen id : 79]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#39), partial_sum(number_sales#40)]
Aggregate Attributes [3]: [sum#75, isEmpty#76, sum#77]
Results [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#78, isEmpty#79, sum#80]

(112) Exchange
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#78, isEmpty#79, sum#80]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#81]

(113) HashAggregate [codegen id : 80]
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#78, isEmpty#79, sum#80]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#39), sum(number_sales#40)]
Aggregate Attributes [2]: [sum(sales#39)#82, sum(number_sales#40)#83]
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum(sales#39)#82 AS sum_sales#84, sum(number_sales#40)#83 AS number_sales#85]

(114) ReusedExchange [Reuses operator id: 112]
Output [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#86, isEmpty#87, sum#88]

(115) HashAggregate [codegen id : 160]
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#86, isEmpty#87, sum#88]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#39), sum(number_sales#40)]
Aggregate Attributes [2]: [sum(sales#39)#89, sum(number_sales#40)#90]
Results [5]: [channel#44, i_brand_id#6, i_class_id#7, sum(sales#39)#89 AS sum_sales#84, sum(number_sales#40)#90 AS number_sales#85]

(116) HashAggregate [codegen id : 160]
Input [5]: [channel#44, i_brand_id#6, i_class_id#7, sum_sales#84, number_sales#85]
Keys [3]: [channel#44, i_brand_id#6, i_class_id#7]
Functions [2]: [partial_sum(sum_sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#91, isEmpty#92, sum#93]
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, sum#94, isEmpty#95, sum#96]

(117) Exchange
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, sum#94, isEmpty#95, sum#96]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, 5), true, [id=#97]

(118) HashAggregate [codegen id : 161]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, sum#94, isEmpty#95, sum#96]
Keys [3]: [channel#44, i_brand_id#6, i_class_id#7]
Functions [2]: [sum(sum_sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sum_sales#84)#98, sum(number_sales#85)#99]
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, null AS i_category_id#100, sum(sum_sales#84)#98 AS sum(sum_sales)#101, sum(number_sales#85)#99 AS sum(number_sales)#102]

(119) Union

(120) HashAggregate [codegen id : 162]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(121) Exchange
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85, 5), true, [id=#103]

(122) HashAggregate [codegen id : 163]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(123) ReusedExchange [Reuses operator id: 112]
Output [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#104, isEmpty#105, sum#106]

(124) HashAggregate [codegen id : 243]
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#104, isEmpty#105, sum#106]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#39), sum(number_sales#40)]
Aggregate Attributes [2]: [sum(sales#39)#107, sum(number_sales#40)#108]
Results [4]: [channel#44, i_brand_id#6, sum(sales#39)#107 AS sum_sales#84, sum(number_sales#40)#108 AS number_sales#85]

(125) HashAggregate [codegen id : 243]
Input [4]: [channel#44, i_brand_id#6, sum_sales#84, number_sales#85]
Keys [2]: [channel#44, i_brand_id#6]
Functions [2]: [partial_sum(sum_sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#109, isEmpty#110, sum#111]
Results [5]: [channel#44, i_brand_id#6, sum#112, isEmpty#113, sum#114]

(126) Exchange
Input [5]: [channel#44, i_brand_id#6, sum#112, isEmpty#113, sum#114]
Arguments: hashpartitioning(channel#44, i_brand_id#6, 5), true, [id=#115]

(127) HashAggregate [codegen id : 244]
Input [5]: [channel#44, i_brand_id#6, sum#112, isEmpty#113, sum#114]
Keys [2]: [channel#44, i_brand_id#6]
Functions [2]: [sum(sum_sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sum_sales#84)#116, sum(number_sales#85)#117]
Results [6]: [channel#44, i_brand_id#6, null AS i_class_id#118, null AS i_category_id#119, sum(sum_sales#84)#116 AS sum(sum_sales)#120, sum(number_sales#85)#117 AS sum(number_sales)#121]

(128) Union

(129) HashAggregate [codegen id : 245]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(130) Exchange
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85, 5), true, [id=#122]

(131) HashAggregate [codegen id : 246]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(132) ReusedExchange [Reuses operator id: 112]
Output [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#123, isEmpty#124, sum#125]

(133) HashAggregate [codegen id : 326]
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#123, isEmpty#124, sum#125]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#39), sum(number_sales#40)]
Aggregate Attributes [2]: [sum(sales#39)#126, sum(number_sales#40)#127]
Results [3]: [channel#44, sum(sales#39)#126 AS sum_sales#84, sum(number_sales#40)#127 AS number_sales#85]

(134) HashAggregate [codegen id : 326]
Input [3]: [channel#44, sum_sales#84, number_sales#85]
Keys [1]: [channel#44]
Functions [2]: [partial_sum(sum_sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#128, isEmpty#129, sum#130]
Results [4]: [channel#44, sum#131, isEmpty#132, sum#133]

(135) Exchange
Input [4]: [channel#44, sum#131, isEmpty#132, sum#133]
Arguments: hashpartitioning(channel#44, 5), true, [id=#134]

(136) HashAggregate [codegen id : 327]
Input [4]: [channel#44, sum#131, isEmpty#132, sum#133]
Keys [1]: [channel#44]
Functions [2]: [sum(sum_sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sum_sales#84)#135, sum(number_sales#85)#136]
Results [6]: [channel#44, null AS i_brand_id#137, null AS i_class_id#138, null AS i_category_id#139, sum(sum_sales#84)#135 AS sum(sum_sales)#140, sum(number_sales#85)#136 AS sum(number_sales)#141]

(137) Union

(138) HashAggregate [codegen id : 328]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(139) Exchange
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85, 5), true, [id=#142]

(140) HashAggregate [codegen id : 329]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(141) ReusedExchange [Reuses operator id: 112]
Output [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#143, isEmpty#144, sum#145]

(142) HashAggregate [codegen id : 409]
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#143, isEmpty#144, sum#145]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#39), sum(number_sales#40)]
Aggregate Attributes [2]: [sum(sales#39)#146, sum(number_sales#40)#147]
Results [2]: [sum(sales#39)#146 AS sum_sales#84, sum(number_sales#40)#147 AS number_sales#85]

(143) HashAggregate [codegen id : 409]
Input [2]: [sum_sales#84, number_sales#85]
Keys: []
Functions [2]: [partial_sum(sum_sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#148, isEmpty#149, sum#150]
Results [3]: [sum#151, isEmpty#152, sum#153]

(144) Exchange
Input [3]: [sum#151, isEmpty#152, sum#153]
Arguments: SinglePartition, true, [id=#154]

(145) HashAggregate [codegen id : 410]
Input [3]: [sum#151, isEmpty#152, sum#153]
Keys: []
Functions [2]: [sum(sum_sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sum_sales#84)#155, sum(number_sales#85)#156]
Results [6]: [null AS channel#157, null AS i_brand_id#158, null AS i_class_id#159, null AS i_category_id#160, sum(sum_sales#84)#155 AS sum(sum_sales)#161, sum(number_sales#85)#156 AS sum(number_sales)#162]

(146) Union

(147) HashAggregate [codegen id : 411]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(148) Exchange
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85, 5), true, [id=#163]

(149) HashAggregate [codegen id : 412]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(150) TakeOrderedAndProject
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: 100, [channel#44 ASC NULLS FIRST, i_brand_id#6 ASC NULLS FIRST, i_class_id#7 ASC NULLS FIRST, i_category_id#8 ASC NULLS FIRST], [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

===== Subqueries =====

Subquery:1 Hosting operator id = 76 Hosting Expression = Subquery scalar-subquery#42, [id=#43]
* HashAggregate (176)
+- Exchange (175)
   +- * HashAggregate (174)
      +- Union (173)
         :- * Project (156)
         :  +- * BroadcastHashJoin Inner BuildRight (155)
         :     :- * Filter (153)
         :     :  +- * ColumnarToRow (152)
         :     :     +- Scan parquet default.store_sales (151)
         :     +- ReusedExchange (154)
         :- * Project (166)
         :  +- * BroadcastHashJoin Inner BuildRight (165)
         :     :- * Filter (159)
         :     :  +- * ColumnarToRow (158)
         :     :     +- Scan parquet default.catalog_sales (157)
         :     +- BroadcastExchange (164)
         :        +- * Project (163)
         :           +- * Filter (162)
         :              +- * ColumnarToRow (161)
         :                 +- Scan parquet default.date_dim (160)
         +- * Project (172)
            +- * BroadcastHashJoin Inner BuildRight (171)
               :- * Filter (169)
               :  +- * ColumnarToRow (168)
               :     +- Scan parquet default.web_sales (167)
               +- ReusedExchange (170)


(151) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(152) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(153) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(154) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#10]

(155) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(156) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#164, ss_list_price#4 AS list_price#165]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(157) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(158) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46]

(159) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46]
Condition : isnotnull(cs_sold_date_sk#16)

(160) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(161) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]

(162) Filter [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1998)) AND (d_year#11 <= 2000)) AND isnotnull(d_date_sk#10))

(163) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(164) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#166]

(165) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#10]
Join condition: None

(166) Project [codegen id : 4]
Output [2]: [cs_quantity#45 AS quantity#167, cs_list_price#46 AS list_price#168]
Input [4]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46, d_date_sk#10]

(167) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(168) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61]

(169) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61]
Condition : isnotnull(ws_sold_date_sk#20)

(170) ReusedExchange [Reuses operator id: 164]
Output [1]: [d_date_sk#10]

(171) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#20]
Right keys [1]: [d_date_sk#10]
Join condition: None

(172) Project [codegen id : 6]
Output [2]: [ws_quantity#60 AS quantity#169, ws_list_price#61 AS list_price#170]
Input [4]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61, d_date_sk#10]

(173) Union

(174) HashAggregate [codegen id : 7]
Input [2]: [quantity#164, list_price#165]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#164 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#165 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#171, count#172]
Results [2]: [sum#173, count#174]

(175) Exchange
Input [2]: [sum#173, count#174]
Arguments: SinglePartition, true, [id=#175]

(176) HashAggregate [codegen id : 8]
Input [2]: [sum#173, count#174]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#164 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#165 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#164 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#165 as decimal(12,2)))), DecimalType(18,2), true))#176]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#164 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#165 as decimal(12,2)))), DecimalType(18,2), true))#176 AS average_sales#177]

Subquery:2 Hosting operator id = 92 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:3 Hosting operator id = 108 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]


