== Parsed Logical Plan ==
'GlobalLimit 100
+- 'LocalLimit 100
   +- 'Sort ['qoh ASC NULLS FIRST, 'i_product_name ASC NULLS FIRST, 'i_brand ASC NULLS FIRST, 'i_class ASC NULLS FIRST, 'i_category ASC NULLS FIRST], true
      +- 'Aggregate ['ROLLUP('i_product_name, 'i_brand, 'i_class, 'i_category)], ['i_product_name, 'i_brand, 'i_class, 'i_category, 'avg('inv_quantity_on_hand) AS qoh#1]
         +- 'Filter ((('inv_date_sk = 'd_date_sk) AND ('inv_item_sk = 'i_item_sk)) AND (('d_month_seq >= 1200) AND ('d_month_seq <= (1200 + 11))))
            +- 'Join Inner
               :- 'Join Inner
               :  :- 'Join Inner
               :  :  :- 'UnresolvedRelation [inventory]
               :  :  +- 'UnresolvedRelation [date_dim]
               :  +- 'UnresolvedRelation [item]
               +- 'UnresolvedRelation [warehouse]

== Analyzed Logical Plan ==
i_product_name: string, i_brand: string, i_class: string, i_category: string, qoh: double
GlobalLimit 100
+- LocalLimit 100
   +- Sort [qoh#1 ASC NULLS FIRST, i_product_name#2 ASC NULLS FIRST, i_brand#3 ASC NULLS FIRST, i_class#4 ASC NULLS FIRST, i_category#5 ASC NULLS FIRST], true
      +- Aggregate [i_product_name#2, i_brand#3, i_class#4, i_category#5, spark_grouping_id#6], [i_product_name#2, i_brand#3, i_class#4, i_category#5, avg(cast(inv_quantity_on_hand#7 as bigint)) AS qoh#1]
         +- Expand [List(inv_date_sk#8, inv_item_sk#9, inv_warehouse_sk#10, inv_quantity_on_hand#7, d_date_sk#11, d_date_id#12, d_date#13, d_month_seq#14, d_week_seq#15, d_quarter_seq#16, d_year#17, d_dow#18, d_moy#19, d_dom#20, d_qoy#21, d_fy_year#22, d_fy_quarter_seq#23, d_fy_week_seq#24, d_day_name#25, d_quarter_name#26, d_holiday#27, d_weekend#28, d_following_holiday#29, d_first_dom#30, d_last_dom#31, d_same_day_ly#32, d_same_day_lq#33, d_current_day#34, d_current_week#35, d_current_month#36, d_current_quarter#37, d_current_year#38, i_item_sk#39, i_item_id#40, i_rec_start_date#41, i_rec_end_date#42, i_item_desc#43, i_current_price#44, i_wholesale_cost#45, i_brand_id#46, i_brand#47, i_class_id#48, i_class#49, i_category_id#50, i_category#51, i_manufact_id#52, i_manufact#53, i_size#54, i_formulation#55, i_color#56, i_units#57, i_container#58, i_manager_id#59, i_product_name#60, w_warehouse_sk#61, w_warehouse_id#62, w_warehouse_name#63, w_warehouse_sq_ft#64, w_street_number#65, w_street_name#66, w_street_type#67, w_suite_number#68, w_city#69, w_county#70, w_state#71, w_zip#72, w_country#73, w_gmt_offset#74, i_product_name#75, i_brand#76, i_class#77, i_category#78, 0), List(inv_date_sk#8, inv_item_sk#9, inv_warehouse_sk#10, inv_quantity_on_hand#7, d_date_sk#11, d_date_id#12, d_date#13, d_month_seq#14, d_week_seq#15, d_quarter_seq#16, d_year#17, d_dow#18, d_moy#19, d_dom#20, d_qoy#21, d_fy_year#22, d_fy_quarter_seq#23, d_fy_week_seq#24, d_day_name#25, d_quarter_name#26, d_holiday#27, d_weekend#28, d_following_holiday#29, d_first_dom#30, d_last_dom#31, d_same_day_ly#32, d_same_day_lq#33, d_current_day#34, d_current_week#35, d_current_month#36, d_current_quarter#37, d_current_year#38, i_item_sk#39, i_item_id#40, i_rec_start_date#41, i_rec_end_date#42, i_item_desc#43, i_current_price#44, i_wholesale_cost#45, i_brand_id#46, i_brand#47, i_class_id#48, i_class#49, i_category_id#50, i_category#51, i_manufact_id#52, i_manufact#53, i_size#54, i_formulation#55, i_color#56, i_units#57, i_container#58, i_manager_id#59, i_product_name#60, w_warehouse_sk#61, w_warehouse_id#62, w_warehouse_name#63, w_warehouse_sq_ft#64, w_street_number#65, w_street_name#66, w_street_type#67, w_suite_number#68, w_city#69, w_county#70, w_state#71, w_zip#72, w_country#73, w_gmt_offset#74, i_product_name#75, i_brand#76, i_class#77, null, 1), List(inv_date_sk#8, inv_item_sk#9, inv_warehouse_sk#10, inv_quantity_on_hand#7, d_date_sk#11, d_date_id#12, d_date#13, d_month_seq#14, d_week_seq#15, d_quarter_seq#16, d_year#17, d_dow#18, d_moy#19, d_dom#20, d_qoy#21, d_fy_year#22, d_fy_quarter_seq#23, d_fy_week_seq#24, d_day_name#25, d_quarter_name#26, d_holiday#27, d_weekend#28, d_following_holiday#29, d_first_dom#30, d_last_dom#31, d_same_day_ly#32, d_same_day_lq#33, d_current_day#34, d_current_week#35, d_current_month#36, d_current_quarter#37, d_current_year#38, i_item_sk#39, i_item_id#40, i_rec_start_date#41, i_rec_end_date#42, i_item_desc#43, i_current_price#44, i_wholesale_cost#45, i_brand_id#46, i_brand#47, i_class_id#48, i_class#49, i_category_id#50, i_category#51, i_manufact_id#52, i_manufact#53, i_size#54, i_formulation#55, i_color#56, i_units#57, i_container#58, i_manager_id#59, i_product_name#60, w_warehouse_sk#61, w_warehouse_id#62, w_warehouse_name#63, w_warehouse_sq_ft#64, w_street_number#65, w_street_name#66, w_street_type#67, w_suite_number#68, w_city#69, w_county#70, w_state#71, w_zip#72, w_country#73, w_gmt_offset#74, i_product_name#75, i_brand#76, null, null, 3), List(inv_date_sk#8, inv_item_sk#9, inv_warehouse_sk#10, inv_quantity_on_hand#7, d_date_sk#11, d_date_id#12, d_date#13, d_month_seq#14, d_week_seq#15, d_quarter_seq#16, d_year#17, d_dow#18, d_moy#19, d_dom#20, d_qoy#21, d_fy_year#22, d_fy_quarter_seq#23, d_fy_week_seq#24, d_day_name#25, d_quarter_name#26, d_holiday#27, d_weekend#28, d_following_holiday#29, d_first_dom#30, d_last_dom#31, d_same_day_ly#32, d_same_day_lq#33, d_current_day#34, d_current_week#35, d_current_month#36, d_current_quarter#37, d_current_year#38, i_item_sk#39, i_item_id#40, i_rec_start_date#41, i_rec_end_date#42, i_item_desc#43, i_current_price#44, i_wholesale_cost#45, i_brand_id#46, i_brand#47, i_class_id#48, i_class#49, i_category_id#50, i_category#51, i_manufact_id#52, i_manufact#53, i_size#54, i_formulation#55, i_color#56, i_units#57, i_container#58, i_manager_id#59, i_product_name#60, w_warehouse_sk#61, w_warehouse_id#62, w_warehouse_name#63, w_warehouse_sq_ft#64, w_street_number#65, w_street_name#66, w_street_type#67, w_suite_number#68, w_city#69, w_county#70, w_state#71, w_zip#72, w_country#73, w_gmt_offset#74, i_product_name#75, null, null, null, 7), List(inv_date_sk#8, inv_item_sk#9, inv_warehouse_sk#10, inv_quantity_on_hand#7, d_date_sk#11, d_date_id#12, d_date#13, d_month_seq#14, d_week_seq#15, d_quarter_seq#16, d_year#17, d_dow#18, d_moy#19, d_dom#20, d_qoy#21, d_fy_year#22, d_fy_quarter_seq#23, d_fy_week_seq#24, d_day_name#25, d_quarter_name#26, d_holiday#27, d_weekend#28, d_following_holiday#29, d_first_dom#30, d_last_dom#31, d_same_day_ly#32, d_same_day_lq#33, d_current_day#34, d_current_week#35, d_current_month#36, d_current_quarter#37, d_current_year#38, i_item_sk#39, i_item_id#40, i_rec_start_date#41, i_rec_end_date#42, i_item_desc#43, i_current_price#44, i_wholesale_cost#45, i_brand_id#46, i_brand#47, i_class_id#48, i_class#49, i_category_id#50, i_category#51, i_manufact_id#52, i_manufact#53, i_size#54, i_formulation#55, i_color#56, i_units#57, i_container#58, i_manager_id#59, i_product_name#60, w_warehouse_sk#61, w_warehouse_id#62, w_warehouse_name#63, w_warehouse_sq_ft#64, w_street_number#65, w_street_name#66, w_street_type#67, w_suite_number#68, w_city#69, w_county#70, w_state#71, w_zip#72, w_country#73, w_gmt_offset#74, null, null, null, null, 15)], [inv_date_sk#8, inv_item_sk#9, inv_warehouse_sk#10, inv_quantity_on_hand#7, d_date_sk#11, d_date_id#12, d_date#13, d_month_seq#14, d_week_seq#15, d_quarter_seq#16, d_year#17, d_dow#18, d_moy#19, d_dom#20, d_qoy#21, d_fy_year#22, d_fy_quarter_seq#23, d_fy_week_seq#24, d_day_name#25, d_quarter_name#26, d_holiday#27, d_weekend#28, d_following_holiday#29, d_first_dom#30, ... 49 more fields]
            +- Project [inv_date_sk#8, inv_item_sk#9, inv_warehouse_sk#10, inv_quantity_on_hand#7, d_date_sk#11, d_date_id#12, d_date#13, d_month_seq#14, d_week_seq#15, d_quarter_seq#16, d_year#17, d_dow#18, d_moy#19, d_dom#20, d_qoy#21, d_fy_year#22, d_fy_quarter_seq#23, d_fy_week_seq#24, d_day_name#25, d_quarter_name#26, d_holiday#27, d_weekend#28, d_following_holiday#29, d_first_dom#30, ... 48 more fields]
               +- Filter (((inv_date_sk#8 = d_date_sk#11) AND (inv_item_sk#9 = i_item_sk#39)) AND ((d_month_seq#14 >= 1200) AND (d_month_seq#14 <= (1200 + 11))))
                  +- Join Inner
                     :- Join Inner
                     :  :- Join Inner
                     :  :  :- SubqueryAlias spark_catalog.default.inventory
                     :  :  :  +- Relation[inv_date_sk#8,inv_item_sk#9,inv_warehouse_sk#10,inv_quantity_on_hand#7] parquet
                     :  :  +- SubqueryAlias spark_catalog.default.date_dim
                     :  :     +- Relation[d_date_sk#11,d_date_id#12,d_date#13,d_month_seq#14,d_week_seq#15,d_quarter_seq#16,d_year#17,d_dow#18,d_moy#19,d_dom#20,d_qoy#21,d_fy_year#22,d_fy_quarter_seq#23,d_fy_week_seq#24,d_day_name#25,d_quarter_name#26,d_holiday#27,d_weekend#28,d_following_holiday#29,d_first_dom#30,d_last_dom#31,d_same_day_ly#32,d_same_day_lq#33,d_current_day#34,... 4 more fields] parquet
                     :  +- SubqueryAlias spark_catalog.default.item
                     :     +- Relation[i_item_sk#39,i_item_id#40,i_rec_start_date#41,i_rec_end_date#42,i_item_desc#43,i_current_price#44,i_wholesale_cost#45,i_brand_id#46,i_brand#47,i_class_id#48,i_class#49,i_category_id#50,i_category#51,i_manufact_id#52,i_manufact#53,i_size#54,i_formulation#55,i_color#56,i_units#57,i_container#58,i_manager_id#59,i_product_name#60] parquet
                     +- SubqueryAlias spark_catalog.default.warehouse
                        +- Relation[w_warehouse_sk#61,w_warehouse_id#62,w_warehouse_name#63,w_warehouse_sq_ft#64,w_street_number#65,w_street_name#66,w_street_type#67,w_suite_number#68,w_city#69,w_county#70,w_state#71,w_zip#72,w_country#73,w_gmt_offset#74] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Sort [qoh#1 ASC NULLS FIRST, i_product_name#2 ASC NULLS FIRST, i_brand#3 ASC NULLS FIRST, i_class#4 ASC NULLS FIRST, i_category#5 ASC NULLS FIRST], true
      +- Aggregate [i_product_name#2, i_brand#3, i_class#4, i_category#5, spark_grouping_id#6], [i_product_name#2, i_brand#3, i_class#4, i_category#5, avg(cast(inv_quantity_on_hand#7 as bigint)) AS qoh#1]
         +- Expand [List(inv_quantity_on_hand#7, i_product_name#60, i_brand#47, i_class#49, i_category#51, 0), List(inv_quantity_on_hand#7, i_product_name#60, i_brand#47, i_class#49, null, 1), List(inv_quantity_on_hand#7, i_product_name#60, i_brand#47, null, null, 3), List(inv_quantity_on_hand#7, i_product_name#60, null, null, null, 7), List(inv_quantity_on_hand#7, null, null, null, null, 15)], [inv_quantity_on_hand#7, i_product_name#2, i_brand#3, i_class#4, i_category#5, spark_grouping_id#6]
            +- Project [inv_quantity_on_hand#7, i_product_name#60, i_brand#47, i_class#49, i_category#51]
               +- Join Inner
                  :- Project [inv_quantity_on_hand#7, i_brand#47, i_class#49, i_category#51, i_product_name#60]
                  :  +- Join Inner, (inv_item_sk#9 = i_item_sk#39)
                  :     :- Project [inv_item_sk#9, inv_quantity_on_hand#7]
                  :     :  +- Join Inner, (inv_date_sk#8 = d_date_sk#11)
                  :     :     :- Project [inv_date_sk#8, inv_item_sk#9, inv_quantity_on_hand#7]
                  :     :     :  +- Filter (isnotnull(inv_date_sk#8) AND isnotnull(inv_item_sk#9))
                  :     :     :     +- Relation[inv_date_sk#8,inv_item_sk#9,inv_warehouse_sk#10,inv_quantity_on_hand#7] parquet
                  :     :     +- Project [d_date_sk#11]
                  :     :        +- Filter (((isnotnull(d_month_seq#14) AND (d_month_seq#14 >= 1200)) AND (d_month_seq#14 <= 1211)) AND isnotnull(d_date_sk#11))
                  :     :           +- Relation[d_date_sk#11,d_date_id#12,d_date#13,d_month_seq#14,d_week_seq#15,d_quarter_seq#16,d_year#17,d_dow#18,d_moy#19,d_dom#20,d_qoy#21,d_fy_year#22,d_fy_quarter_seq#23,d_fy_week_seq#24,d_day_name#25,d_quarter_name#26,d_holiday#27,d_weekend#28,d_following_holiday#29,d_first_dom#30,d_last_dom#31,d_same_day_ly#32,d_same_day_lq#33,d_current_day#34,... 4 more fields] parquet
                  :     +- Project [i_item_sk#39, i_brand#47, i_class#49, i_category#51, i_product_name#60]
                  :        +- Filter isnotnull(i_item_sk#39)
                  :           +- Relation[i_item_sk#39,i_item_id#40,i_rec_start_date#41,i_rec_end_date#42,i_item_desc#43,i_current_price#44,i_wholesale_cost#45,i_brand_id#46,i_brand#47,i_class_id#48,i_class#49,i_category_id#50,i_category#51,i_manufact_id#52,i_manufact#53,i_size#54,i_formulation#55,i_color#56,i_units#57,i_container#58,i_manager_id#59,i_product_name#60] parquet
                  +- Project
                     +- Relation[w_warehouse_sk#61,w_warehouse_id#62,w_warehouse_name#63,w_warehouse_sq_ft#64,w_street_number#65,w_street_name#66,w_street_type#67,w_suite_number#68,w_city#69,w_county#70,w_state#71,w_zip#72,w_country#73,w_gmt_offset#74] parquet

== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[qoh#1 ASC NULLS FIRST,i_product_name#2 ASC NULLS FIRST,i_brand#3 ASC NULLS FIRST,i_class#4 ASC NULLS FIRST,i_category#5 ASC NULLS FIRST], output=[i_product_name#2,i_brand#3,i_class#4,i_category#5,qoh#1])
+- *(6) HashAggregate(keys=[i_product_name#2, i_brand#3, i_class#4, i_category#5, spark_grouping_id#6], functions=[avg(cast(inv_quantity_on_hand#7 as bigint))], output=[i_product_name#2, i_brand#3, i_class#4, i_category#5, qoh#1])
   +- Exchange hashpartitioning(i_product_name#2, i_brand#3, i_class#4, i_category#5, spark_grouping_id#6, 5), true, [id=#79]
      +- *(5) HashAggregate(keys=[i_product_name#2, i_brand#3, i_class#4, i_category#5, spark_grouping_id#6], functions=[partial_avg(cast(inv_quantity_on_hand#7 as bigint))], output=[i_product_name#2, i_brand#3, i_class#4, i_category#5, spark_grouping_id#6, sum#80, count#81])
         +- *(5) Expand [List(inv_quantity_on_hand#7, i_product_name#60, i_brand#47, i_class#49, i_category#51, 0), List(inv_quantity_on_hand#7, i_product_name#60, i_brand#47, i_class#49, null, 1), List(inv_quantity_on_hand#7, i_product_name#60, i_brand#47, null, null, 3), List(inv_quantity_on_hand#7, i_product_name#60, null, null, null, 7), List(inv_quantity_on_hand#7, null, null, null, null, 15)], [inv_quantity_on_hand#7, i_product_name#2, i_brand#3, i_class#4, i_category#5, spark_grouping_id#6]
            +- *(5) Project [inv_quantity_on_hand#7, i_product_name#60, i_brand#47, i_class#49, i_category#51]
               +- BroadcastNestedLoopJoin BuildRight, Inner
                  :- *(3) Project [inv_quantity_on_hand#7, i_brand#47, i_class#49, i_category#51, i_product_name#60]
                  :  +- *(3) BroadcastHashJoin [inv_item_sk#9], [i_item_sk#39], Inner, BuildRight, false
                  :     :- *(3) Project [inv_item_sk#9, inv_quantity_on_hand#7]
                  :     :  +- *(3) BroadcastHashJoin [inv_date_sk#8], [d_date_sk#11], Inner, BuildRight, false
                  :     :     :- *(3) Project [inv_date_sk#8, inv_item_sk#9, inv_quantity_on_hand#7]
                  :     :     :  +- *(3) Filter (isnotnull(inv_date_sk#8) AND isnotnull(inv_item_sk#9))
                  :     :     :     +- *(3) ColumnarToRow
                  :     :     :        +- FileScan parquet default.inventory[inv_date_sk#8,inv_item_sk#9,inv_quantity_on_hand#7] Batched: true, DataFilters: [isnotnull(inv_date_sk#8), isnotnull(inv_item_sk#9)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(inv_date_sk), IsNotNull(inv_item_sk)], ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_quantity_on_hand:int>
                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#82]
                  :     :        +- *(1) Project [d_date_sk#11]
                  :     :           +- *(1) Filter (((isnotnull(d_month_seq#14) AND (d_month_seq#14 >= 1200)) AND (d_month_seq#14 <= 1211)) AND isnotnull(d_date_sk#11))
                  :     :              +- *(1) ColumnarToRow
                  :     :                 +- FileScan parquet default.date_dim[d_date_sk#11,d_month_seq#14] Batched: true, DataFilters: [isnotnull(d_month_seq#14), (d_month_seq#14 >= 1200), (d_month_seq#14 <= 1211), isnotnul..., Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#83]
                  :        +- *(2) Project [i_item_sk#39, i_brand#47, i_class#49, i_category#51, i_product_name#60]
                  :           +- *(2) Filter isnotnull(i_item_sk#39)
                  :              +- *(2) ColumnarToRow
                  :                 +- FileScan parquet default.item[i_item_sk#39,i_brand#47,i_class#49,i_category#51,i_product_name#60] Batched: true, DataFilters: [isnotnull(i_item_sk#39)], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>
                  +- BroadcastExchange IdentityBroadcastMode, [id=#84]
                     +- *(4) ColumnarToRow
                        +- FileScan parquet default.warehouse[] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<>
