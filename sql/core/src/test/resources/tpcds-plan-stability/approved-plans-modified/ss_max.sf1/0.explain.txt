== Parsed Logical Plan ==
'Project ['count(1) AS total#1, 'count('ss_sold_date_sk) AS not_null_total#2, 'count('ss_sold_date_sk) AS unique_days#3, 'max('ss_sold_date_sk) AS max_ss_sold_date_sk#4, 'max('ss_sold_time_sk) AS max_ss_sold_time_sk#5, 'max('ss_item_sk) AS max_ss_item_sk#6, 'max('ss_customer_sk) AS max_ss_customer_sk#7, 'max('ss_cdemo_sk) AS max_ss_cdemo_sk#8, 'max('ss_hdemo_sk) AS max_ss_hdemo_sk#9, 'max('ss_addr_sk) AS max_ss_addr_sk#10, 'max('ss_store_sk) AS max_ss_store_sk#11, 'max('ss_promo_sk) AS max_ss_promo_sk#12]
+- 'UnresolvedRelation [store_sales]

== Analyzed Logical Plan ==
total: bigint, not_null_total: bigint, unique_days: bigint, max_ss_sold_date_sk: int, max_ss_sold_time_sk: int, max_ss_item_sk: int, max_ss_customer_sk: int, max_ss_cdemo_sk: int, max_ss_hdemo_sk: int, max_ss_addr_sk: int, max_ss_store_sk: int, max_ss_promo_sk: int
Aggregate [count(1) AS total#13, count(ss_sold_date_sk#14) AS not_null_total#15, count(distinct ss_sold_date_sk#14) AS unique_days#16, max(ss_sold_date_sk#14) AS max_ss_sold_date_sk#4, max(ss_sold_time_sk#17) AS max_ss_sold_time_sk#5, max(ss_item_sk#18) AS max_ss_item_sk#6, max(ss_customer_sk#19) AS max_ss_customer_sk#7, max(ss_cdemo_sk#20) AS max_ss_cdemo_sk#8, max(ss_hdemo_sk#21) AS max_ss_hdemo_sk#9, max(ss_addr_sk#22) AS max_ss_addr_sk#10, max(ss_store_sk#23) AS max_ss_store_sk#11, max(ss_promo_sk#24) AS max_ss_promo_sk#12]
+- SubqueryAlias spark_catalog.tpcds_sf1_parquet_stats.store_sales
   +- Relation[ss_sold_date_sk#14,ss_sold_time_sk#17,ss_item_sk#18,ss_customer_sk#19,ss_cdemo_sk#20,ss_hdemo_sk#21,ss_addr_sk#22,ss_store_sk#23,ss_promo_sk#24,ss_ticket_number#25,ss_quantity#26,ss_wholesale_cost#27,ss_list_price#28,ss_sales_price#29,ss_ext_discount_amt#30,ss_ext_sales_price#31,ss_ext_wholesale_cost#32,ss_ext_list_price#33,ss_ext_tax#34,ss_coupon_amt#35,ss_net_paid#36,ss_net_paid_inc_tax#37,ss_net_profit#38] parquet

== Optimized Logical Plan ==
Aggregate [count(1) AS total#13, count(ss_sold_date_sk#14) AS not_null_total#15, count(distinct ss_sold_date_sk#14) AS unique_days#16, max(ss_sold_date_sk#14) AS max_ss_sold_date_sk#4, max(ss_sold_time_sk#17) AS max_ss_sold_time_sk#5, max(ss_item_sk#18) AS max_ss_item_sk#6, max(ss_customer_sk#19) AS max_ss_customer_sk#7, max(ss_cdemo_sk#20) AS max_ss_cdemo_sk#8, max(ss_hdemo_sk#21) AS max_ss_hdemo_sk#9, max(ss_addr_sk#22) AS max_ss_addr_sk#10, max(ss_store_sk#23) AS max_ss_store_sk#11, max(ss_promo_sk#24) AS max_ss_promo_sk#12]
+- Project [ss_sold_date_sk#14, ss_sold_time_sk#17, ss_item_sk#18, ss_customer_sk#19, ss_cdemo_sk#20, ss_hdemo_sk#21, ss_addr_sk#22, ss_store_sk#23, ss_promo_sk#24]
   +- Relation[ss_sold_date_sk#14,ss_sold_time_sk#17,ss_item_sk#18,ss_customer_sk#19,ss_cdemo_sk#20,ss_hdemo_sk#21,ss_addr_sk#22,ss_store_sk#23,ss_promo_sk#24,ss_ticket_number#25,ss_quantity#26,ss_wholesale_cost#27,ss_list_price#28,ss_sales_price#29,ss_ext_discount_amt#30,ss_ext_sales_price#31,ss_ext_wholesale_cost#32,ss_ext_list_price#33,ss_ext_tax#34,ss_coupon_amt#35,ss_net_paid#36,ss_net_paid_inc_tax#37,ss_net_profit#38] parquet

== Physical Plan ==
*(3) HashAggregate(keys=[], functions=[count(1), count(ss_sold_date_sk#14), max(ss_sold_date_sk#14), max(ss_sold_time_sk#17), max(ss_item_sk#18), max(ss_customer_sk#19), max(ss_cdemo_sk#20), max(ss_hdemo_sk#21), max(ss_addr_sk#22), max(ss_store_sk#23), max(ss_promo_sk#24), count(distinct ss_sold_date_sk#14)], output=[total#13, not_null_total#15, unique_days#16, max_ss_sold_date_sk#4, max_ss_sold_time_sk#5, max_ss_item_sk#6, max_ss_customer_sk#7, max_ss_cdemo_sk#8, max_ss_hdemo_sk#9, max_ss_addr_sk#10, max_ss_store_sk#11, max_ss_promo_sk#12])
+- Exchange SinglePartition, true, [id=#39]
   +- *(2) HashAggregate(keys=[], functions=[merge_count(1), merge_count(ss_sold_date_sk#14), merge_max(ss_sold_date_sk#14), merge_max(ss_sold_time_sk#17), merge_max(ss_item_sk#18), merge_max(ss_customer_sk#19), merge_max(ss_cdemo_sk#20), merge_max(ss_hdemo_sk#21), merge_max(ss_addr_sk#22), merge_max(ss_store_sk#23), merge_max(ss_promo_sk#24), partial_count(distinct ss_sold_date_sk#14)], output=[count#40, count#41, max#42, max#43, max#44, max#45, max#46, max#47, max#48, max#49, max#50, count#51])
      +- *(2) HashAggregate(keys=[ss_sold_date_sk#14], functions=[merge_count(1), merge_count(ss_sold_date_sk#14), merge_max(ss_sold_date_sk#14), merge_max(ss_sold_time_sk#17), merge_max(ss_item_sk#18), merge_max(ss_customer_sk#19), merge_max(ss_cdemo_sk#20), merge_max(ss_hdemo_sk#21), merge_max(ss_addr_sk#22), merge_max(ss_store_sk#23), merge_max(ss_promo_sk#24)], output=[ss_sold_date_sk#14, count#40, count#41, max#42, max#43, max#44, max#45, max#46, max#47, max#48, max#49, max#50])
         +- Exchange hashpartitioning(ss_sold_date_sk#14, 5), true, [id=#52]
            +- *(1) HashAggregate(keys=[ss_sold_date_sk#14], functions=[partial_count(1), partial_count(ss_sold_date_sk#14), partial_max(ss_sold_date_sk#14), partial_max(ss_sold_time_sk#17), partial_max(ss_item_sk#18), partial_max(ss_customer_sk#19), partial_max(ss_cdemo_sk#20), partial_max(ss_hdemo_sk#21), partial_max(ss_addr_sk#22), partial_max(ss_store_sk#23), partial_max(ss_promo_sk#24)], output=[ss_sold_date_sk#14, count#40, count#41, max#42, max#43, max#44, max#45, max#46, max#47, max#48, max#49, max#50])
               +- *(1) ColumnarToRow
                  +- FileScan parquet tpcds_sf1_parquet_stats.store_sales[ss_sold_date_sk#14,ss_sold_time_sk#17,ss_item_sk#18,ss_customer_sk#19,ss_cdemo_sk#20,ss_hdemo_sk#21,ss_addr_sk#22,ss_store_sk#23,ss_promo_sk#24] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex[file:/Users/yi.wu/IdeaProjects/spark/sql/core/spark-warehouse/org.apache.spark...., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ss_sold_date_sk:int,ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,...
